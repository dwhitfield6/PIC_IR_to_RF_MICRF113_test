

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Tue Mar 17 19:04:27 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1704
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x320,16
    51                           	dabs	1,0x2A0,80
    52                           	dabs	1,0x240,48
    53                           	dabs	1,0x2160,0,_IRRawCode
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010E                     	;# 
   100  0111                     	;# 
   101  0112                     	;# 
   102  0113                     	;# 
   103  0114                     	;# 
   104  0115                     	;# 
   105  0116                     	;# 
   106  0117                     	;# 
   107  0118                     	;# 
   108  0119                     	;# 
   109  011C                     	;# 
   110  018C                     	;# 
   111  018E                     	;# 
   112  0191                     	;# 
   113  0191                     	;# 
   114  0192                     	;# 
   115  0193                     	;# 
   116  0193                     	;# 
   117  0194                     	;# 
   118  0195                     	;# 
   119  0196                     	;# 
   120  0197                     	;# 
   121  0199                     	;# 
   122  0199                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019A                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019C                     	;# 
   133  019C                     	;# 
   134  019C                     	;# 
   135  019D                     	;# 
   136  019D                     	;# 
   137  019D                     	;# 
   138  019E                     	;# 
   139  019E                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  019F                     	;# 
   143  019F                     	;# 
   144  019F                     	;# 
   145  019F                     	;# 
   146  020C                     	;# 
   147  020E                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  028C                     	;# 
   165  028E                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0293                     	;# 
   171  0298                     	;# 
   172  0298                     	;# 
   173  0299                     	;# 
   174  029A                     	;# 
   175  029A                     	;# 
   176  029E                     	;# 
   177  030C                     	;# 
   178  030E                     	;# 
   179  038C                     	;# 
   180  038E                     	;# 
   181  0391                     	;# 
   182  0392                     	;# 
   183  0393                     	;# 
   184  0397                     	;# 
   185  0398                     	;# 
   186  0399                     	;# 
   187  0415                     	;# 
   188  0416                     	;# 
   189  0417                     	;# 
   190  041C                     	;# 
   191  041D                     	;# 
   192  041E                     	;# 
   193  0511                     	;# 
   194  0515                     	;# 
   195  0617                     	;# 
   196  0618                     	;# 
   197  0619                     	;# 
   198  0619                     	;# 
   199  061A                     	;# 
   200  061B                     	;# 
   201  061C                     	;# 
   202  061C                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0696                     	;# 
   209  0697                     	;# 
   210  0698                     	;# 
   211  0699                     	;# 
   212  069A                     	;# 
   213  069B                     	;# 
   214  069C                     	;# 
   215  069D                     	;# 
   216  069E                     	;# 
   217  069F                     	;# 
   218  0E0F                     	;# 
   219  0E10                     	;# 
   220  0E11                     	;# 
   221  0E12                     	;# 
   222  0E13                     	;# 
   223  0E14                     	;# 
   224  0E15                     	;# 
   225  0E17                     	;# 
   226  0E20                     	;# 
   227  0E21                     	;# 
   228  0E22                     	;# 
   229  0E24                     	;# 
   230  0E25                     	;# 
   231  0E28                     	;# 
   232  0E29                     	;# 
   233  0E2A                     	;# 
   234  0E2B                     	;# 
   235  0E90                     	;# 
   236  0E91                     	;# 
   237  0E92                     	;# 
   238  0E94                     	;# 
   239  0E95                     	;# 
   240  0EA0                     	;# 
   241  0EA1                     	;# 
   242  0EA2                     	;# 
   243  0EA3                     	;# 
   244  0EA4                     	;# 
   245  0EA5                     	;# 
   246  0F0F                     	;# 
   247  0F10                     	;# 
   248  0F11                     	;# 
   249  0F12                     	;# 
   250  0F13                     	;# 
   251  0F14                     	;# 
   252  0F15                     	;# 
   253  0F16                     	;# 
   254  0F17                     	;# 
   255  0F18                     	;# 
   256  0F19                     	;# 
   257  0F1A                     	;# 
   258  0F1B                     	;# 
   259  0F1C                     	;# 
   260  0F1D                     	;# 
   261  0F1E                     	;# 
   262  0F1F                     	;# 
   263  0F20                     	;# 
   264  0F21                     	;# 
   265  0F22                     	;# 
   266  0F23                     	;# 
   267  0F24                     	;# 
   268  0F25                     	;# 
   269  0F26                     	;# 
   270  0F27                     	;# 
   271  0F28                     	;# 
   272  0F29                     	;# 
   273  0F2A                     	;# 
   274  0F2B                     	;# 
   275  0F2C                     	;# 
   276  0F2D                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  008C                     	;# 
   315  008E                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  009F                     	;# 
   331  010C                     	;# 
   332  010E                     	;# 
   333  0111                     	;# 
   334  0112                     	;# 
   335  0113                     	;# 
   336  0114                     	;# 
   337  0115                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  0118                     	;# 
   341  0119                     	;# 
   342  011C                     	;# 
   343  018C                     	;# 
   344  018E                     	;# 
   345  0191                     	;# 
   346  0191                     	;# 
   347  0192                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0197                     	;# 
   354  0199                     	;# 
   355  0199                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019A                     	;# 
   359  019A                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019C                     	;# 
   366  019C                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019D                     	;# 
   370  019D                     	;# 
   371  019E                     	;# 
   372  019E                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  019F                     	;# 
   376  019F                     	;# 
   377  019F                     	;# 
   378  019F                     	;# 
   379  020C                     	;# 
   380  020E                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0216                     	;# 
   394  0216                     	;# 
   395  0217                     	;# 
   396  0217                     	;# 
   397  028C                     	;# 
   398  028E                     	;# 
   399  0291                     	;# 
   400  0291                     	;# 
   401  0292                     	;# 
   402  0293                     	;# 
   403  0293                     	;# 
   404  0298                     	;# 
   405  0298                     	;# 
   406  0299                     	;# 
   407  029A                     	;# 
   408  029A                     	;# 
   409  029E                     	;# 
   410  030C                     	;# 
   411  030E                     	;# 
   412  038C                     	;# 
   413  038E                     	;# 
   414  0391                     	;# 
   415  0392                     	;# 
   416  0393                     	;# 
   417  0397                     	;# 
   418  0398                     	;# 
   419  0399                     	;# 
   420  0415                     	;# 
   421  0416                     	;# 
   422  0417                     	;# 
   423  041C                     	;# 
   424  041D                     	;# 
   425  041E                     	;# 
   426  0511                     	;# 
   427  0515                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0696                     	;# 
   442  0697                     	;# 
   443  0698                     	;# 
   444  0699                     	;# 
   445  069A                     	;# 
   446  069B                     	;# 
   447  069C                     	;# 
   448  069D                     	;# 
   449  069E                     	;# 
   450  069F                     	;# 
   451  0E0F                     	;# 
   452  0E10                     	;# 
   453  0E11                     	;# 
   454  0E12                     	;# 
   455  0E13                     	;# 
   456  0E14                     	;# 
   457  0E15                     	;# 
   458  0E17                     	;# 
   459  0E20                     	;# 
   460  0E21                     	;# 
   461  0E22                     	;# 
   462  0E24                     	;# 
   463  0E25                     	;# 
   464  0E28                     	;# 
   465  0E29                     	;# 
   466  0E2A                     	;# 
   467  0E2B                     	;# 
   468  0E90                     	;# 
   469  0E91                     	;# 
   470  0E92                     	;# 
   471  0E94                     	;# 
   472  0E95                     	;# 
   473  0EA0                     	;# 
   474  0EA1                     	;# 
   475  0EA2                     	;# 
   476  0EA3                     	;# 
   477  0EA4                     	;# 
   478  0EA5                     	;# 
   479  0F0F                     	;# 
   480  0F10                     	;# 
   481  0F11                     	;# 
   482  0F12                     	;# 
   483  0F13                     	;# 
   484  0F14                     	;# 
   485  0F15                     	;# 
   486  0F16                     	;# 
   487  0F17                     	;# 
   488  0F18                     	;# 
   489  0F19                     	;# 
   490  0F1A                     	;# 
   491  0F1B                     	;# 
   492  0F1C                     	;# 
   493  0F1D                     	;# 
   494  0F1E                     	;# 
   495  0F1F                     	;# 
   496  0F20                     	;# 
   497  0F21                     	;# 
   498  0F22                     	;# 
   499  0F23                     	;# 
   500  0F24                     	;# 
   501  0F25                     	;# 
   502  0F26                     	;# 
   503  0F27                     	;# 
   504  0F28                     	;# 
   505  0F29                     	;# 
   506  0F2A                     	;# 
   507  0F2B                     	;# 
   508  0F2C                     	;# 
   509  0F2D                     	;# 
   510  0FE4                     	;# 
   511  0FE5                     	;# 
   512  0FE6                     	;# 
   513  0FE7                     	;# 
   514  0FE8                     	;# 
   515  0FE9                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000E                     	;# 
   535  0011                     	;# 
   536  0012                     	;# 
   537  0013                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  008C                     	;# 
   548  008E                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009A                     	;# 
   558  009B                     	;# 
   559  009B                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010E                     	;# 
   566  0111                     	;# 
   567  0112                     	;# 
   568  0113                     	;# 
   569  0114                     	;# 
   570  0115                     	;# 
   571  0116                     	;# 
   572  0117                     	;# 
   573  0118                     	;# 
   574  0119                     	;# 
   575  011C                     	;# 
   576  018C                     	;# 
   577  018E                     	;# 
   578  0191                     	;# 
   579  0191                     	;# 
   580  0192                     	;# 
   581  0193                     	;# 
   582  0193                     	;# 
   583  0194                     	;# 
   584  0195                     	;# 
   585  0196                     	;# 
   586  0197                     	;# 
   587  0199                     	;# 
   588  0199                     	;# 
   589  0199                     	;# 
   590  019A                     	;# 
   591  019A                     	;# 
   592  019A                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019C                     	;# 
   600  019C                     	;# 
   601  019D                     	;# 
   602  019D                     	;# 
   603  019D                     	;# 
   604  019E                     	;# 
   605  019E                     	;# 
   606  019E                     	;# 
   607  019F                     	;# 
   608  019F                     	;# 
   609  019F                     	;# 
   610  019F                     	;# 
   611  019F                     	;# 
   612  020C                     	;# 
   613  020E                     	;# 
   614  0211                     	;# 
   615  0211                     	;# 
   616  0212                     	;# 
   617  0212                     	;# 
   618  0213                     	;# 
   619  0213                     	;# 
   620  0214                     	;# 
   621  0214                     	;# 
   622  0215                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  0291                     	;# 
   633  0291                     	;# 
   634  0292                     	;# 
   635  0293                     	;# 
   636  0293                     	;# 
   637  0298                     	;# 
   638  0298                     	;# 
   639  0299                     	;# 
   640  029A                     	;# 
   641  029A                     	;# 
   642  029E                     	;# 
   643  030C                     	;# 
   644  030E                     	;# 
   645  038C                     	;# 
   646  038E                     	;# 
   647  0391                     	;# 
   648  0392                     	;# 
   649  0393                     	;# 
   650  0397                     	;# 
   651  0398                     	;# 
   652  0399                     	;# 
   653  0415                     	;# 
   654  0416                     	;# 
   655  0417                     	;# 
   656  041C                     	;# 
   657  041D                     	;# 
   658  041E                     	;# 
   659  0511                     	;# 
   660  0515                     	;# 
   661  0617                     	;# 
   662  0618                     	;# 
   663  0619                     	;# 
   664  0619                     	;# 
   665  061A                     	;# 
   666  061B                     	;# 
   667  061C                     	;# 
   668  061C                     	;# 
   669  0691                     	;# 
   670  0692                     	;# 
   671  0693                     	;# 
   672  0694                     	;# 
   673  0695                     	;# 
   674  0696                     	;# 
   675  0697                     	;# 
   676  0698                     	;# 
   677  0699                     	;# 
   678  069A                     	;# 
   679  069B                     	;# 
   680  069C                     	;# 
   681  069D                     	;# 
   682  069E                     	;# 
   683  069F                     	;# 
   684  0E0F                     	;# 
   685  0E10                     	;# 
   686  0E11                     	;# 
   687  0E12                     	;# 
   688  0E13                     	;# 
   689  0E14                     	;# 
   690  0E15                     	;# 
   691  0E17                     	;# 
   692  0E20                     	;# 
   693  0E21                     	;# 
   694  0E22                     	;# 
   695  0E24                     	;# 
   696  0E25                     	;# 
   697  0E28                     	;# 
   698  0E29                     	;# 
   699  0E2A                     	;# 
   700  0E2B                     	;# 
   701  0E90                     	;# 
   702  0E91                     	;# 
   703  0E92                     	;# 
   704  0E94                     	;# 
   705  0E95                     	;# 
   706  0EA0                     	;# 
   707  0EA1                     	;# 
   708  0EA2                     	;# 
   709  0EA3                     	;# 
   710  0EA4                     	;# 
   711  0EA5                     	;# 
   712  0F0F                     	;# 
   713  0F10                     	;# 
   714  0F11                     	;# 
   715  0F12                     	;# 
   716  0F13                     	;# 
   717  0F14                     	;# 
   718  0F15                     	;# 
   719  0F16                     	;# 
   720  0F17                     	;# 
   721  0F18                     	;# 
   722  0F19                     	;# 
   723  0F1A                     	;# 
   724  0F1B                     	;# 
   725  0F1C                     	;# 
   726  0F1D                     	;# 
   727  0F1E                     	;# 
   728  0F1F                     	;# 
   729  0F20                     	;# 
   730  0F21                     	;# 
   731  0F22                     	;# 
   732  0F23                     	;# 
   733  0F24                     	;# 
   734  0F25                     	;# 
   735  0F26                     	;# 
   736  0F27                     	;# 
   737  0F28                     	;# 
   738  0F29                     	;# 
   739  0F2A                     	;# 
   740  0F2B                     	;# 
   741  0F2C                     	;# 
   742  0F2D                     	;# 
   743  0FE4                     	;# 
   744  0FE5                     	;# 
   745  0FE6                     	;# 
   746  0FE7                     	;# 
   747  0FE8                     	;# 
   748  0FE9                     	;# 
   749  0FEA                     	;# 
   750  0FEB                     	;# 
   751  0FED                     	;# 
   752  0FEE                     	;# 
   753  0FEF                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0093                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0098                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  010C                     	;# 
   798  010E                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011C                     	;# 
   809  018C                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0197                     	;# 
   820  0199                     	;# 
   821  0199                     	;# 
   822  0199                     	;# 
   823  019A                     	;# 
   824  019A                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019C                     	;# 
   833  019C                     	;# 
   834  019D                     	;# 
   835  019D                     	;# 
   836  019D                     	;# 
   837  019E                     	;# 
   838  019E                     	;# 
   839  019E                     	;# 
   840  019F                     	;# 
   841  019F                     	;# 
   842  019F                     	;# 
   843  019F                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020E                     	;# 
   847  0211                     	;# 
   848  0211                     	;# 
   849  0212                     	;# 
   850  0212                     	;# 
   851  0213                     	;# 
   852  0213                     	;# 
   853  0214                     	;# 
   854  0214                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  028C                     	;# 
   864  028E                     	;# 
   865  0291                     	;# 
   866  0291                     	;# 
   867  0292                     	;# 
   868  0293                     	;# 
   869  0293                     	;# 
   870  0298                     	;# 
   871  0298                     	;# 
   872  0299                     	;# 
   873  029A                     	;# 
   874  029A                     	;# 
   875  029E                     	;# 
   876  030C                     	;# 
   877  030E                     	;# 
   878  038C                     	;# 
   879  038E                     	;# 
   880  0391                     	;# 
   881  0392                     	;# 
   882  0393                     	;# 
   883  0397                     	;# 
   884  0398                     	;# 
   885  0399                     	;# 
   886  0415                     	;# 
   887  0416                     	;# 
   888  0417                     	;# 
   889  041C                     	;# 
   890  041D                     	;# 
   891  041E                     	;# 
   892  0511                     	;# 
   893  0515                     	;# 
   894  0617                     	;# 
   895  0618                     	;# 
   896  0619                     	;# 
   897  0619                     	;# 
   898  061A                     	;# 
   899  061B                     	;# 
   900  061C                     	;# 
   901  061C                     	;# 
   902  0691                     	;# 
   903  0692                     	;# 
   904  0693                     	;# 
   905  0694                     	;# 
   906  0695                     	;# 
   907  0696                     	;# 
   908  0697                     	;# 
   909  0698                     	;# 
   910  0699                     	;# 
   911  069A                     	;# 
   912  069B                     	;# 
   913  069C                     	;# 
   914  069D                     	;# 
   915  069E                     	;# 
   916  069F                     	;# 
   917  0E0F                     	;# 
   918  0E10                     	;# 
   919  0E11                     	;# 
   920  0E12                     	;# 
   921  0E13                     	;# 
   922  0E14                     	;# 
   923  0E15                     	;# 
   924  0E17                     	;# 
   925  0E20                     	;# 
   926  0E21                     	;# 
   927  0E22                     	;# 
   928  0E24                     	;# 
   929  0E25                     	;# 
   930  0E28                     	;# 
   931  0E29                     	;# 
   932  0E2A                     	;# 
   933  0E2B                     	;# 
   934  0E90                     	;# 
   935  0E91                     	;# 
   936  0E92                     	;# 
   937  0E94                     	;# 
   938  0E95                     	;# 
   939  0EA0                     	;# 
   940  0EA1                     	;# 
   941  0EA2                     	;# 
   942  0EA3                     	;# 
   943  0EA4                     	;# 
   944  0EA5                     	;# 
   945  0F0F                     	;# 
   946  0F10                     	;# 
   947  0F11                     	;# 
   948  0F12                     	;# 
   949  0F13                     	;# 
   950  0F14                     	;# 
   951  0F15                     	;# 
   952  0F16                     	;# 
   953  0F17                     	;# 
   954  0F18                     	;# 
   955  0F19                     	;# 
   956  0F1A                     	;# 
   957  0F1B                     	;# 
   958  0F1C                     	;# 
   959  0F1D                     	;# 
   960  0F1E                     	;# 
   961  0F1F                     	;# 
   962  0F20                     	;# 
   963  0F21                     	;# 
   964  0F22                     	;# 
   965  0F23                     	;# 
   966  0F24                     	;# 
   967  0F25                     	;# 
   968  0F26                     	;# 
   969  0F27                     	;# 
   970  0F28                     	;# 
   971  0F29                     	;# 
   972  0F2A                     	;# 
   973  0F2B                     	;# 
   974  0F2C                     	;# 
   975  0F2D                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000E                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0013                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008E                     	;# 
  1015  0091                     	;# 
  1016  0092                     	;# 
  1017  0093                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0098                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  009F                     	;# 
  1030  010C                     	;# 
  1031  010E                     	;# 
  1032  0111                     	;# 
  1033  0112                     	;# 
  1034  0113                     	;# 
  1035  0114                     	;# 
  1036  0115                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  0118                     	;# 
  1040  0119                     	;# 
  1041  011C                     	;# 
  1042  018C                     	;# 
  1043  018E                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  019F                     	;# 
  1077  019F                     	;# 
  1078  020C                     	;# 
  1079  020E                     	;# 
  1080  0211                     	;# 
  1081  0211                     	;# 
  1082  0212                     	;# 
  1083  0212                     	;# 
  1084  0213                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0214                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  028C                     	;# 
  1097  028E                     	;# 
  1098  0291                     	;# 
  1099  0291                     	;# 
  1100  0292                     	;# 
  1101  0293                     	;# 
  1102  0293                     	;# 
  1103  0298                     	;# 
  1104  0298                     	;# 
  1105  0299                     	;# 
  1106  029A                     	;# 
  1107  029A                     	;# 
  1108  029E                     	;# 
  1109  030C                     	;# 
  1110  030E                     	;# 
  1111  038C                     	;# 
  1112  038E                     	;# 
  1113  0391                     	;# 
  1114  0392                     	;# 
  1115  0393                     	;# 
  1116  0397                     	;# 
  1117  0398                     	;# 
  1118  0399                     	;# 
  1119  0415                     	;# 
  1120  0416                     	;# 
  1121  0417                     	;# 
  1122  041C                     	;# 
  1123  041D                     	;# 
  1124  041E                     	;# 
  1125  0511                     	;# 
  1126  0515                     	;# 
  1127  0617                     	;# 
  1128  0618                     	;# 
  1129  0619                     	;# 
  1130  0619                     	;# 
  1131  061A                     	;# 
  1132  061B                     	;# 
  1133  061C                     	;# 
  1134  061C                     	;# 
  1135  0691                     	;# 
  1136  0692                     	;# 
  1137  0693                     	;# 
  1138  0694                     	;# 
  1139  0695                     	;# 
  1140  0696                     	;# 
  1141  0697                     	;# 
  1142  0698                     	;# 
  1143  0699                     	;# 
  1144  069A                     	;# 
  1145  069B                     	;# 
  1146  069C                     	;# 
  1147  069D                     	;# 
  1148  069E                     	;# 
  1149  069F                     	;# 
  1150  0E0F                     	;# 
  1151  0E10                     	;# 
  1152  0E11                     	;# 
  1153  0E12                     	;# 
  1154  0E13                     	;# 
  1155  0E14                     	;# 
  1156  0E15                     	;# 
  1157  0E17                     	;# 
  1158  0E20                     	;# 
  1159  0E21                     	;# 
  1160  0E22                     	;# 
  1161  0E24                     	;# 
  1162  0E25                     	;# 
  1163  0E28                     	;# 
  1164  0E29                     	;# 
  1165  0E2A                     	;# 
  1166  0E2B                     	;# 
  1167  0E90                     	;# 
  1168  0E91                     	;# 
  1169  0E92                     	;# 
  1170  0E94                     	;# 
  1171  0E95                     	;# 
  1172  0EA0                     	;# 
  1173  0EA1                     	;# 
  1174  0EA2                     	;# 
  1175  0EA3                     	;# 
  1176  0EA4                     	;# 
  1177  0EA5                     	;# 
  1178  0F0F                     	;# 
  1179  0F10                     	;# 
  1180  0F11                     	;# 
  1181  0F12                     	;# 
  1182  0F13                     	;# 
  1183  0F14                     	;# 
  1184  0F15                     	;# 
  1185  0F16                     	;# 
  1186  0F17                     	;# 
  1187  0F18                     	;# 
  1188  0F19                     	;# 
  1189  0F1A                     	;# 
  1190  0F1B                     	;# 
  1191  0F1C                     	;# 
  1192  0F1D                     	;# 
  1193  0F1E                     	;# 
  1194  0F1F                     	;# 
  1195  0F20                     	;# 
  1196  0F21                     	;# 
  1197  0F22                     	;# 
  1198  0F23                     	;# 
  1199  0F24                     	;# 
  1200  0F25                     	;# 
  1201  0F26                     	;# 
  1202  0F27                     	;# 
  1203  0F28                     	;# 
  1204  0F29                     	;# 
  1205  0F2A                     	;# 
  1206  0F2B                     	;# 
  1207  0F2C                     	;# 
  1208  0F2D                     	;# 
  1209  0FE4                     	;# 
  1210  0FE5                     	;# 
  1211  0FE6                     	;# 
  1212  0FE7                     	;# 
  1213  0FE8                     	;# 
  1214  0FE9                     	;# 
  1215  0FEA                     	;# 
  1216  0FEB                     	;# 
  1217  0FED                     	;# 
  1218  0FEE                     	;# 
  1219  0FEF                     	;# 
  1220  0000                     	;# 
  1221  0001                     	;# 
  1222  0002                     	;# 
  1223  0003                     	;# 
  1224  0004                     	;# 
  1225  0005                     	;# 
  1226  0006                     	;# 
  1227  0007                     	;# 
  1228  0008                     	;# 
  1229  0009                     	;# 
  1230  000A                     	;# 
  1231  000B                     	;# 
  1232  000C                     	;# 
  1233  000E                     	;# 
  1234  0011                     	;# 
  1235  0012                     	;# 
  1236  0013                     	;# 
  1237  0015                     	;# 
  1238  0016                     	;# 
  1239  0016                     	;# 
  1240  0017                     	;# 
  1241  0018                     	;# 
  1242  0019                     	;# 
  1243  001A                     	;# 
  1244  001B                     	;# 
  1245  001C                     	;# 
  1246  008C                     	;# 
  1247  008E                     	;# 
  1248  0091                     	;# 
  1249  0092                     	;# 
  1250  0093                     	;# 
  1251  0095                     	;# 
  1252  0096                     	;# 
  1253  0097                     	;# 
  1254  0098                     	;# 
  1255  0099                     	;# 
  1256  009A                     	;# 
  1257  009B                     	;# 
  1258  009B                     	;# 
  1259  009C                     	;# 
  1260  009D                     	;# 
  1261  009E                     	;# 
  1262  009F                     	;# 
  1263  010C                     	;# 
  1264  010E                     	;# 
  1265  0111                     	;# 
  1266  0112                     	;# 
  1267  0113                     	;# 
  1268  0114                     	;# 
  1269  0115                     	;# 
  1270  0116                     	;# 
  1271  0117                     	;# 
  1272  0118                     	;# 
  1273  0119                     	;# 
  1274  011C                     	;# 
  1275  018C                     	;# 
  1276  018E                     	;# 
  1277  0191                     	;# 
  1278  0191                     	;# 
  1279  0192                     	;# 
  1280  0193                     	;# 
  1281  0193                     	;# 
  1282  0194                     	;# 
  1283  0195                     	;# 
  1284  0196                     	;# 
  1285  0197                     	;# 
  1286  0199                     	;# 
  1287  0199                     	;# 
  1288  0199                     	;# 
  1289  019A                     	;# 
  1290  019A                     	;# 
  1291  019A                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019C                     	;# 
  1298  019C                     	;# 
  1299  019C                     	;# 
  1300  019D                     	;# 
  1301  019D                     	;# 
  1302  019D                     	;# 
  1303  019E                     	;# 
  1304  019E                     	;# 
  1305  019E                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  020C                     	;# 
  1312  020E                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0216                     	;# 
  1326  0216                     	;# 
  1327  0217                     	;# 
  1328  0217                     	;# 
  1329  028C                     	;# 
  1330  028E                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0293                     	;# 
  1336  0298                     	;# 
  1337  0298                     	;# 
  1338  0299                     	;# 
  1339  029A                     	;# 
  1340  029A                     	;# 
  1341  029E                     	;# 
  1342  030C                     	;# 
  1343  030E                     	;# 
  1344  038C                     	;# 
  1345  038E                     	;# 
  1346  0391                     	;# 
  1347  0392                     	;# 
  1348  0393                     	;# 
  1349  0397                     	;# 
  1350  0398                     	;# 
  1351  0399                     	;# 
  1352  0415                     	;# 
  1353  0416                     	;# 
  1354  0417                     	;# 
  1355  041C                     	;# 
  1356  041D                     	;# 
  1357  041E                     	;# 
  1358  0511                     	;# 
  1359  0515                     	;# 
  1360  0617                     	;# 
  1361  0618                     	;# 
  1362  0619                     	;# 
  1363  0619                     	;# 
  1364  061A                     	;# 
  1365  061B                     	;# 
  1366  061C                     	;# 
  1367  061C                     	;# 
  1368  0691                     	;# 
  1369  0692                     	;# 
  1370  0693                     	;# 
  1371  0694                     	;# 
  1372  0695                     	;# 
  1373  0696                     	;# 
  1374  0697                     	;# 
  1375  0698                     	;# 
  1376  0699                     	;# 
  1377  069A                     	;# 
  1378  069B                     	;# 
  1379  069C                     	;# 
  1380  069D                     	;# 
  1381  069E                     	;# 
  1382  069F                     	;# 
  1383  0E0F                     	;# 
  1384  0E10                     	;# 
  1385  0E11                     	;# 
  1386  0E12                     	;# 
  1387  0E13                     	;# 
  1388  0E14                     	;# 
  1389  0E15                     	;# 
  1390  0E17                     	;# 
  1391  0E20                     	;# 
  1392  0E21                     	;# 
  1393  0E22                     	;# 
  1394  0E24                     	;# 
  1395  0E25                     	;# 
  1396  0E28                     	;# 
  1397  0E29                     	;# 
  1398  0E2A                     	;# 
  1399  0E2B                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0013                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008E                     	;# 
  1481  0091                     	;# 
  1482  0092                     	;# 
  1483  0093                     	;# 
  1484  0095                     	;# 
  1485  0096                     	;# 
  1486  0097                     	;# 
  1487  0098                     	;# 
  1488  0099                     	;# 
  1489  009A                     	;# 
  1490  009B                     	;# 
  1491  009B                     	;# 
  1492  009C                     	;# 
  1493  009D                     	;# 
  1494  009E                     	;# 
  1495  009F                     	;# 
  1496  010C                     	;# 
  1497  010E                     	;# 
  1498  0111                     	;# 
  1499  0112                     	;# 
  1500  0113                     	;# 
  1501  0114                     	;# 
  1502  0115                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  0118                     	;# 
  1506  0119                     	;# 
  1507  011C                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  019F                     	;# 
  1543  019F                     	;# 
  1544  020C                     	;# 
  1545  020E                     	;# 
  1546  0211                     	;# 
  1547  0211                     	;# 
  1548  0212                     	;# 
  1549  0212                     	;# 
  1550  0213                     	;# 
  1551  0213                     	;# 
  1552  0214                     	;# 
  1553  0214                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0216                     	;# 
  1559  0216                     	;# 
  1560  0217                     	;# 
  1561  0217                     	;# 
  1562  028C                     	;# 
  1563  028E                     	;# 
  1564  0291                     	;# 
  1565  0291                     	;# 
  1566  0292                     	;# 
  1567  0293                     	;# 
  1568  0293                     	;# 
  1569  0298                     	;# 
  1570  0298                     	;# 
  1571  0299                     	;# 
  1572  029A                     	;# 
  1573  029A                     	;# 
  1574  029E                     	;# 
  1575  030C                     	;# 
  1576  030E                     	;# 
  1577  038C                     	;# 
  1578  038E                     	;# 
  1579  0391                     	;# 
  1580  0392                     	;# 
  1581  0393                     	;# 
  1582  0397                     	;# 
  1583  0398                     	;# 
  1584  0399                     	;# 
  1585  0415                     	;# 
  1586  0416                     	;# 
  1587  0417                     	;# 
  1588  041C                     	;# 
  1589  041D                     	;# 
  1590  041E                     	;# 
  1591  0511                     	;# 
  1592  0515                     	;# 
  1593  0617                     	;# 
  1594  0618                     	;# 
  1595  0619                     	;# 
  1596  0619                     	;# 
  1597  061A                     	;# 
  1598  061B                     	;# 
  1599  061C                     	;# 
  1600  061C                     	;# 
  1601  0691                     	;# 
  1602  0692                     	;# 
  1603  0693                     	;# 
  1604  0694                     	;# 
  1605  0695                     	;# 
  1606  0696                     	;# 
  1607  0697                     	;# 
  1608  0698                     	;# 
  1609  0699                     	;# 
  1610  069A                     	;# 
  1611  069B                     	;# 
  1612  069C                     	;# 
  1613  069D                     	;# 
  1614  069E                     	;# 
  1615  069F                     	;# 
  1616  0E0F                     	;# 
  1617  0E10                     	;# 
  1618  0E11                     	;# 
  1619  0E12                     	;# 
  1620  0E13                     	;# 
  1621  0E14                     	;# 
  1622  0E15                     	;# 
  1623  0E17                     	;# 
  1624  0E20                     	;# 
  1625  0E21                     	;# 
  1626  0E22                     	;# 
  1627  0E24                     	;# 
  1628  0E25                     	;# 
  1629  0E28                     	;# 
  1630  0E29                     	;# 
  1631  0E2A                     	;# 
  1632  0E2B                     	;# 
  1633  0E90                     	;# 
  1634  0E91                     	;# 
  1635  0E92                     	;# 
  1636  0E94                     	;# 
  1637  0E95                     	;# 
  1638  0EA0                     	;# 
  1639  0EA1                     	;# 
  1640  0EA2                     	;# 
  1641  0EA3                     	;# 
  1642  0EA4                     	;# 
  1643  0EA5                     	;# 
  1644  0F0F                     	;# 
  1645  0F10                     	;# 
  1646  0F11                     	;# 
  1647  0F12                     	;# 
  1648  0F13                     	;# 
  1649  0F14                     	;# 
  1650  0F15                     	;# 
  1651  0F16                     	;# 
  1652  0F17                     	;# 
  1653  0F18                     	;# 
  1654  0F19                     	;# 
  1655  0F1A                     	;# 
  1656  0F1B                     	;# 
  1657  0F1C                     	;# 
  1658  0F1D                     	;# 
  1659  0F1E                     	;# 
  1660  0F1F                     	;# 
  1661  0F20                     	;# 
  1662  0F21                     	;# 
  1663  0F22                     	;# 
  1664  0F23                     	;# 
  1665  0F24                     	;# 
  1666  0F25                     	;# 
  1667  0F26                     	;# 
  1668  0F27                     	;# 
  1669  0F28                     	;# 
  1670  0F29                     	;# 
  1671  0F2A                     	;# 
  1672  0F2B                     	;# 
  1673  0F2C                     	;# 
  1674  0F2D                     	;# 
  1675  0FE4                     	;# 
  1676  0FE5                     	;# 
  1677  0FE6                     	;# 
  1678  0FE7                     	;# 
  1679  0FE8                     	;# 
  1680  0FE9                     	;# 
  1681  0FEA                     	;# 
  1682  0FEB                     	;# 
  1683  0FED                     	;# 
  1684  0FEE                     	;# 
  1685  0FEF                     	;# 
  1686  0000                     	;# 
  1687  0001                     	;# 
  1688  0002                     	;# 
  1689  0003                     	;# 
  1690  0004                     	;# 
  1691  0005                     	;# 
  1692  0006                     	;# 
  1693  0007                     	;# 
  1694  0008                     	;# 
  1695  0009                     	;# 
  1696  000A                     	;# 
  1697  000B                     	;# 
  1698  000C                     	;# 
  1699  000E                     	;# 
  1700  0011                     	;# 
  1701  0012                     	;# 
  1702  0013                     	;# 
  1703  0015                     	;# 
  1704  0016                     	;# 
  1705  0016                     	;# 
  1706  0017                     	;# 
  1707  0018                     	;# 
  1708  0019                     	;# 
  1709  001A                     	;# 
  1710  001B                     	;# 
  1711  001C                     	;# 
  1712  008C                     	;# 
  1713  008E                     	;# 
  1714  0091                     	;# 
  1715  0092                     	;# 
  1716  0093                     	;# 
  1717  0095                     	;# 
  1718  0096                     	;# 
  1719  0097                     	;# 
  1720  0098                     	;# 
  1721  0099                     	;# 
  1722  009A                     	;# 
  1723  009B                     	;# 
  1724  009B                     	;# 
  1725  009C                     	;# 
  1726  009D                     	;# 
  1727  009E                     	;# 
  1728  009F                     	;# 
  1729  010C                     	;# 
  1730  010E                     	;# 
  1731  0111                     	;# 
  1732  0112                     	;# 
  1733  0113                     	;# 
  1734  0114                     	;# 
  1735  0115                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  0118                     	;# 
  1739  0119                     	;# 
  1740  011C                     	;# 
  1741  018C                     	;# 
  1742  018E                     	;# 
  1743  0191                     	;# 
  1744  0191                     	;# 
  1745  0192                     	;# 
  1746  0193                     	;# 
  1747  0193                     	;# 
  1748  0194                     	;# 
  1749  0195                     	;# 
  1750  0196                     	;# 
  1751  0197                     	;# 
  1752  0199                     	;# 
  1753  0199                     	;# 
  1754  0199                     	;# 
  1755  019A                     	;# 
  1756  019A                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019B                     	;# 
  1762  019B                     	;# 
  1763  019C                     	;# 
  1764  019C                     	;# 
  1765  019C                     	;# 
  1766  019D                     	;# 
  1767  019D                     	;# 
  1768  019D                     	;# 
  1769  019E                     	;# 
  1770  019E                     	;# 
  1771  019E                     	;# 
  1772  019F                     	;# 
  1773  019F                     	;# 
  1774  019F                     	;# 
  1775  019F                     	;# 
  1776  019F                     	;# 
  1777  020C                     	;# 
  1778  020E                     	;# 
  1779  0211                     	;# 
  1780  0211                     	;# 
  1781  0212                     	;# 
  1782  0212                     	;# 
  1783  0213                     	;# 
  1784  0213                     	;# 
  1785  0214                     	;# 
  1786  0214                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  028C                     	;# 
  1796  028E                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  029A                     	;# 
  1807  029E                     	;# 
  1808  030C                     	;# 
  1809  030E                     	;# 
  1810  038C                     	;# 
  1811  038E                     	;# 
  1812  0391                     	;# 
  1813  0392                     	;# 
  1814  0393                     	;# 
  1815  0397                     	;# 
  1816  0398                     	;# 
  1817  0399                     	;# 
  1818  0415                     	;# 
  1819  0416                     	;# 
  1820  0417                     	;# 
  1821  041C                     	;# 
  1822  041D                     	;# 
  1823  041E                     	;# 
  1824  0511                     	;# 
  1825  0515                     	;# 
  1826  0617                     	;# 
  1827  0618                     	;# 
  1828  0619                     	;# 
  1829  0619                     	;# 
  1830  061A                     	;# 
  1831  061B                     	;# 
  1832  061C                     	;# 
  1833  061C                     	;# 
  1834  0691                     	;# 
  1835  0692                     	;# 
  1836  0693                     	;# 
  1837  0694                     	;# 
  1838  0695                     	;# 
  1839  0696                     	;# 
  1840  0697                     	;# 
  1841  0698                     	;# 
  1842  0699                     	;# 
  1843  069A                     	;# 
  1844  069B                     	;# 
  1845  069C                     	;# 
  1846  069D                     	;# 
  1847  069E                     	;# 
  1848  069F                     	;# 
  1849  0E0F                     	;# 
  1850  0E10                     	;# 
  1851  0E11                     	;# 
  1852  0E12                     	;# 
  1853  0E13                     	;# 
  1854  0E14                     	;# 
  1855  0E15                     	;# 
  1856  0E17                     	;# 
  1857  0E20                     	;# 
  1858  0E21                     	;# 
  1859  0E22                     	;# 
  1860  0E24                     	;# 
  1861  0E25                     	;# 
  1862  0E28                     	;# 
  1863  0E29                     	;# 
  1864  0E2A                     	;# 
  1865  0E2B                     	;# 
  1866  0E90                     	;# 
  1867  0E91                     	;# 
  1868  0E92                     	;# 
  1869  0E94                     	;# 
  1870  0E95                     	;# 
  1871  0EA0                     	;# 
  1872  0EA1                     	;# 
  1873  0EA2                     	;# 
  1874  0EA3                     	;# 
  1875  0EA4                     	;# 
  1876  0EA5                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0FE4                     	;# 
  1909  0FE5                     	;# 
  1910  0FE6                     	;# 
  1911  0FE7                     	;# 
  1912  0FE8                     	;# 
  1913  0FE9                     	;# 
  1914  0FEA                     	;# 
  1915  0FEB                     	;# 
  1916  0FED                     	;# 
  1917  0FEE                     	;# 
  1918  0FEF                     	;# 
  1919  0000                     	;# 
  1920  0001                     	;# 
  1921  0002                     	;# 
  1922  0003                     	;# 
  1923  0004                     	;# 
  1924  0005                     	;# 
  1925  0006                     	;# 
  1926  0007                     	;# 
  1927  0008                     	;# 
  1928  0009                     	;# 
  1929  000A                     	;# 
  1930  000B                     	;# 
  1931  000C                     	;# 
  1932  000E                     	;# 
  1933  0011                     	;# 
  1934  0012                     	;# 
  1935  0013                     	;# 
  1936  0015                     	;# 
  1937  0016                     	;# 
  1938  0016                     	;# 
  1939  0017                     	;# 
  1940  0018                     	;# 
  1941  0019                     	;# 
  1942  001A                     	;# 
  1943  001B                     	;# 
  1944  001C                     	;# 
  1945  008C                     	;# 
  1946  008E                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0093                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0097                     	;# 
  1953  0098                     	;# 
  1954  0099                     	;# 
  1955  009A                     	;# 
  1956  009B                     	;# 
  1957  009B                     	;# 
  1958  009C                     	;# 
  1959  009D                     	;# 
  1960  009E                     	;# 
  1961  009F                     	;# 
  1962  010C                     	;# 
  1963  010E                     	;# 
  1964  0111                     	;# 
  1965  0112                     	;# 
  1966  0113                     	;# 
  1967  0114                     	;# 
  1968  0115                     	;# 
  1969  0116                     	;# 
  1970  0117                     	;# 
  1971  0118                     	;# 
  1972  0119                     	;# 
  1973  011C                     	;# 
  1974  018C                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0194                     	;# 
  1982  0195                     	;# 
  1983  0196                     	;# 
  1984  0197                     	;# 
  1985  0199                     	;# 
  1986  0199                     	;# 
  1987  0199                     	;# 
  1988  019A                     	;# 
  1989  019A                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019D                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019E                     	;# 
  2004  019E                     	;# 
  2005  019F                     	;# 
  2006  019F                     	;# 
  2007  019F                     	;# 
  2008  019F                     	;# 
  2009  019F                     	;# 
  2010  020C                     	;# 
  2011  020E                     	;# 
  2012  0211                     	;# 
  2013  0211                     	;# 
  2014  0212                     	;# 
  2015  0212                     	;# 
  2016  0213                     	;# 
  2017  0213                     	;# 
  2018  0214                     	;# 
  2019  0214                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  028C                     	;# 
  2029  028E                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  029A                     	;# 
  2040  029E                     	;# 
  2041  030C                     	;# 
  2042  030E                     	;# 
  2043  038C                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0397                     	;# 
  2049  0398                     	;# 
  2050  0399                     	;# 
  2051  0415                     	;# 
  2052  0416                     	;# 
  2053  0417                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  0511                     	;# 
  2058  0515                     	;# 
  2059  0617                     	;# 
  2060  0618                     	;# 
  2061  0619                     	;# 
  2062  0619                     	;# 
  2063  061A                     	;# 
  2064  061B                     	;# 
  2065  061C                     	;# 
  2066  061C                     	;# 
  2067  0691                     	;# 
  2068  0692                     	;# 
  2069  0693                     	;# 
  2070  0694                     	;# 
  2071  0695                     	;# 
  2072  0696                     	;# 
  2073  0697                     	;# 
  2074  0698                     	;# 
  2075  0699                     	;# 
  2076  069A                     	;# 
  2077  069B                     	;# 
  2078  069C                     	;# 
  2079  069D                     	;# 
  2080  069E                     	;# 
  2081  069F                     	;# 
  2082  0E0F                     	;# 
  2083  0E10                     	;# 
  2084  0E11                     	;# 
  2085  0E12                     	;# 
  2086  0E13                     	;# 
  2087  0E14                     	;# 
  2088  0E15                     	;# 
  2089  0E17                     	;# 
  2090  0E20                     	;# 
  2091  0E21                     	;# 
  2092  0E22                     	;# 
  2093  0E24                     	;# 
  2094  0E25                     	;# 
  2095  0E28                     	;# 
  2096  0E29                     	;# 
  2097  0E2A                     	;# 
  2098  0E2B                     	;# 
  2099  0E90                     	;# 
  2100  0E91                     	;# 
  2101  0E92                     	;# 
  2102  0E94                     	;# 
  2103  0E95                     	;# 
  2104  0EA0                     	;# 
  2105  0EA1                     	;# 
  2106  0EA2                     	;# 
  2107  0EA3                     	;# 
  2108  0EA4                     	;# 
  2109  0EA5                     	;# 
  2110  0F0F                     	;# 
  2111  0F10                     	;# 
  2112  0F11                     	;# 
  2113  0F12                     	;# 
  2114  0F13                     	;# 
  2115  0F14                     	;# 
  2116  0F15                     	;# 
  2117  0F16                     	;# 
  2118  0F17                     	;# 
  2119  0F18                     	;# 
  2120  0F19                     	;# 
  2121  0F1A                     	;# 
  2122  0F1B                     	;# 
  2123  0F1C                     	;# 
  2124  0F1D                     	;# 
  2125  0F1E                     	;# 
  2126  0F1F                     	;# 
  2127  0F20                     	;# 
  2128  0F21                     	;# 
  2129  0F22                     	;# 
  2130  0F23                     	;# 
  2131  0F24                     	;# 
  2132  0F25                     	;# 
  2133  0F26                     	;# 
  2134  0F27                     	;# 
  2135  0F28                     	;# 
  2136  0F29                     	;# 
  2137  0F2A                     	;# 
  2138  0F2B                     	;# 
  2139  0F2C                     	;# 
  2140  0F2D                     	;# 
  2141  0FE4                     	;# 
  2142  0FE5                     	;# 
  2143  0FE6                     	;# 
  2144  0FE7                     	;# 
  2145  0FE8                     	;# 
  2146  0FE9                     	;# 
  2147  0FEA                     	;# 
  2148  0FEB                     	;# 
  2149  0FED                     	;# 
  2150  0FEE                     	;# 
  2151  0FEF                     	;_IRRawCode
  2152                           
  2153                           	psect	idataBANK0
  2154  0752                     __pidataBANK0:	
  2155                           
  2156                           ;initializer for _BlueLEDcount
  2157  0752  34C4               	retlw	196
  2158  0753  3409               	retlw	9
  2159                           
  2160                           ;initializer for _LEDsdone
  2161  0754  3401               	retlw	1
  2162                           
  2163                           ;initializer for _Sent
  2164  0755  3401               	retlw	1
  2165                           
  2166                           	psect	idataBANK1
  2167  063C                     __pidataBANK1:	
  2168                           
  2169                           ;initializer for _ChannelF
  2170  063C  3403               	retlw	3
  2171  063D  3400               	retlw	0
  2172  063E  3403               	retlw	3
  2173  063F  3403               	retlw	3
  2174  0640  3403               	retlw	3
  2175  0641  3403               	retlw	3
  2176  0642  3400               	retlw	0
  2177  0643  3400               	retlw	0
  2178  0644  3401               	retlw	1
  2179  0645  3400               	retlw	0
  2180  0646  3400               	retlw	0
  2181  0647  3400               	retlw	0
  2182                           
  2183                           	psect	stringtext
  2184  0700                     __pstringtext:	
  2185  0700                     _Version:	
  2186  0700  3431               	retlw	49
  2187  0701  342E               	retlw	46
  2188  0702  3430               	retlw	48
  2189  0703  345F               	retlw	95
  2190  0704  3444               	retlw	68
  2191  0705  3457               	retlw	87
  2192  0706  3430               	retlw	48
  2193  0707  3461               	retlw	97
  2194  0708  3400               	retlw	0
  2195  0709                     __end_of_Version:	
  2196  000B                     _INTCONbits	set	11
  2197  0011                     _PIR1bits	set	17
  2198  0012                     _PIR2bits	set	18
  2199  000E                     _PORTC	set	14
  2200  001B                     _PR2	set	27
  2201  0018                     _T1CONbits	set	24
  2202  001C                     _T2CONbits	set	28
  2203  0017                     _TMR1H	set	23
  2204  0016                     _TMR1L	set	22
  2205  001A                     _TMR2	set	26
  2206  0099                     _OSCCONbits	set	153
  2207  009A                     _OSCSTAT	set	154
  2208  0091                     _PIE1bits	set	145
  2209  0092                     _PIE2bits	set	146
  2210  008E                     _TRISCbits	set	142
  2211  04D0                     _HFIOFS	set	1232
  2212  010E                     _LATC	set	270
  2213  018E                     _ANSELC	set	398
  2214  0197                     _VREGCONbits	set	407
  2215  0293                     _CCP1CONbits	set	659
  2216  029A                     _CCP2CONbits	set	666
  2217  030E                     _SLRCONCbits	set	782
  2218  0399                     _IOCCFbits	set	921
  2219  0398                     _IOCCNbits	set	920
  2220  0397                     _IOCCPbits	set	919
  2221  0416                     _PR4	set	1046
  2222  041D                     _PR6	set	1053
  2223  0417                     _T4CONbits	set	1047
  2224  041E                     _T6CONbits	set	1054
  2225  0415                     _TMR4	set	1045
  2226  041C                     _TMR6	set	1052
  2227                           
  2228                           ; #config settings
  2229  0000                     
  2230                           	psect	cinit
  2231  01E6                     start_initialization:	
  2232  01E6                     __initialization:		;BIGRAM
  2233                           
  2234                           ; Clear objects allocated to BIGRAM
  2235  01E6  3060               	movlw	low (0+8544)
  2236  01E7  0084               	movwf	4
  2237  01E8  3021               	movlw	high (0+8544)
  2238  01E9  0085               	movwf	5
  2239  01EA  3090               	movlw	144
  2240  01EB  00FE               	movwf	btemp
  2241  01EC  3000               	movlw	0
  2242  01ED  00FF               	movwf	btemp+1
  2243  01EE  3186  2648  3181   	fcall	clear_ram0
  2244                           
  2245                           ; Clear objects allocated to COMMON
  2246  01F1  01F9               	clrf	__pbssCOMMON& (0+127)
  2247  01F2  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2248  01F3  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2249  01F4  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  2250  01F5  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
  2251                           
  2252                           ; Clear objects allocated to BANK0
  2253  01F6  3020               	movlw	low __pbssBANK0
  2254  01F7  0084               	movwf	4
  2255  01F8  3000               	movlw	high __pbssBANK0
  2256  01F9  0085               	movwf	5
  2257  01FA  3025               	movlw	37
  2258  01FB  00FE               	movwf	btemp
  2259  01FC  3000               	movlw	0
  2260  01FD  00FF               	movwf	btemp+1
  2261  01FE  3186  2648  3181   	fcall	clear_ram0
  2262                           
  2263                           ; Initialize objects allocated to BANK0
  2264  0201  3052               	movlw	low __pidataBANK0
  2265  0202  0084               	movwf	4
  2266  0203  3087               	movlw	(high __pidataBANK0)| (0+128)
  2267  0204  0085               	movwf	5
  2268  0205  305B               	movlw	low __pdataBANK0
  2269  0206  0086               	movwf	6
  2270  0207  3000               	movlw	high __pdataBANK0
  2271  0208  0087               	movwf	7
  2272  0209  3000               	movlw	0
  2273  020A  00FF               	movwf	btemp+1
  2274  020B  3004               	movlw	4
  2275  020C  3186  2654  3181   	fcall	init_ram
  2276                           
  2277                           ; Initialize objects allocated to BANK1
  2278  020F  303C               	movlw	low __pidataBANK1
  2279  0210  0084               	movwf	4
  2280  0211  3086               	movlw	(high __pidataBANK1)| (0+128)
  2281  0212  0085               	movwf	5
  2282  0213  30A0               	movlw	low __pdataBANK1
  2283  0214  0086               	movwf	6
  2284  0215  3000               	movlw	high __pdataBANK1
  2285  0216  0087               	movwf	7
  2286  0217  3000               	movlw	0
  2287  0218  00FF               	movwf	btemp+1
  2288  0219  300C               	movlw	12
  2289  021A  3186  2654         	fcall	init_ram
  2290  021C                     end_of_initialization:	
  2291                           ;End of C runtime variable initialization code
  2292                           
  2293  021C                     __end_of__initialization:	
  2294  021C  0020               	movlb	0
  2295  021D  3184  2C8D         	ljmp	_main	;jump to C main() function
  2296                           
  2297                           	psect	bssCOMMON
  2298  0079                     __pbssCOMMON:	
  2299  0079                     _IRrawCodeNum:	
  2300  0079                     	ds	1
  2301  007A                     _RFcodeBit:	
  2302  007A                     	ds	1
  2303  007B                     _RFcodePlace:	
  2304  007B                     	ds	1
  2305  007C                     _RFsendFlag:	
  2306  007C                     	ds	1
  2307  007D                     _IR_New_Code:	
  2308  007D                     	ds	1
  2309                           
  2310                           	psect	bssBANK0
  2311  0020                     __pbssBANK0:	
  2312  0020                     _RFsendCode:	
  2313  0020                     	ds	20
  2314  0034                     _SleepTimer:	
  2315  0034                     	ds	4
  2316  0038                     _IRrawCount:	
  2317  0038                     	ds	2
  2318  003A                     _TMR1_overflow:	
  2319  003A                     	ds	2
  2320  003C                     _TMR4_overflow:	
  2321  003C                     	ds	2
  2322  003E                     _IRfault:	
  2323  003E                     	ds	1
  2324  003F                     _IRreceived:	
  2325  003F                     	ds	1
  2326  0040                     _Sendcount:	
  2327  0040                     	ds	1
  2328  0041                     _IR_NEC:	
  2329  0041                     	ds	4
  2330                           
  2331                           	psect	dataBANK0
  2332  005B                     __pdataBANK0:	
  2333  005B                     _BlueLEDcount:	
  2334  005B                     	ds	2
  2335  005D                     _LEDsdone:	
  2336  005D                     	ds	1
  2337  005E                     _Sent:	
  2338  005E                     	ds	1
  2339                           
  2340                           	psect	dataBANK1
  2341  00A0                     __pdataBANK1:	
  2342  00A0                     _ChannelF:	
  2343  00A0                     	ds	12
  2344                           
  2345                           	psect	clrtext
  2346  0648                     clear_ram0:	
  2347                           ;	Called with FSR0 containing the base address, and
  2348                           ;	btemp/btemp+1 has the size to clear
  2349                           
  2350  0648  0064               	clrwdt	;clear the watchdog before getting into this loop
  2351  0649                     clrloop0:	
  2352  0649  0180               	clrf	0	;clear RAM location pointed to by FSR
  2353  064A  3101               	addfsr 0,1
  2354  064B  3001               	movlw	1
  2355  064C  02FE               	subwf	126,f
  2356  064D  3000               	movlw	0
  2357  064E  3BFF               	subwfb	127,f
  2358  064F  087F               	movf	127,w
  2359  0650  047E               	iorwf	126,w
  2360  0651  1903               	btfsc	3,2
  2361  0652  3400               	retlw	0	;all done for this memory range, return
  2362  0653  2E49               	goto	clrloop0	;have we reached the end yet?
  2363                           
  2364                           	psect	inittext
  2365  0654                     init_ram:	
  2366  0654  00FE               	movwf	126
  2367  0655                     initloop:	
  2368  0655  0012               	moviw fsr0++
  2369  0656  001E               	movwi fsr1++
  2370  0657  3001               	movlw	1
  2371  0658  02FE               	subwf	126,f
  2372  0659  3000               	movlw	0
  2373  065A  3BFF               	subwfb	127,f
  2374  065B  087F               	movf	127,w
  2375  065C  047E               	iorwf	126,w
  2376  065D  1903               	btfsc	3,2
  2377  065E  3400               	retlw	0
  2378  065F  2E55               	goto	initloop
  2379                           
  2380                           	psect	cstackBANK1
  2381  00AC                     __pcstackBANK1:	
  2382  00AC                     SendRF@Code:	
  2383  00AC                     delayUS@i:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386                           
  2387                           ; 4 bytes @ 0x0
  2388  00AC                     	ds	1
  2389  00AD                     SendRF@i:	
  2390                           
  2391                           ; 1 bytes @ 0x1
  2392  00AD                     	ds	1
  2393  00AE                     ?_UseIRCode:	
  2394  00AE                     UseIRCode@NEC:	
  2395                           ; 0 bytes @ 0x2
  2396                           
  2397                           
  2398                           ; 4 bytes @ 0x2
  2399  00AE                     	ds	2
  2400  00B0                     delayUS@j:	
  2401                           
  2402                           ; 1 bytes @ 0x4
  2403  00B0                     	ds	2
  2404  00B2                     ??_UseIRCode:	
  2405                           
  2406                           ; 0 bytes @ 0x6
  2407  00B2                     	ds	2
  2408  00B4                     ??_main:	
  2409                           
  2410                           ; 0 bytes @ 0x8
  2411  00B4                     	ds	1
  2412  00B5                     main@i:	
  2413                           
  2414                           ; 1 bytes @ 0x9
  2415  00B5                     	ds	1
  2416                           
  2417                           	psect	cstackCOMMON
  2418  0070                     __pcstackCOMMON:	
  2419  0070                     ?_Timer4Reset:	
  2420  0070                     ??_Timer4Reset:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0070                     ?_Set_Timer4:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0070                     ??_Set_Timer4:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0070                     ?_Timer4ON:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0070                     ??_Timer4ON:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0070                     ?_Timer2OFF:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0070                     ?_Reset_Timer1:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_Stop_Timer1:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_Start_Timer1:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ??_Start_Timer1:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_Timer4OFF:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_Timer6OFF:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_ConfigureOscillator:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_InitApp:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_init_Timers:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_init_IR:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_Timer1Init:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_Timer2Init:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_Timer4Init:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_Timer6Init:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_Enable_IR:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_isr:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_Timer2ON:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_Timer6ON:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_Timer6Reset:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Set_Timer6:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?i1_Stop_Timer1:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ??i1_Stop_Timer1:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?i1_Reset_Timer1:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ??i1_Reset_Timer1:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?i1_Timer2OFF:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ??i1_Timer2OFF:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?i1_Timer4OFF:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ??i1_Timer4OFF:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?i1_Timer6OFF:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ??i1_Timer6OFF:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IRrawToNEC:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     Set_Timer4@time:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     IRrawToNEC@Raw:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x0
  2542  0070                     	ds	2
  2543  0072                     IRrawToNEC@NEC:	
  2544                           
  2545                           ; 1 bytes @ 0x2
  2546  0072                     	ds	1
  2547  0073                     IRrawToNEC@Invert:	
  2548                           
  2549                           ; 1 bytes @ 0x3
  2550  0073                     	ds	1
  2551  0074                     ??_IRrawToNEC:	
  2552                           
  2553                           ; 0 bytes @ 0x4
  2554  0074                     	ds	5
  2555                           
  2556                           	psect	cstackBANK0
  2557  0045                     __pcstackBANK0:	
  2558  0045                     IRrawToNEC@NECtemp:	
  2559                           
  2560                           ; 4 bytes @ 0x0
  2561  0045                     	ds	4
  2562  0049                     IRrawToNEC@Pause:	
  2563                           
  2564                           ; 1 bytes @ 0x4
  2565  0049                     	ds	1
  2566  004A                     IRrawToNEC@first:	
  2567                           
  2568                           ; 1 bytes @ 0x5
  2569  004A                     	ds	1
  2570  004B                     IRrawToNEC@i:	
  2571                           
  2572                           ; 1 bytes @ 0x6
  2573  004B                     	ds	1
  2574  004C                     IRrawToNEC@StartBit:	
  2575                           
  2576                           ; 1 bytes @ 0x7
  2577  004C                     	ds	1
  2578  004D                     ??_isr:	
  2579                           
  2580                           ; 0 bytes @ 0x8
  2581  004D                     	ds	9
  2582  0056                     ??_Timer2OFF:	
  2583  0056                     ??_Reset_Timer1:	
  2584                           ; 0 bytes @ 0x11
  2585                           
  2586  0056                     ??_Stop_Timer1:	
  2587                           ; 0 bytes @ 0x11
  2588                           
  2589  0056                     ??_Timer4OFF:	
  2590                           ; 0 bytes @ 0x11
  2591                           
  2592  0056                     ??_Timer6OFF:	
  2593                           ; 0 bytes @ 0x11
  2594                           
  2595  0056                     ??_ConfigureOscillator:	
  2596                           ; 0 bytes @ 0x11
  2597                           
  2598  0056                     ??_InitApp:	
  2599                           ; 0 bytes @ 0x11
  2600                           
  2601  0056                     ??_init_Timers:	
  2602                           ; 0 bytes @ 0x11
  2603                           
  2604  0056                     ??_init_IR:	
  2605                           ; 0 bytes @ 0x11
  2606                           
  2607  0056                     ?_delayUS:	
  2608                           ; 0 bytes @ 0x11
  2609                           
  2610  0056                     ??_Timer1Init:	
  2611                           ; 0 bytes @ 0x11
  2612                           
  2613  0056                     ??_Timer2Init:	
  2614                           ; 0 bytes @ 0x11
  2615                           
  2616  0056                     ??_Timer4Init:	
  2617                           ; 0 bytes @ 0x11
  2618                           
  2619  0056                     ??_Timer6Init:	
  2620                           ; 0 bytes @ 0x11
  2621                           
  2622  0056                     ??_Enable_IR:	
  2623                           ; 0 bytes @ 0x11
  2624                           
  2625  0056                     ??_Timer2ON:	
  2626                           ; 0 bytes @ 0x11
  2627                           
  2628  0056                     ??_Timer6ON:	
  2629                           ; 0 bytes @ 0x11
  2630                           
  2631  0056                     ??_Timer6Reset:	
  2632                           ; 0 bytes @ 0x11
  2633                           
  2634  0056                     ??_Set_Timer6:	
  2635                           ; 0 bytes @ 0x11
  2636                           
  2637  0056                     ?_SendRF:	
  2638                           ; 0 bytes @ 0x11
  2639                           
  2640  0056                     Set_Timer6@time:	
  2641                           ; 1 bytes @ 0x11
  2642                           
  2643  0056                     SendRF@size:	
  2644                           ; 1 bytes @ 0x11
  2645                           
  2646  0056                     delayUS@US:	
  2647                           ; 1 bytes @ 0x11
  2648                           
  2649                           
  2650                           ; 4 bytes @ 0x11
  2651  0056                     	ds	1
  2652  0057                     SendRF@RepeatAmount:	
  2653                           
  2654                           ; 1 bytes @ 0x12
  2655  0057                     	ds	1
  2656  0058                     ??_SendRF:	
  2657                           
  2658                           ; 0 bytes @ 0x13
  2659  0058                     	ds	2
  2660  005A                     ??_delayUS:	
  2661  005A                     UseIRCode@Code:	
  2662                           ; 0 bytes @ 0x15
  2663                           
  2664                           
  2665                           ; 1 bytes @ 0x15
  2666  005A                     	ds	1
  2667                           
  2668                           	psect	maintext
  2669  048D                     __pmaintext:	
  2670 ;;
  2671 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2672 ;;
  2673 ;; *************** function _main *****************
  2674 ;; Defined at:
  2675 ;;		line 49 in file "main.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  i               1    9[BANK1 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : B1F/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2689 ;;      Params:         0       0       0       0       0       0       0       0
  2690 ;;      Locals:         0       0       1       0       0       0       0       0
  2691 ;;      Temps:          0       0       1       0       0       0       0       0
  2692 ;;      Totals:         0       0       2       0       0       0       0       0
  2693 ;;Total ram usage:        2 bytes
  2694 ;; Hardware stack levels required when called:    5
  2695 ;; This function calls:
  2696 ;;		_ConfigureOscillator
  2697 ;;		_InitApp
  2698 ;;		_UseIRCode
  2699 ;;		_delayUS
  2700 ;;		_init_IR
  2701 ;;		_init_Timers
  2702 ;; This function is called by:
  2703 ;;		Startup code after reset
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _main
  2709  048D                     _main:	
  2710                           
  2711                           ;main.c: 51: unsigned char i=0;
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2715  048D  0021               	movlb	1	; select bank1
  2716  048E  01B5               	clrf	main@i^(0+128)
  2717                           
  2718                           ;main.c: 54: ConfigureOscillator();
  2719  048F  3186  262F  3184   	fcall	_ConfigureOscillator
  2720                           
  2721                           ;main.c: 55: InitApp();
  2722  0492  3186  261D  3184   	fcall	_InitApp
  2723                           
  2724                           ;main.c: 56: init_Timers();
  2725  0495  3186  2660  3184   	fcall	_init_Timers
  2726                           
  2727                           ;main.c: 57: init_IR();
  2728  0498  3187  2710  3184   	fcall	_init_IR
  2729                           
  2730                           ;main.c: 60: LATC |= 0b00000100;
  2731  049B  0022               	movlb	2	; select bank2
  2732  049C  150E               	bsf	14,2	;volatile
  2733                           
  2734                           ;main.c: 61: for(i =0;i<10;i++)
  2735  049D  0021               	movlb	1	; select bank1
  2736  049E  01B5               	clrf	main@i^(0+128)
  2737  049F  300A               	movlw	10
  2738  04A0  0235               	subwf	main@i^(0+128),w
  2739  04A1  1803               	btfsc	3,0
  2740  04A2  2CD4               	goto	l2361
  2741  04A3                     l171:	
  2742                           
  2743                           ;main.c: 62: {
  2744                           ;main.c: 63: LATC |= 0b00000001;
  2745  04A3  0022               	movlb	2	; select bank2
  2746  04A4  140E               	bsf	14,0	;volatile
  2747                           
  2748                           ;main.c: 64: LATC &= ~0b00000010;
  2749  04A5  30FD               	movlw	253
  2750  04A6  0021               	movlb	1	; select bank1
  2751  04A7  00B4               	movwf	??_main^(0+128)
  2752  04A8  0834               	movf	??_main^(0+128),w
  2753  04A9  0022               	movlb	2	; select bank2
  2754  04AA  058E               	andwf	14,f	;volatile
  2755                           
  2756                           ;main.c: 65: delayUS(40000);
  2757  04AB  3000               	movlw	0
  2758  04AC  0020               	movlb	0	; select bank0
  2759  04AD  00D9               	movwf	delayUS@US+3
  2760  04AE  3000               	movlw	0
  2761  04AF  00D8               	movwf	delayUS@US+2
  2762  04B0  309C               	movlw	156
  2763  04B1  00D7               	movwf	delayUS@US+1
  2764  04B2  3040               	movlw	64
  2765  04B3  00D6               	movwf	delayUS@US
  2766  04B4  3185  25B9  3184   	fcall	_delayUS
  2767                           
  2768                           ;main.c: 66: LATC |= 0b00000010;
  2769  04B7  0022               	movlb	2	; select bank2
  2770  04B8  148E               	bsf	14,1	;volatile
  2771                           
  2772                           ;main.c: 67: LATC &= ~0b00000001;
  2773  04B9  30FE               	movlw	254
  2774  04BA  0021               	movlb	1	; select bank1
  2775  04BB  00B4               	movwf	??_main^(0+128)
  2776  04BC  0834               	movf	??_main^(0+128),w
  2777  04BD  0022               	movlb	2	; select bank2
  2778  04BE  058E               	andwf	14,f	;volatile
  2779                           
  2780                           ;main.c: 68: delayUS(40000);
  2781  04BF  3000               	movlw	0
  2782  04C0  0020               	movlb	0	; select bank0
  2783  04C1  00D9               	movwf	delayUS@US+3
  2784  04C2  3000               	movlw	0
  2785  04C3  00D8               	movwf	delayUS@US+2
  2786  04C4  309C               	movlw	156
  2787  04C5  00D7               	movwf	delayUS@US+1
  2788  04C6  3040               	movlw	64
  2789  04C7  00D6               	movwf	delayUS@US
  2790  04C8  3185  25B9  3184   	fcall	_delayUS
  2791  04CB  3001               	movlw	1
  2792  04CC  0021               	movlb	1	; select bank1
  2793  04CD  00B4               	movwf	??_main^(0+128)
  2794  04CE  0834               	movf	??_main^(0+128),w
  2795  04CF  07B5               	addwf	main@i^(0+128),f
  2796  04D0  300A               	movlw	10
  2797  04D1  0235               	subwf	main@i^(0+128),w
  2798  04D2  1C03               	skipc
  2799  04D3  2CA3               	goto	l171
  2800  04D4                     l2361:	
  2801                           
  2802                           ;main.c: 69: }
  2803                           ;main.c: 70: LATC &= ~(0b00000010 + 0b00000100);
  2804  04D4  30F9               	movlw	249
  2805  04D5  00B4               	movwf	??_main^(0+128)
  2806  04D6  0834               	movf	??_main^(0+128),w
  2807  04D7  0022               	movlb	2	; select bank2
  2808  04D8  058E               	andwf	14,f	;volatile
  2809  04D9                     l173:	
  2810                           ;main.c: 72: while(1)
  2811                           
  2812                           
  2813                           ;main.c: 73: {
  2814                           ;main.c: 74: if(IR_New_Code)
  2815  04D9  087D               	movf	_IR_New_Code,w
  2816  04DA  1903               	btfsc	3,2
  2817  04DB  2CF0               	goto	l2365
  2818                           
  2819                           ;main.c: 75: {
  2820                           ;main.c: 77: UseIRCode(&IR_New_Code,IR_NEC);
  2821  04DC  0020               	movlb	0	; select bank0
  2822  04DD  0844               	movf	_IR_NEC+3,w
  2823  04DE  0021               	movlb	1	; select bank1
  2824  04DF  00B1               	movwf	(UseIRCode@NEC+3)^(0+128)
  2825  04E0  0020               	movlb	0	; select bank0
  2826  04E1  0843               	movf	_IR_NEC+2,w
  2827  04E2  0021               	movlb	1	; select bank1
  2828  04E3  00B0               	movwf	(UseIRCode@NEC+2)^(0+128)
  2829  04E4  0020               	movlb	0	; select bank0
  2830  04E5  0842               	movf	_IR_NEC+1,w
  2831  04E6  0021               	movlb	1	; select bank1
  2832  04E7  00AF               	movwf	(UseIRCode@NEC+1)^(0+128)
  2833  04E8  0020               	movlb	0	; select bank0
  2834  04E9  0841               	movf	_IR_NEC,w
  2835  04EA  0021               	movlb	1	; select bank1
  2836  04EB  00AE               	movwf	UseIRCode@NEC^(0+128)
  2837  04EC  307D               	movlw	(low (_IR_New_Code| 0))& (0+255)
  2838  04ED  3185  2521  3184   	fcall	_UseIRCode
  2839  04F0                     l2365:	
  2840                           
  2841                           ;main.c: 78: }
  2842                           ;main.c: 79: if(Sent && LEDsdone && IRreceived)
  2843  04F0  0020               	movlb	0	; select bank0
  2844  04F1  085E               	movf	_Sent,w	;volatile
  2845  04F2  1903               	btfsc	3,2
  2846  04F3  2D18               	goto	l2383
  2847  04F4  085D               	movf	_LEDsdone,w	;volatile
  2848  04F5  1903               	btfsc	3,2
  2849  04F6  2D18               	goto	l2383
  2850  04F7  083F               	movf	_IRreceived,w	;volatile
  2851  04F8  1903               	btfsc	3,2
  2852  04F9  2D18               	goto	l2383
  2853                           
  2854                           ;main.c: 80: {
  2855                           ;main.c: 81: if(SleepTimer > 1000)
  2856  04FA  0837               	movf	_SleepTimer+3,w
  2857  04FB  1D03               	btfss	3,2
  2858  04FC  2D06               	goto	l2373
  2859  04FD  0836               	movf	_SleepTimer+2,w
  2860  04FE  1D03               	btfss	3,2
  2861  04FF  2D06               	goto	l2373
  2862  0500  30E9               	movlw	233
  2863  0501  0234               	subwf	_SleepTimer,w
  2864  0502  3003               	movlw	3
  2865  0503  3B35               	subwfb	_SleepTimer+1,w
  2866  0504  1C03               	btfss	3,0
  2867  0505  2D0E               	goto	l2381
  2868  0506                     l2373:	
  2869                           
  2870                           ;main.c: 82: {
  2871                           ;main.c: 83: IRreceived = 0;
  2872  0506  01BF               	clrf	_IRreceived	;volatile
  2873  0507  0063               	sleep	;# 
  2874                           
  2875                           ;main.c: 85: __nop();
  2876  0508  0000               	nop
  2877                           
  2878                           ;main.c: 86: __nop();
  2879  0509  0000               	nop
  2880                           
  2881                           ;main.c: 87: ConfigureOscillator();
  2882  050A  3186  262F  3184   	fcall	_ConfigureOscillator
  2883                           
  2884                           ;main.c: 88: }
  2885  050D  2CD9               	goto	l173
  2886  050E                     l2381:	
  2887                           
  2888                           ;main.c: 89: else
  2889                           ;main.c: 90: {
  2890                           ;main.c: 91: SleepTimer++;
  2891  050E  3001               	movlw	1
  2892  050F  0020               	movlb	0	; select bank0
  2893  0510  07B4               	addwf	_SleepTimer,f
  2894  0511  3000               	movlw	0
  2895  0512  3DB5               	addwfc	_SleepTimer+1,f
  2896  0513  3000               	movlw	0
  2897  0514  3DB6               	addwfc	_SleepTimer+2,f
  2898  0515  3000               	movlw	0
  2899  0516  3DB7               	addwfc	_SleepTimer+3,f
  2900                           
  2901                           ;main.c: 92: }
  2902                           ;main.c: 93: }
  2903  0517  2CD9               	goto	l173
  2904  0518                     l2383:	
  2905                           
  2906                           ;main.c: 94: else
  2907                           ;main.c: 95: {
  2908                           ;main.c: 96: SleepTimer = 0;
  2909  0518  3000               	movlw	0
  2910  0519  00B7               	movwf	_SleepTimer+3
  2911  051A  3000               	movlw	0
  2912  051B  00B6               	movwf	_SleepTimer+2
  2913  051C  3000               	movlw	0
  2914  051D  00B5               	movwf	_SleepTimer+1
  2915  051E  3000               	movlw	0
  2916  051F  00B4               	movwf	_SleepTimer
  2917  0520  2CD9               	goto	l173
  2918  0521                     __end_of_main:	
  2919                           
  2920                           	psect	text1
  2921  0660                     __ptext1:	
  2922 ;; *************** function _init_Timers *****************
  2923 ;; Defined at:
  2924 ;;		line 48 in file "Timer.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;		None               void
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2938 ;;      Params:         0       0       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    4
  2945 ;; This function calls:
  2946 ;;		_Timer1Init
  2947 ;;		_Timer2Init
  2948 ;;		_Timer4Init
  2949 ;;		_Timer6Init
  2950 ;; This function is called by:
  2951 ;;		_main
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _init_Timers
  2957  0660                     _init_Timers:	
  2958                           
  2959                           ;Timer.c: 50: Timer1Init();
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _init_Timers: [wreg+status,2+status,0+pclath+cstack]
  2963  0660  3186  260B  3186   	fcall	_Timer1Init
  2964                           
  2965                           ;Timer.c: 51: Timer2Init();
  2966  0663  3185  25F7  3186   	fcall	_Timer2Init
  2967                           
  2968                           ;Timer.c: 52: Timer4Init();
  2969  0666  3186  2678  3186   	fcall	_Timer4Init
  2970                           
  2971                           ;Timer.c: 53: Timer6Init();
  2972  0669  3186  266C         	fcall	_Timer6Init
  2973  066B  0008               	return
  2974  066C                     __end_of_init_Timers:	
  2975                           
  2976                           	psect	text2
  2977  066C                     __ptext2:	
  2978 ;; *************** function _Timer6Init *****************
  2979 ;; Defined at:
  2980 ;;		line 229 in file "Timer.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;		None               void
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, pclath, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2994 ;;      Params:         0       0       0       0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0       0
  2997 ;;      Totals:         0       0       0       0       0       0       0       0
  2998 ;;Total ram usage:        0 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    3
  3001 ;; This function calls:
  3002 ;;		_Timer6OFF
  3003 ;; This function is called by:
  3004 ;;		_init_Timers
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _Timer6Init
  3010  066C                     _Timer6Init:	
  3011                           
  3012                           ;Timer.c: 233: T6CONbits.T6OUTPS = 0xF;
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _Timer6Init: [wreg+status,2+status,0+pclath+cstack]
  3016  066C  3078               	movlw	120
  3017  066D  0028               	movlb	8	; select bank8
  3018  066E  049E               	iorwf	30,f	;volatile
  3019                           
  3020                           ;Timer.c: 239: T6CONbits.T6CKPS = 0x2;
  3021  066F  081E               	movf	30,w	;volatile
  3022  0670  39FC               	andlw	-4
  3023  0671  3802               	iorlw	2
  3024  0672  009E               	movwf	30	;volatile
  3025                           
  3026                           ;Timer.c: 241: PR6 = 0xFF;
  3027  0673  30FF               	movlw	255
  3028  0674  009D               	movwf	29	;volatile
  3029                           
  3030                           ;Timer.c: 242: Timer6OFF();
  3031  0675  3187  2717         	fcall	_Timer6OFF
  3032  0677  0008               	return
  3033  0678                     __end_of_Timer6Init:	
  3034                           
  3035                           	psect	text3
  3036  0678                     __ptext3:	
  3037 ;; *************** function _Timer4Init *****************
  3038 ;; Defined at:
  3039 ;;		line 165 in file "Timer.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;		None               void
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3053 ;;      Params:         0       0       0       0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0
  3056 ;;      Totals:         0       0       0       0       0       0       0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    3
  3060 ;; This function calls:
  3061 ;;		_Timer4OFF
  3062 ;; This function is called by:
  3063 ;;		_init_Timers
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _Timer4Init
  3069  0678                     _Timer4Init:	
  3070                           
  3071                           ;Timer.c: 169: T4CONbits.T4OUTPS = 0xF;
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _Timer4Init: [wreg+status,2+status,0+pclath+cstack]
  3075  0678  3078               	movlw	120
  3076  0679  0028               	movlb	8	; select bank8
  3077  067A  0497               	iorwf	23,f	;volatile
  3078                           
  3079                           ;Timer.c: 175: T4CONbits.T4CKPS = 0x2;
  3080  067B  0817               	movf	23,w	;volatile
  3081  067C  39FC               	andlw	-4
  3082  067D  3802               	iorlw	2
  3083  067E  0097               	movwf	23	;volatile
  3084                           
  3085                           ;Timer.c: 177: PR4 = 0xFF;
  3086  067F  30FF               	movlw	255
  3087  0680  0096               	movwf	22	;volatile
  3088                           
  3089                           ;Timer.c: 178: Timer4OFF();
  3090  0681  3187  2709         	fcall	_Timer4OFF
  3091  0683  0008               	return
  3092  0684                     __end_of_Timer4Init:	
  3093                           
  3094                           	psect	text4
  3095  0709                     __ptext4:	
  3096 ;; *************** function _Timer4OFF *****************
  3097 ;; Defined at:
  3098 ;;		line 197 in file "Timer.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		None
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3112 ;;      Params:         0       0       0       0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    2
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_Timer4Init
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           
  3127                           ;psect for function _Timer4OFF
  3128  0709                     _Timer4OFF:	
  3129                           
  3130                           ;Timer.c: 199: T4CONbits.TMR4ON = 0;
  3131                           
  3132                           ;incstack = 0
  3133                           ; Regs used in _Timer4OFF: []
  3134  0709  0028               	movlb	8	; select bank8
  3135  070A  1117               	bcf	23,2	;volatile
  3136                           
  3137                           ;Timer.c: 200: PIR2bits.TMR4IF = 0;
  3138  070B  0020               	movlb	0	; select bank0
  3139  070C  1092               	bcf	18,1	;volatile
  3140                           
  3141                           ;Timer.c: 201: PIE2bits.TMR4IE = 0;
  3142  070D  0021               	movlb	1	; select bank1
  3143  070E  1092               	bcf	18,1	;volatile
  3144  070F  0008               	return
  3145  0710                     __end_of_Timer4OFF:	
  3146                           
  3147                           	psect	text5
  3148  05F7                     __ptext5:	
  3149 ;; *************** function _Timer2Init *****************
  3150 ;; Defined at:
  3151 ;;		line 119 in file "Timer.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;		None               void
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3165 ;;      Params:         0       0       0       0       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0
  3168 ;;      Totals:         0       0       0       0       0       0       0       0
  3169 ;;Total ram usage:        0 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    3
  3172 ;; This function calls:
  3173 ;;		_Timer2OFF
  3174 ;; This function is called by:
  3175 ;;		_init_Timers
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _Timer2Init
  3181  05F7                     _Timer2Init:	
  3182                           
  3183                           ;Timer.c: 123: T2CONbits.T2OUTPS = 0xE;
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  3187  05F7  0020               	movlb	0	; select bank0
  3188  05F8  081C               	movf	28,w	;volatile
  3189  05F9  3987               	andlw	-121
  3190  05FA  3870               	iorlw	112
  3191  05FB  009C               	movwf	28	;volatile
  3192                           
  3193                           ;Timer.c: 129: T2CONbits.T2CKPS = 0x1;
  3194  05FC  081C               	movf	28,w	;volatile
  3195  05FD  39FC               	andlw	-4
  3196  05FE  3801               	iorlw	1
  3197  05FF  009C               	movwf	28	;volatile
  3198                           
  3199                           ;Timer.c: 132: CCP2CONbits.CCP2M = 0b1010;
  3200  0600  0025               	movlb	5	; select bank5
  3201  0601  081A               	movf	26,w	;volatile
  3202  0602  39F0               	andlw	-16
  3203  0603  380A               	iorlw	10
  3204  0604  009A               	movwf	26	;volatile
  3205                           
  3206                           ;Timer.c: 133: PR2 = 0xFF;
  3207  0605  30FF               	movlw	255
  3208  0606  0020               	movlb	0	; select bank0
  3209  0607  009B               	movwf	27	;volatile
  3210                           
  3211                           ;Timer.c: 134: Timer2OFF();
  3212  0608  3187  272C         	fcall	_Timer2OFF
  3213  060A  0008               	return
  3214  060B                     __end_of_Timer2Init:	
  3215                           
  3216                           	psect	text6
  3217  072C                     __ptext6:	
  3218 ;; *************** function _Timer2OFF *****************
  3219 ;; Defined at:
  3220 ;;		line 153 in file "Timer.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;		None               void
  3227 ;; Registers used:
  3228 ;;		None
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3234 ;;      Params:         0       0       0       0       0       0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0       0
  3237 ;;      Totals:         0       0       0       0       0       0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    2
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_Timer2Init
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _Timer2OFF
  3250  072C                     _Timer2OFF:	
  3251                           
  3252                           ;Timer.c: 155: T2CONbits.TMR2ON = 0;
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _Timer2OFF: []
  3256  072C  0020               	movlb	0	; select bank0
  3257  072D  111C               	bcf	28,2	;volatile
  3258                           
  3259                           ;Timer.c: 156: PIR1bits.TMR2IF = 0;
  3260  072E  1091               	bcf	17,1	;volatile
  3261                           
  3262                           ;Timer.c: 157: PIE1bits.TMR2IE = 0;
  3263  072F  0021               	movlb	1	; select bank1
  3264  0730  1091               	bcf	17,1	;volatile
  3265  0731  0008               	return
  3266  0732                     __end_of_Timer2OFF:	
  3267                           
  3268                           	psect	text7
  3269  0710                     __ptext7:	
  3270 ;; *************** function _init_IR *****************
  3271 ;; Defined at:
  3272 ;;		line 67 in file "IR.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, pclath, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3286 ;;      Params:         0       0       0       0       0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0
  3289 ;;      Totals:         0       0       0       0       0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    4
  3293 ;; This function calls:
  3294 ;;		_Enable_IR
  3295 ;;		_Timer1Init
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _init_IR
  3303  0710                     _init_IR:	
  3304                           
  3305                           ;IR.c: 69: Enable_IR();
  3306                           
  3307                           ;incstack = 0
  3308                           ; Regs used in _init_IR: [wreg+status,2+status,0+pclath+cstack]
  3309  0710  3187  275A  3187   	fcall	_Enable_IR
  3310                           
  3311                           ;IR.c: 71: INTCONbits.IOCIE = 1;
  3312  0713  158B               	bsf	11,3	;volatile
  3313                           
  3314                           ;IR.c: 72: Timer1Init();
  3315  0714  3186  260B         	fcall	_Timer1Init
  3316  0716  0008               	return
  3317  0717                     __end_of_init_IR:	
  3318                           
  3319                           	psect	text8
  3320  060B                     __ptext8:	
  3321 ;; *************** function _Timer1Init *****************
  3322 ;; Defined at:
  3323 ;;		line 61 in file "Timer.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3337 ;;      Params:         0       0       0       0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0
  3340 ;;      Totals:         0       0       0       0       0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    3
  3344 ;; This function calls:
  3345 ;;		_Reset_Timer1
  3346 ;;		_Stop_Timer1
  3347 ;; This function is called by:
  3348 ;;		_init_Timers
  3349 ;;		_init_IR
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _Timer1Init
  3355  060B                     _Timer1Init:	
  3356                           
  3357                           ;Timer.c: 64: T1CONbits.TMR1CS = 0x0;
  3358                           
  3359                           ;incstack = 0
  3360                           ; Regs used in _Timer1Init: [wreg+status,2+status,0+pclath+cstack]
  3361  060B  303F               	movlw	-193
  3362  060C  0020               	movlb	0	; select bank0
  3363  060D  0598               	andwf	24,f	;volatile
  3364                           
  3365                           ;Timer.c: 66: T1CONbits.T1CKPS = 0x3;
  3366  060E  3030               	movlw	48
  3367  060F  0498               	iorwf	24,f	;volatile
  3368                           
  3369                           ;Timer.c: 68: CCP1CONbits.CCP1M = 0b1010;
  3370  0610  0025               	movlb	5	; select bank5
  3371  0611  0813               	movf	19,w	;volatile
  3372  0612  39F0               	andlw	-16
  3373  0613  380A               	iorlw	10
  3374  0614  0093               	movwf	19	;volatile
  3375                           
  3376                           ;Timer.c: 70: PIE1bits.TMR1IE = 0;
  3377  0615  0021               	movlb	1	; select bank1
  3378  0616  1011               	bcf	17,0	;volatile
  3379                           
  3380                           ;Timer.c: 72: Reset_Timer1();
  3381  0617  3187  2756  3186   	fcall	_Reset_Timer1
  3382                           
  3383                           ;Timer.c: 73: Stop_Timer1();
  3384  061A  3187  2762         	fcall	_Stop_Timer1
  3385  061C  0008               	return
  3386  061D                     __end_of_Timer1Init:	
  3387                           
  3388                           	psect	text9
  3389  0762                     __ptext9:	
  3390 ;; *************** function _Stop_Timer1 *****************
  3391 ;; Defined at:
  3392 ;;		line 81 in file "Timer.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;		None               void
  3399 ;; Registers used:
  3400 ;;		None
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3406 ;;      Params:         0       0       0       0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_Timer1Init
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _Stop_Timer1
  3422  0762                     _Stop_Timer1:	
  3423                           
  3424                           ;Timer.c: 84: T1CONbits.TMR1ON =0;
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _Stop_Timer1: []
  3428  0762  0020               	movlb	0	; select bank0
  3429  0763  1018               	bcf	24,0	;volatile
  3430  0764  0008               	return
  3431  0765                     __end_of_Stop_Timer1:	
  3432                           
  3433                           	psect	text10
  3434  0756                     __ptext10:	
  3435 ;; *************** function _Reset_Timer1 *****************
  3436 ;; Defined at:
  3437 ;;		line 103 in file "Timer.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;		None               void
  3444 ;; Registers used:
  3445 ;;		status,2
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3451 ;;      Params:         0       0       0       0       0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0
  3454 ;;      Totals:         0       0       0       0       0       0       0       0
  3455 ;;Total ram usage:        0 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    2
  3458 ;; This function calls:
  3459 ;;		Nothing
  3460 ;; This function is called by:
  3461 ;;		_Timer1Init
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           
  3466                           ;psect for function _Reset_Timer1
  3467  0756                     _Reset_Timer1:	
  3468                           
  3469                           ;Timer.c: 109: TMR1H = 0;
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _Reset_Timer1: [status,2]
  3473  0756  0020               	movlb	0	; select bank0
  3474  0757  0197               	clrf	23	;volatile
  3475                           
  3476                           ;Timer.c: 110: TMR1L = 0;
  3477  0758  0196               	clrf	22	;volatile
  3478  0759  0008               	return
  3479  075A                     __end_of_Reset_Timer1:	
  3480                           
  3481                           	psect	text11
  3482  075A                     __ptext11:	
  3483 ;; *************** function _Enable_IR *****************
  3484 ;; Defined at:
  3485 ;;		line 80 in file "IR.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		None
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3499 ;;      Params:         0       0       0       0       0       0       0       0
  3500 ;;      Locals:         0       0       0       0       0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0
  3502 ;;      Totals:         0       0       0       0       0       0       0       0
  3503 ;;Total ram usage:        0 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    2
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_init_IR
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _Enable_IR
  3515  075A                     _Enable_IR:	
  3516                           
  3517                           ;IR.c: 83: IOCCPbits.IOCCP4 = 1;
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in _Enable_IR: []
  3521  075A  0027               	movlb	7	; select bank7
  3522  075B  1617               	bsf	23,4	;volatile
  3523                           
  3524                           ;IR.c: 85: IOCCNbits.IOCCN4 = 1;
  3525  075C  1618               	bsf	24,4	;volatile
  3526  075D  0008               	return
  3527  075E                     __end_of_Enable_IR:	
  3528                           
  3529                           	psect	text12
  3530  05B9                     __ptext12:	
  3531 ;; *************** function _delayUS *****************
  3532 ;; Defined at:
  3533 ;;		line 50 in file "MISC.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  US              4   17[BANK0 ] long 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  i               4    0[BANK1 ] long 
  3538 ;;  j               1    4[BANK1 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;		None               void
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3548 ;;      Params:         0       4       0       0       0       0       0       0
  3549 ;;      Locals:         0       0       5       0       0       0       0       0
  3550 ;;      Temps:          0       1       0       0       0       0       0       0
  3551 ;;      Totals:         0       5       5       0       0       0       0       0
  3552 ;;Total ram usage:       10 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    2
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _delayUS
  3564  05B9                     _delayUS:	
  3565                           
  3566                           ;MISC.c: 52: long i;
  3567                           ;MISC.c: 53: unsigned char j;
  3568                           ;MISC.c: 54: for(i=0;i<US;i+=31)
  3569                           
  3570                           ;incstack = 0
  3571                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  3572  05B9  3000               	movlw	0
  3573  05BA  0021               	movlb	1	; select bank1
  3574  05BB  00AF               	movwf	(delayUS@i+3)^(0+128)
  3575  05BC  3000               	movlw	0
  3576  05BD  00AE               	movwf	(delayUS@i+2)^(0+128)
  3577  05BE  3000               	movlw	0
  3578  05BF  00AD               	movwf	(delayUS@i+1)^(0+128)
  3579  05C0  3000               	movlw	0
  3580  05C1  00AC               	movwf	delayUS@i^(0+128)
  3581  05C2                     l215:	
  3582  05C2  082F               	movf	(delayUS@i+3)^(0+128),w
  3583  05C3  3A80               	xorlw	128
  3584  05C4  0020               	movlb	0	; select bank0
  3585  05C5  00DA               	movwf	??_delayUS
  3586  05C6  0859               	movf	delayUS@US+3,w
  3587  05C7  3A80               	xorlw	128
  3588  05C8  025A               	subwf	??_delayUS,w
  3589  05C9  0021               	movlb	1	; select bank1
  3590  05CA  1D03               	skipz
  3591  05CB  2DDC               	goto	u1773
  3592  05CC  0020               	movlb	0	; select bank0
  3593  05CD  0858               	movf	delayUS@US+2,w
  3594  05CE  0021               	movlb	1	; select bank1
  3595  05CF  022E               	subwf	(delayUS@i+2)^(0+128),w
  3596  05D0  1D03               	skipz
  3597  05D1  2DDC               	goto	u1773
  3598  05D2  0020               	movlb	0	; select bank0
  3599  05D3  0857               	movf	delayUS@US+1,w
  3600  05D4  0021               	movlb	1	; select bank1
  3601  05D5  022D               	subwf	(delayUS@i+1)^(0+128),w
  3602  05D6  1D03               	skipz
  3603  05D7  2DDC               	goto	u1773
  3604  05D8  0020               	movlb	0	; select bank0
  3605  05D9  0856               	movf	delayUS@US,w
  3606  05DA  0021               	movlb	1	; select bank1
  3607  05DB  022C               	subwf	delayUS@i^(0+128),w
  3608  05DC                     u1773:	
  3609  05DC  1803               	btfsc	3,0
  3610  05DD  0008               	return
  3611                           
  3612                           ;MISC.c: 55: {
  3613                           ;MISC.c: 56: for(j=0;j<8;j++)
  3614  05DE  01B0               	clrf	delayUS@j^(0+128)
  3615  05DF  3008               	movlw	8
  3616  05E0  0230               	subwf	delayUS@j^(0+128),w
  3617  05E1  1803               	btfsc	3,0
  3618  05E2  2DEE               	goto	l2303
  3619  05E3                     l217:	
  3620                           
  3621                           ;MISC.c: 57: {
  3622                           ;MISC.c: 58: __nop();
  3623  05E3  0000               	nop
  3624  05E4  3001               	movlw	1
  3625  05E5  0020               	movlb	0	; select bank0
  3626  05E6  00DA               	movwf	??_delayUS
  3627  05E7  085A               	movf	??_delayUS,w
  3628  05E8  0021               	movlb	1	; select bank1
  3629  05E9  07B0               	addwf	delayUS@j^(0+128),f
  3630  05EA  3008               	movlw	8
  3631  05EB  0230               	subwf	delayUS@j^(0+128),w
  3632  05EC  1C03               	skipc
  3633  05ED  2DE3               	goto	l217
  3634  05EE                     l2303:	
  3635  05EE  301F               	movlw	31
  3636  05EF  07AC               	addwf	delayUS@i^(0+128),f
  3637  05F0  3000               	movlw	0
  3638  05F1  3DAD               	addwfc	(delayUS@i+1)^(0+128),f
  3639  05F2  3000               	movlw	0
  3640  05F3  3DAE               	addwfc	(delayUS@i+2)^(0+128),f
  3641  05F4  3000               	movlw	0
  3642  05F5  3DAF               	addwfc	(delayUS@i+3)^(0+128),f
  3643  05F6  2DC2               	goto	l215
  3644  05F7                     __end_of_delayUS:	
  3645                           
  3646                           	psect	text13
  3647  0521                     __ptext13:	
  3648 ;; *************** function _UseIRCode *****************
  3649 ;; Defined at:
  3650 ;;		line 282 in file "IR.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  Code            1    wreg     PTR unsigned char 
  3653 ;;		 -> IR_New_Code(1), 
  3654 ;;  NEC             4    2[BANK1 ] unsigned long 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  Code            1   21[BANK0 ] PTR unsigned char 
  3657 ;;		 -> IR_New_Code(1), 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;		None               void
  3660 ;; Registers used:
  3661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3667 ;;      Params:         0       0       4       0       0       0       0       0
  3668 ;;      Locals:         0       1       0       0       0       0       0       0
  3669 ;;      Temps:          0       0       2       0       0       0       0       0
  3670 ;;      Totals:         0       1       6       0       0       0       0       0
  3671 ;;Total ram usage:        7 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    4
  3674 ;; This function calls:
  3675 ;;		_SendRF
  3676 ;;		_Set_Timer6
  3677 ;;		_Timer6OFF
  3678 ;;		_Timer6ON
  3679 ;;		_Timer6Reset
  3680 ;; This function is called by:
  3681 ;;		_main
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           
  3686                           ;psect for function _UseIRCode
  3687  0521                     _UseIRCode:	
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _UseIRCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3691                           ;UseIRCode@Code stored from wreg
  3692  0521  0020               	movlb	0	; select bank0
  3693  0522  00DA               	movwf	UseIRCode@Code
  3694                           
  3695                           ;IR.c: 284: Timer6OFF();
  3696  0523  3187  2717  3185   	fcall	_Timer6OFF
  3697                           
  3698                           ;IR.c: 285: Timer6Reset();
  3699  0526  3187  2765  3185   	fcall	_Timer6Reset
  3700                           
  3701                           ;IR.c: 286: if(*Code == 2)
  3702  0529  0020               	movlb	0	; select bank0
  3703  052A  085A               	movf	UseIRCode@Code,w
  3704  052B  0086               	movwf	6
  3705  052C  0187               	clrf	7
  3706  052D  3002               	movlw	2
  3707  052E  0601               	xorwf	1,w
  3708  052F  1D03               	btfss	3,2
  3709  0530  2D35               	goto	l2313
  3710                           
  3711                           ;IR.c: 287: {
  3712                           ;IR.c: 288: LATC |= 0b00000100;
  3713  0531  0022               	movlb	2	; select bank2
  3714  0532  150E               	bsf	14,2	;volatile
  3715                           
  3716                           ;IR.c: 289: LEDsdone = 0;
  3717  0533  0020               	movlb	0	; select bank0
  3718  0534  01DD               	clrf	_LEDsdone	;volatile
  3719  0535                     l2313:	
  3720                           
  3721                           ;IR.c: 290: }
  3722                           ;IR.c: 291: if(NEC == 0x1CE350AF)
  3723  0535  30AF               	movlw	175
  3724  0536  0021               	movlb	1	; select bank1
  3725  0537  062E               	xorwf	UseIRCode@NEC^(0+128),w
  3726  0538  3050               	movlw	80
  3727  0539  1903               	skipnz
  3728  053A  062F               	xorwf	(UseIRCode@NEC+1)^(0+128),w
  3729  053B  30E3               	movlw	227
  3730  053C  1903               	skipnz
  3731  053D  0630               	xorwf	(UseIRCode@NEC+2)^(0+128),w
  3732  053E  301C               	movlw	28
  3733  053F  1903               	skipnz
  3734  0540  0631               	xorwf	(UseIRCode@NEC+3)^(0+128),w
  3735  0541  1D03               	btfss	3,2
  3736  0542  2D58               	goto	l478
  3737                           
  3738                           ;IR.c: 292: {
  3739                           ;IR.c: 293: LATC |= 0b00000001;
  3740  0543  0022               	movlb	2	; select bank2
  3741  0544  140E               	bsf	14,0	;volatile
  3742                           
  3743                           ;IR.c: 294: LEDsdone = 0;
  3744  0545  0020               	movlb	0	; select bank0
  3745  0546  01DD               	clrf	_LEDsdone	;volatile
  3746                           
  3747                           ;IR.c: 295: SendRF(ChannelF, 12, 10);
  3748  0547  300C               	movlw	12
  3749  0548  0021               	movlb	1	; select bank1
  3750  0549  00B2               	movwf	??_UseIRCode^(0+128)
  3751  054A  0832               	movf	??_UseIRCode^(0+128),w
  3752  054B  0020               	movlb	0	; select bank0
  3753  054C  00D6               	movwf	SendRF@size
  3754  054D  300A               	movlw	10
  3755  054E  0021               	movlb	1	; select bank1
  3756  054F  00B3               	movwf	(??_UseIRCode+1)^(0+128)
  3757  0550  0833               	movf	(??_UseIRCode+1)^(0+128),w
  3758  0551  0020               	movlb	0	; select bank0
  3759  0552  00D7               	movwf	SendRF@RepeatAmount
  3760  0553  30A0               	movlw	(low (_ChannelF| 0))& (0+255)
  3761  0554  3185  256E  3185   	fcall	_SendRF
  3762                           
  3763                           ;IR.c: 296: }
  3764  0557  2D5C               	goto	l2323
  3765  0558                     l478:	
  3766                           
  3767                           ;IR.c: 297: else
  3768                           ;IR.c: 298: {
  3769                           ;IR.c: 299: LATC |= 0b00000010;
  3770  0558  0022               	movlb	2	; select bank2
  3771  0559  148E               	bsf	14,1	;volatile
  3772                           
  3773                           ;IR.c: 300: LEDsdone = 0;
  3774  055A  0020               	movlb	0	; select bank0
  3775  055B  01DD               	clrf	_LEDsdone	;volatile
  3776  055C                     l2323:	
  3777                           ;IR.c: 301: }
  3778                           ;IR.c: 302: while(!Sent);
  3779                           
  3780  055C  0020               	movlb	0	; select bank0
  3781  055D  085E               	movf	_Sent,w	;volatile
  3782  055E  1903               	btfsc	3,2
  3783  055F  2D5C               	goto	l2323
  3784                           
  3785                           ;IR.c: 303: Set_Timer6(0xFF);
  3786  0560  30FF               	movlw	255
  3787  0561  3187  2732  3185   	fcall	_Set_Timer6
  3788                           
  3789                           ;IR.c: 304: PIR2bits.TMR6IF = 0;
  3790  0564  0020               	movlb	0	; select bank0
  3791  0565  1112               	bcf	18,2	;volatile
  3792                           
  3793                           ;IR.c: 305: Timer6ON();
  3794  0566  3187  273E         	fcall	_Timer6ON
  3795                           
  3796                           ;IR.c: 306: *Code = 0;
  3797  0568  0020               	movlb	0	; select bank0
  3798  0569  085A               	movf	UseIRCode@Code,w
  3799  056A  0086               	movwf	6
  3800  056B  0187               	clrf	7
  3801  056C  0181               	clrf	1
  3802  056D  0008               	return
  3803  056E                     __end_of_UseIRCode:	
  3804                           
  3805                           	psect	text14
  3806  0765                     __ptext14:	
  3807 ;; *************** function _Timer6Reset *****************
  3808 ;; Defined at:
  3809 ;;		line 273 in file "Timer.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;		None               void
  3816 ;; Registers used:
  3817 ;;		status,2
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3823 ;;      Params:         0       0       0       0       0       0       0       0
  3824 ;;      Locals:         0       0       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0       0
  3826 ;;      Totals:         0       0       0       0       0       0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    2
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_UseIRCode
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _Timer6Reset
  3839  0765                     _Timer6Reset:	
  3840                           
  3841                           ;Timer.c: 275: TMR6 = 0;
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _Timer6Reset: [status,2]
  3845  0765  0028               	movlb	8	; select bank8
  3846  0766  019C               	clrf	28	;volatile
  3847  0767  0008               	return
  3848  0768                     __end_of_Timer6Reset:	
  3849                           
  3850                           	psect	text15
  3851  073E                     __ptext15:	
  3852 ;; *************** function _Timer6ON *****************
  3853 ;; Defined at:
  3854 ;;		line 250 in file "Timer.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		None
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3868 ;;      Params:         0       0       0       0       0       0       0       0
  3869 ;;      Locals:         0       0       0       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0
  3871 ;;      Totals:         0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:        0 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_UseIRCode
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _Timer6ON
  3884  073E                     _Timer6ON:	
  3885                           
  3886                           ;Timer.c: 252: T6CONbits.TMR6ON = 1;
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _Timer6ON: []
  3890  073E  0028               	movlb	8	; select bank8
  3891  073F  151E               	bsf	30,2	;volatile
  3892                           
  3893                           ;Timer.c: 253: PIE2bits.TMR6IE = 1;
  3894  0740  0021               	movlb	1	; select bank1
  3895  0741  1512               	bsf	18,2	;volatile
  3896  0742  0008               	return
  3897  0743                     __end_of_Timer6ON:	
  3898                           
  3899                           	psect	text16
  3900  0717                     __ptext16:	
  3901 ;; *************** function _Timer6OFF *****************
  3902 ;; Defined at:
  3903 ;;		line 261 in file "Timer.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;		None               void
  3910 ;; Registers used:
  3911 ;;		None
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3917 ;;      Params:         0       0       0       0       0       0       0       0
  3918 ;;      Locals:         0       0       0       0       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0
  3920 ;;      Totals:         0       0       0       0       0       0       0       0
  3921 ;;Total ram usage:        0 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    2
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_Timer6Init
  3928 ;;		_UseIRCode
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function _Timer6OFF
  3934  0717                     _Timer6OFF:	
  3935                           
  3936                           ;Timer.c: 263: T6CONbits.TMR6ON = 0;
  3937                           
  3938                           ;incstack = 0
  3939                           ; Regs used in _Timer6OFF: []
  3940  0717  0028               	movlb	8	; select bank8
  3941  0718  111E               	bcf	30,2	;volatile
  3942                           
  3943                           ;Timer.c: 264: PIR2bits.TMR6IF = 0;
  3944  0719  0020               	movlb	0	; select bank0
  3945  071A  1112               	bcf	18,2	;volatile
  3946                           
  3947                           ;Timer.c: 265: PIE2bits.TMR6IE = 0;
  3948  071B  0021               	movlb	1	; select bank1
  3949  071C  1112               	bcf	18,2	;volatile
  3950  071D  0008               	return
  3951  071E                     __end_of_Timer6OFF:	
  3952                           
  3953                           	psect	text17
  3954  0732                     __ptext17:	
  3955 ;; *************** function _Set_Timer6 *****************
  3956 ;; Defined at:
  3957 ;;		line 283 in file "Timer.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  time            1    wreg     unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  time            1   17[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;		None               void
  3964 ;; Registers used:
  3965 ;;		wreg
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3971 ;;      Params:         0       0       0       0       0       0       0       0
  3972 ;;      Locals:         0       1       0       0       0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0
  3974 ;;      Totals:         0       1       0       0       0       0       0       0
  3975 ;;Total ram usage:        1 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    2
  3978 ;; This function calls:
  3979 ;;		Nothing
  3980 ;; This function is called by:
  3981 ;;		_UseIRCode
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           
  3986                           ;psect for function _Set_Timer6
  3987  0732                     _Set_Timer6:	
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _Set_Timer6: [wreg]
  3991                           ;Set_Timer6@time stored from wreg
  3992  0732  0020               	movlb	0	; select bank0
  3993  0733  00D6               	movwf	Set_Timer6@time
  3994                           
  3995                           ;Timer.c: 285: PR6 = time;
  3996  0734  0856               	movf	Set_Timer6@time,w
  3997  0735  0028               	movlb	8	; select bank8
  3998  0736  009D               	movwf	29	;volatile
  3999  0737  0008               	return
  4000  0738                     __end_of_Set_Timer6:	
  4001                           
  4002                           	psect	text18
  4003  056E                     __ptext18:	
  4004 ;; *************** function _SendRF *****************
  4005 ;; Defined at:
  4006 ;;		line 56 in file "RF.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  Code            1    wreg     PTR unsigned char 
  4009 ;;		 -> ChannelF(12), 
  4010 ;;  size            1   17[BANK0 ] unsigned char 
  4011 ;;  RepeatAmount    1   18[BANK0 ] unsigned char 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  Code            1    0[BANK1 ] PTR unsigned char 
  4014 ;;		 -> ChannelF(12), 
  4015 ;;  i               1    1[BANK1 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      unsigned char 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4025 ;;      Params:         0       2       0       0       0       0       0       0
  4026 ;;      Locals:         0       0       2       0       0       0       0       0
  4027 ;;      Temps:          0       2       0       0       0       0       0       0
  4028 ;;      Totals:         0       4       2       0       0       0       0       0
  4029 ;;Total ram usage:        6 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    3
  4032 ;; This function calls:
  4033 ;;		_Timer2ON
  4034 ;; This function is called by:
  4035 ;;		_UseIRCode
  4036 ;;		_SendRF_wait
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _SendRF
  4042  056E                     _SendRF:	
  4043                           
  4044                           ;incstack = 0
  4045                           ; Regs used in _SendRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4046                           ;SendRF@Code stored from wreg
  4047  056E  0021               	movlb	1	; select bank1
  4048  056F  00AC               	movwf	SendRF@Code^(0+128)
  4049                           
  4050                           ;RF.c: 58: unsigned char i;
  4051                           ;RF.c: 59: if(Sent == 1)
  4052  0570  0020               	movlb	0	; select bank0
  4053  0571  035E               	decf	_Sent,w	;volatile
  4054  0572  1D03               	btfss	3,2
  4055  0573  2DB7               	goto	l2259
  4056                           
  4057                           ;RF.c: 60: {
  4058                           ;RF.c: 62: Sent = 0;
  4059  0574  01DE               	clrf	_Sent	;volatile
  4060                           
  4061                           ;RF.c: 63: Sendcount = RepeatAmount;
  4062  0575  0857               	movf	SendRF@RepeatAmount,w
  4063  0576  00D8               	movwf	??_SendRF
  4064  0577  0858               	movf	??_SendRF,w
  4065  0578  00C0               	movwf	_Sendcount	;volatile
  4066                           
  4067                           ;RF.c: 64: RFsendFlag = 1;
  4068  0579  3001               	movlw	1
  4069  057A  00D8               	movwf	??_SendRF
  4070  057B  0858               	movf	??_SendRF,w
  4071  057C  00FC               	movwf	_RFsendFlag	;volatile
  4072                           
  4073                           ;RF.c: 65: RFcodeBit = 0;
  4074  057D  01FA               	clrf	_RFcodeBit
  4075                           
  4076                           ;RF.c: 66: RFcodePlace = 1;
  4077  057E  01FB               	clrf	_RFcodePlace
  4078  057F  0AFB               	incf	_RFcodePlace,f
  4079                           
  4080                           ;RF.c: 69: if(size >= 20)
  4081  0580  3014               	movlw	20
  4082  0581  0256               	subwf	SendRF@size,w
  4083  0582  1C03               	skipc
  4084  0583  2D86               	goto	l2239
  4085                           
  4086                           ;RF.c: 70: {
  4087                           ;RF.c: 71: return 0;
  4088  0584  3000               	movlw	0
  4089  0585  0008               	return
  4090  0586                     l2239:	
  4091                           
  4092                           ;RF.c: 72: }
  4093                           ;RF.c: 73: for(i=0;i<size;i++)
  4094  0586  0021               	movlb	1	; select bank1
  4095  0587  01AD               	clrf	SendRF@i^(0+128)
  4096  0588                     l2245:	
  4097  0588  0020               	movlb	0	; select bank0
  4098  0589  0856               	movf	SendRF@size,w
  4099  058A  0021               	movlb	1	; select bank1
  4100  058B  022D               	subwf	SendRF@i^(0+128),w
  4101  058C  1803               	btfsc	3,0
  4102  058D  2DA5               	goto	l2247
  4103                           
  4104                           ;RF.c: 74: {
  4105                           ;RF.c: 75: RFsendCode[i] = Code[i];
  4106  058E  082D               	movf	SendRF@i^(0+128),w
  4107  058F  072C               	addwf	SendRF@Code^(0+128),w
  4108  0590  0020               	movlb	0	; select bank0
  4109  0591  00D8               	movwf	??_SendRF
  4110  0592  0858               	movf	??_SendRF,w
  4111  0593  0086               	movwf	6
  4112  0594  0187               	clrf	7
  4113  0595  0801               	movf	1,w
  4114  0596  00D9               	movwf	??_SendRF+1
  4115  0597  0021               	movlb	1	; select bank1
  4116  0598  082D               	movf	SendRF@i^(0+128),w
  4117  0599  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4118  059A  0086               	movwf	6
  4119  059B  0187               	clrf	7
  4120  059C  0020               	movlb	0	; select bank0
  4121  059D  0859               	movf	??_SendRF+1,w
  4122  059E  0081               	movwf	1
  4123  059F  3001               	movlw	1
  4124  05A0  00D8               	movwf	??_SendRF
  4125  05A1  0858               	movf	??_SendRF,w
  4126  05A2  0021               	movlb	1	; select bank1
  4127  05A3  07AD               	addwf	SendRF@i^(0+128),f
  4128  05A4  2D88               	goto	l2245
  4129  05A5                     l2247:	
  4130                           
  4131                           ;RF.c: 76: }
  4132                           ;RF.c: 77: RFsendCode[i] = 99;
  4133  05A5  3063               	movlw	99
  4134  05A6  0020               	movlb	0	; select bank0
  4135  05A7  00D8               	movwf	??_SendRF
  4136  05A8  0021               	movlb	1	; select bank1
  4137  05A9  082D               	movf	SendRF@i^(0+128),w
  4138  05AA  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4139  05AB  0086               	movwf	6
  4140  05AC  0187               	clrf	7
  4141  05AD  0020               	movlb	0	; select bank0
  4142  05AE  0858               	movf	??_SendRF,w
  4143  05AF  0081               	movwf	1
  4144                           
  4145                           ;RF.c: 79: TMR2 = 0;
  4146  05B0  019A               	clrf	26	;volatile
  4147                           
  4148                           ;RF.c: 80: (PR2 = 240);
  4149  05B1  30F0               	movlw	240
  4150  05B2  009B               	movwf	27	;volatile
  4151                           
  4152                           ;RF.c: 81: Timer2ON();
  4153  05B3  3187  2743         	fcall	_Timer2ON
  4154                           
  4155                           ;RF.c: 82: return 1;
  4156  05B5  3001               	movlw	1
  4157  05B6  0008               	return
  4158  05B7                     l2259:	
  4159                           
  4160                           ;RF.c: 83: }
  4161                           ;RF.c: 84: return 2;
  4162  05B7  3002               	movlw	2
  4163  05B8  0008               	return
  4164  05B9                     __end_of_SendRF:	
  4165                           
  4166                           	psect	text19
  4167  0743                     __ptext19:	
  4168 ;; *************** function _Timer2ON *****************
  4169 ;; Defined at:
  4170 ;;		line 142 in file "Timer.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		None
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4184 ;;      Params:         0       0       0       0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    2
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_SendRF
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _Timer2ON
  4200  0743                     _Timer2ON:	
  4201                           
  4202                           ;Timer.c: 144: T2CONbits.TMR2ON = 1;
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _Timer2ON: []
  4206  0743  0020               	movlb	0	; select bank0
  4207  0744  151C               	bsf	28,2	;volatile
  4208                           
  4209                           ;Timer.c: 145: PIE1bits.TMR2IE = 1;
  4210  0745  0021               	movlb	1	; select bank1
  4211  0746  1491               	bsf	17,1	;volatile
  4212  0747  0008               	return
  4213  0748                     __end_of_Timer2ON:	
  4214                           
  4215                           	psect	text20
  4216  061D                     __ptext20:	
  4217 ;; *************** function _InitApp *****************
  4218 ;; Defined at:
  4219 ;;		line 55 in file "user.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;		None               void
  4226 ;; Registers used:
  4227 ;;		status,2
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4233 ;;      Params:         0       0       0       0       0       0       0       0
  4234 ;;      Locals:         0       0       0       0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0       0       0       0
  4236 ;;      Totals:         0       0       0       0       0       0       0       0
  4237 ;;Total ram usage:        0 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    2
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_main
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           
  4248                           ;psect for function _InitApp
  4249  061D                     _InitApp:	
  4250                           
  4251                           ;user.c: 57: TRISCbits.TRISC0 = 0;
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _InitApp: [status,2]
  4255  061D  0021               	movlb	1	; select bank1
  4256  061E  100E               	bcf	14,0	;volatile
  4257                           
  4258                           ;user.c: 58: TRISCbits.TRISC1 = 0;
  4259  061F  108E               	bcf	14,1	;volatile
  4260                           
  4261                           ;user.c: 59: TRISCbits.TRISC2 = 0;
  4262  0620  110E               	bcf	14,2	;volatile
  4263                           
  4264                           ;user.c: 60: TRISCbits.TRISC3 = 0;
  4265  0621  118E               	bcf	14,3	;volatile
  4266                           
  4267                           ;user.c: 62: TRISCbits.TRISC5 = 1;
  4268  0622  168E               	bsf	14,5	;volatile
  4269                           
  4270                           ;user.c: 63: TRISCbits.TRISC4 = 1;
  4271  0623  160E               	bsf	14,4	;volatile
  4272                           
  4273                           ;user.c: 64: ANSELC = 0;
  4274  0624  0023               	movlb	3	; select bank3
  4275  0625  018E               	clrf	14	;volatile
  4276                           
  4277                           ;user.c: 65: SLRCONCbits.SLRC3 = 0;
  4278  0626  0026               	movlb	6	; select bank6
  4279  0627  118E               	bcf	14,3	;volatile
  4280                           
  4281                           ;user.c: 66: LATC =0;
  4282  0628  0022               	movlb	2	; select bank2
  4283  0629  018E               	clrf	14	;volatile
  4284                           
  4285                           ;user.c: 68: VREGCONbits.VREGPM = 0;
  4286  062A  0023               	movlb	3	; select bank3
  4287  062B  1097               	bcf	23,1	;volatile
  4288                           
  4289                           ;user.c: 71: INTCONbits.PEIE = 1;
  4290  062C  170B               	bsf	11,6	;volatile
  4291                           
  4292                           ;user.c: 72: INTCONbits.GIE = 1;
  4293  062D  178B               	bsf	11,7	;volatile
  4294  062E  0008               	return
  4295  062F                     __end_of_InitApp:	
  4296                           
  4297                           	psect	text21
  4298  062F                     __ptext21:	
  4299 ;; *************** function _ConfigureOscillator *****************
  4300 ;; Defined at:
  4301 ;;		line 48 in file "system.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4315 ;;      Params:         0       0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    2
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _ConfigureOscillator
  4331  062F                     _ConfigureOscillator:	
  4332                           
  4333                           ;system.c: 50: OSCCONbits.IRCF = 0xE;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4337  062F  0021               	movlb	1	; select bank1
  4338  0630  0819               	movf	25,w	;volatile
  4339  0631  3987               	andlw	-121
  4340  0632  3870               	iorlw	112
  4341  0633  0099               	movwf	25	;volatile
  4342                           
  4343                           ;system.c: 56: OSCCONbits.SPLLEN = 0;
  4344  0634  1399               	bcf	25,7	;volatile
  4345  0635                     l2269:	
  4346                           ;system.c: 59: while(!(OSCSTAT & HFIOFS));
  4347                           
  4348  0635  3000               	movlw	0
  4349  0636  181A               	btfsc	26,0	;volatile
  4350  0637  3001               	movlw	1
  4351  0638  051A               	andwf	26,w	;volatile
  4352  0639  1D03               	btfss	3,2
  4353  063A  0008               	return
  4354  063B  2E35               	goto	l2269
  4355  063C                     __end_of_ConfigureOscillator:	
  4356                           
  4357                           	psect	intentry
  4358  0004                     __pintentry:	
  4359 ;; *************** function _isr *****************
  4360 ;; Defined at:
  4361 ;;		line 60 in file "interrupts.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4375 ;;      Params:         0       0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0
  4377 ;;      Temps:          0       9       0       0       0       0       0       0
  4378 ;;      Totals:         0       9       0       0       0       0       0       0
  4379 ;;Total ram usage:        9 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    1
  4382 ;; This function calls:
  4383 ;;		_IRrawToNEC
  4384 ;;		_Set_Timer4
  4385 ;;		_Start_Timer1
  4386 ;;		_Timer4ON
  4387 ;;		_Timer4Reset
  4388 ;;		i1_Reset_Timer1
  4389 ;;		i1_Stop_Timer1
  4390 ;;		i1_Timer2OFF
  4391 ;;		i1_Timer4OFF
  4392 ;;		i1_Timer6OFF
  4393 ;; This function is called by:
  4394 ;;		Interrupt level 1
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398  0004                     _isr:	
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4402  0004  3180               	pagesel	$
  4403  0005  0020               	movlb	0	; select bank0
  4404  0006  087F               	movf	127,w
  4405  0007  00D5               	movwf	??_isr+8
  4406                           
  4407                           ;interrupts.c: 64: INTCONbits.GIE = 0;
  4408  0008  138B               	bcf	11,7	;volatile
  4409                           
  4410                           ;interrupts.c: 65: if(PIR1bits.TMR2IF)
  4411  0009  1C91               	btfss	17,1	;volatile
  4412  000A  28C8               	goto	i1l81
  4413                           
  4414                           ;interrupts.c: 66: {
  4415                           ;interrupts.c: 69: PIE1bits.TMR2IE = 0;
  4416  000B  0021               	movlb	1	; select bank1
  4417  000C  1091               	bcf	17,1	;volatile
  4418                           
  4419                           ;interrupts.c: 71: if(RFsendCode[RFcodeBit] != 99)
  4420  000D  087A               	movf	_RFcodeBit,w
  4421  000E  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4422  000F  0086               	movwf	6
  4423  0010  0187               	clrf	7
  4424  0011  3063               	movlw	99
  4425  0012  0601               	xorwf	1,w
  4426  0013  1903               	btfsc	3,2
  4427  0014  2886               	goto	i1l1989
  4428                           
  4429                           ;interrupts.c: 72: {
  4430                           ;interrupts.c: 74: if(RFsendFlag)
  4431  0015  087C               	movf	_RFsendFlag,w	;volatile
  4432  0016  1903               	btfsc	3,2
  4433  0017  28C0               	goto	i1l2029
  4434                           
  4435                           ;interrupts.c: 75: {
  4436                           ;interrupts.c: 76: if(RFsendCode[RFcodeBit] == 0)
  4437  0018  087A               	movf	_RFcodeBit,w
  4438  0019  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4439  001A  0086               	movwf	6
  4440  001B  0187               	clrf	7
  4441  001C  0801               	movf	1,w
  4442  001D  1D03               	btfss	3,2
  4443  001E  283E               	goto	i1l1907
  4444                           
  4445                           ;interrupts.c: 77: {
  4446                           ;interrupts.c: 78: if(RFcodePlace == 1)
  4447  001F  037B               	decf	_RFcodePlace,w
  4448  0020  1903               	btfsc	3,2
  4449  0021  2889               	goto	L6
  4450                           
  4451                           ;interrupts.c: 85: else if(RFcodePlace == 2)
  4452                           
  4453                           ;interrupts.c: 84: }
  4454                           
  4455                           ;interrupts.c: 83: TMR2 = 0;
  4456                           
  4457                           ;interrupts.c: 82: RFcodePlace++;
  4458                           
  4459                           ;interrupts.c: 81: (PR2 = 8);
  4460                           
  4461                           ;interrupts.c: 79: {
  4462                           ;interrupts.c: 80: (LATC |= 0b00001000);
  4463  0022  3002               	movlw	2
  4464  0023  067B               	xorwf	_RFcodePlace,w
  4465  0024  1903               	btfsc	3,2
  4466  0025  285A               	goto	L4
  4467                           
  4468                           ;interrupts.c: 91: else if(RFcodePlace == 3)
  4469                           
  4470                           ;interrupts.c: 90: }
  4471                           
  4472                           ;interrupts.c: 89: RFcodePlace++;
  4473                           
  4474                           ;interrupts.c: 88: (PR2 = 24);
  4475                           
  4476                           ;interrupts.c: 86: {
  4477                           ;interrupts.c: 87: (LATC &= ~0b00001000);
  4478  0026  3003               	movlw	3
  4479  0027  067B               	xorwf	_RFcodePlace,w
  4480  0028  1903               	btfsc	3,2
  4481  0029  2889               	goto	L6
  4482                           
  4483                           ;interrupts.c: 98: else if(RFcodePlace == 4)
  4484                           
  4485                           ;interrupts.c: 97: }
  4486                           
  4487                           ;interrupts.c: 96: TMR2 = 0;
  4488                           
  4489                           ;interrupts.c: 95: RFcodePlace++;
  4490                           
  4491                           ;interrupts.c: 94: (PR2 = 8);
  4492                           
  4493                           ;interrupts.c: 92: {
  4494                           ;interrupts.c: 93: (LATC |= 0b00001000);
  4495  002A  3004               	movlw	4
  4496  002B  067B               	xorwf	_RFcodePlace,w
  4497  002C  1D03               	btfss	3,2
  4498  002D  2883               	goto	i1l110
  4499                           
  4500                           ;interrupts.c: 99: {
  4501                           ;interrupts.c: 100: (LATC &= ~0b00001000);
  4502  002E  30F7               	movlw	247
  4503  002F  0020               	movlb	0	; select bank0
  4504  0030  00CD               	movwf	??_isr
  4505  0031  084D               	movf	??_isr,w
  4506  0032  0022               	movlb	2	; select bank2
  4507  0033  058E               	andwf	14,f	;volatile
  4508                           
  4509                           ;interrupts.c: 101: (PR2 = 24);
  4510  0034  3018               	movlw	24
  4511  0035  0020               	movlb	0	; select bank0
  4512  0036  009B               	movwf	27	;volatile
  4513                           
  4514                           ;interrupts.c: 102: RFcodePlace = 1;
  4515  0037  01FB               	clrf	_RFcodePlace
  4516  0038  0AFB               	incf	_RFcodePlace,f
  4517                           
  4518                           ;interrupts.c: 103: RFcodeBit++;
  4519  0039  3001               	movlw	1
  4520  003A  00CD               	movwf	??_isr
  4521  003B  084D               	movf	??_isr,w
  4522  003C  07FA               	addwf	_RFcodeBit,f
  4523                           
  4524                           ;interrupts.c: 104: }
  4525  003D  28C0               	goto	i1l2029
  4526  003E                     i1l1907:	
  4527                           ;interrupts.c: 110: }
  4528                           ;interrupts.c: 111: }
  4529                           
  4530                           ;interrupts.c: 109: RFsendFlag = 0;
  4531                           
  4532                           ;interrupts.c: 105: else
  4533                           ;interrupts.c: 106: {
  4534                           ;interrupts.c: 108: RFcodePlace = 1;
  4535                           
  4536                           
  4537                           ;interrupts.c: 112: else if(RFsendCode[RFcodeBit] == 1)
  4538  003E  087A               	movf	_RFcodeBit,w
  4539  003F  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4540  0040  0086               	movwf	6
  4541  0041  0187               	clrf	7
  4542  0042  0301               	decf	1,w
  4543  0043  1D03               	btfss	3,2
  4544  0044  2853               	goto	i1l1949
  4545                           
  4546                           ;interrupts.c: 113: {
  4547                           ;interrupts.c: 114: if(RFcodePlace == 1)
  4548  0045  037B               	decf	_RFcodePlace,w
  4549  0046  1903               	btfsc	3,2
  4550  0047  2865               	goto	L1
  4551                           
  4552                           ;interrupts.c: 120: else if(RFcodePlace == 2)
  4553                           
  4554                           ;interrupts.c: 119: }
  4555                           
  4556                           ;interrupts.c: 118: RFcodePlace++;
  4557                           
  4558                           ;interrupts.c: 117: (PR2 = 24);
  4559                           
  4560                           ;interrupts.c: 115: {
  4561                           ;interrupts.c: 116: (LATC |= 0b00001000);
  4562  0048  3002               	movlw	2
  4563  0049  067B               	xorwf	_RFcodePlace,w
  4564  004A  1D03               	btfss	3,2
  4565  004B  2861               	goto	i1l1967
  4566                           
  4567                           ;interrupts.c: 121: {
  4568                           ;interrupts.c: 122: (LATC &= ~0b00001000);
  4569  004C  30F7               	movlw	247
  4570  004D  0020               	movlb	0	; select bank0
  4571  004E  00CD               	movwf	??_isr
  4572  004F  084D               	movf	??_isr,w
  4573  0050  0022               	movlb	2	; select bank2
  4574  0051  058E               	andwf	14,f	;volatile
  4575  0052  288B               	goto	L3
  4576  0053                     i1l1949:	
  4577                           ;interrupts.c: 146: }
  4578                           ;interrupts.c: 147: }
  4579                           
  4580                           ;interrupts.c: 145: RFsendFlag = 0;
  4581                           
  4582                           ;interrupts.c: 141: else
  4583                           ;interrupts.c: 142: {
  4584                           ;interrupts.c: 144: RFcodePlace = 1;
  4585                           
  4586                           ;interrupts.c: 140: }
  4587                           
  4588                           ;interrupts.c: 139: TMR2 = 0;
  4589                           
  4590                           ;interrupts.c: 138: RFcodeBit++;
  4591                           
  4592                           ;interrupts.c: 137: RFcodePlace = 1;
  4593                           
  4594                           ;interrupts.c: 136: (PR2 = 8);
  4595                           
  4596                           ;interrupts.c: 134: {
  4597                           ;interrupts.c: 135: (LATC &= ~0b00001000);
  4598                           
  4599                           ;interrupts.c: 133: else if(RFcodePlace == 4)
  4600                           
  4601                           ;interrupts.c: 132: }
  4602                           
  4603                           ;interrupts.c: 131: RFcodePlace++;
  4604                           
  4605                           ;interrupts.c: 130: (PR2 = 24);
  4606                           
  4607                           ;interrupts.c: 128: {
  4608                           ;interrupts.c: 129: (LATC |= 0b00001000);
  4609                           
  4610                           ;interrupts.c: 127: else if(RFcodePlace == 3)
  4611                           
  4612                           ;interrupts.c: 126: }
  4613                           
  4614                           ;interrupts.c: 125: TMR2 = 0;
  4615                           
  4616                           ;interrupts.c: 124: RFcodePlace++;
  4617                           
  4618                           ;interrupts.c: 123: (PR2 = 8);
  4619                           
  4620                           
  4621                           ;interrupts.c: 148: else
  4622                           ;interrupts.c: 149: {
  4623                           ;interrupts.c: 151: if(RFcodePlace == 1)
  4624  0053  037B               	decf	_RFcodePlace,w
  4625  0054  1903               	btfsc	3,2
  4626  0055  2889               	goto	L6
  4627                           
  4628                           ;interrupts.c: 158: else if(RFcodePlace == 2)
  4629                           
  4630                           ;interrupts.c: 157: }
  4631                           
  4632                           ;interrupts.c: 156: TMR2 = 0;
  4633                           
  4634                           ;interrupts.c: 155: RFcodePlace++;
  4635                           
  4636                           ;interrupts.c: 154: (PR2 = 8);
  4637                           
  4638                           ;interrupts.c: 152: {
  4639                           ;interrupts.c: 153: (LATC |= 0b00001000);
  4640  0056  3002               	movlw	2
  4641  0057  067B               	xorwf	_RFcodePlace,w
  4642  0058  1D03               	btfss	3,2
  4643  0059  2861               	goto	i1l1967
  4644  005A                     L4:	
  4645                           
  4646                           ;interrupts.c: 159: {
  4647                           ;interrupts.c: 160: (LATC &= ~0b00001000);
  4648  005A  30F7               	movlw	247
  4649  005B  0020               	movlb	0	; select bank0
  4650  005C  00CD               	movwf	??_isr
  4651  005D  084D               	movf	??_isr,w
  4652  005E  0022               	movlb	2	; select bank2
  4653  005F  058E               	andwf	14,f	;volatile
  4654  0060  2867               	goto	L2
  4655  0061                     i1l1967:	
  4656                           ;interrupts.c: 163: }
  4657                           
  4658                           ;interrupts.c: 162: RFcodePlace++;
  4659                           
  4660                           ;interrupts.c: 161: (PR2 = 24);
  4661                           
  4662                           
  4663                           ;interrupts.c: 164: else if(RFcodePlace == 3)
  4664  0061  3003               	movlw	3
  4665  0062  067B               	xorwf	_RFcodePlace,w
  4666  0063  1D03               	btfss	3,2
  4667  0064  286F               	goto	i1l1975
  4668  0065                     L1:	
  4669                           
  4670                           ;interrupts.c: 165: {
  4671                           ;interrupts.c: 166: (LATC |= 0b00001000);
  4672  0065  0022               	movlb	2	; select bank2
  4673  0066  158E               	bsf	14,3	;volatile
  4674  0067                     L2:	
  4675                           
  4676                           ;interrupts.c: 167: (PR2 = 24);
  4677  0067  3018               	movlw	24
  4678  0068  0020               	movlb	0	; select bank0
  4679  0069  009B               	movwf	27	;volatile
  4680                           
  4681                           ;interrupts.c: 168: RFcodePlace++;
  4682  006A  3001               	movlw	1
  4683  006B  00CD               	movwf	??_isr
  4684  006C  084D               	movf	??_isr,w
  4685  006D  07FB               	addwf	_RFcodePlace,f
  4686                           
  4687                           ;interrupts.c: 169: }
  4688  006E  28C0               	goto	i1l2029
  4689  006F                     i1l1975:	
  4690                           
  4691                           ;interrupts.c: 170: else if(RFcodePlace == 4)
  4692  006F  3004               	movlw	4
  4693  0070  067B               	xorwf	_RFcodePlace,w
  4694  0071  1D03               	btfss	3,2
  4695  0072  2883               	goto	i1l110
  4696                           
  4697                           ;interrupts.c: 171: {
  4698                           ;interrupts.c: 172: (LATC &= ~0b00001000);
  4699  0073  30F7               	movlw	247
  4700  0074  0020               	movlb	0	; select bank0
  4701  0075  00CD               	movwf	??_isr
  4702  0076  084D               	movf	??_isr,w
  4703  0077  0022               	movlb	2	; select bank2
  4704  0078  058E               	andwf	14,f	;volatile
  4705                           
  4706                           ;interrupts.c: 173: (PR2 = 8);
  4707  0079  3008               	movlw	8
  4708  007A  0020               	movlb	0	; select bank0
  4709  007B  009B               	movwf	27	;volatile
  4710                           
  4711                           ;interrupts.c: 174: RFcodePlace = 1;
  4712  007C  01FB               	clrf	_RFcodePlace
  4713  007D  0AFB               	incf	_RFcodePlace,f
  4714                           
  4715                           ;interrupts.c: 175: RFcodeBit++;
  4716  007E  3001               	movlw	1
  4717  007F  00CD               	movwf	??_isr
  4718  0080  084D               	movf	??_isr,w
  4719  0081  07FA               	addwf	_RFcodeBit,f
  4720  0082  2892               	goto	i1l1997
  4721  0083                     i1l110:	
  4722                           ;interrupts.c: 177: }
  4723                           
  4724                           ;interrupts.c: 176: TMR2 = 0;
  4725                           
  4726                           
  4727                           ;interrupts.c: 178: else
  4728                           ;interrupts.c: 179: {
  4729                           ;interrupts.c: 181: RFcodePlace = 1;
  4730  0083  01FB               	clrf	_RFcodePlace
  4731  0084  0AFB               	incf	_RFcodePlace,f
  4732  0085  28BF               	goto	i1l2027
  4733  0086                     i1l1989:	
  4734                           ;interrupts.c: 183: }
  4735                           ;interrupts.c: 184: }
  4736                           ;interrupts.c: 185: }
  4737                           ;interrupts.c: 186: }
  4738                           
  4739                           ;interrupts.c: 182: RFsendFlag = 0;
  4740                           
  4741                           
  4742                           ;interrupts.c: 187: else
  4743                           ;interrupts.c: 188: {
  4744                           ;interrupts.c: 190: if(RFcodePlace == 1)
  4745  0086  037B               	decf	_RFcodePlace,w
  4746  0087  1D03               	btfss	3,2
  4747  0088  2894               	goto	i1l1999
  4748  0089                     L6:	
  4749                           
  4750                           ;interrupts.c: 191: {
  4751                           ;interrupts.c: 192: (LATC |= 0b00001000);
  4752  0089  0022               	movlb	2	; select bank2
  4753  008A  158E               	bsf	14,3	;volatile
  4754  008B                     L3:	
  4755                           
  4756                           ;interrupts.c: 193: (PR2 = 8);
  4757  008B  3008               	movlw	8
  4758  008C  0020               	movlb	0	; select bank0
  4759  008D  009B               	movwf	27	;volatile
  4760                           
  4761                           ;interrupts.c: 194: RFcodePlace++;
  4762  008E  3001               	movlw	1
  4763  008F  00CD               	movwf	??_isr
  4764  0090  084D               	movf	??_isr,w
  4765  0091  07FB               	addwf	_RFcodePlace,f
  4766  0092                     i1l1997:	
  4767                           
  4768                           ;interrupts.c: 195: TMR2 = 0;
  4769  0092  019A               	clrf	26	;volatile
  4770                           
  4771                           ;interrupts.c: 196: }
  4772  0093  28C0               	goto	i1l2029
  4773  0094                     i1l1999:	
  4774                           
  4775                           ;interrupts.c: 197: else if( RFcodePlace == 2)
  4776  0094  3002               	movlw	2
  4777  0095  067B               	xorwf	_RFcodePlace,w
  4778  0096  1D03               	btfss	3,2
  4779  0097  28AE               	goto	i1l2015
  4780                           
  4781                           ;interrupts.c: 198: {
  4782                           ;interrupts.c: 199: (LATC &= ~0b00001000);
  4783  0098  30F7               	movlw	247
  4784  0099  0020               	movlb	0	; select bank0
  4785  009A  00CD               	movwf	??_isr
  4786  009B  084D               	movf	??_isr,w
  4787  009C  0022               	movlb	2	; select bank2
  4788  009D  058E               	andwf	14,f	;volatile
  4789                           
  4790                           ;interrupts.c: 200: (PR2 = 240);
  4791  009E  30F0               	movlw	240
  4792  009F  0020               	movlb	0	; select bank0
  4793  00A0  009B               	movwf	27	;volatile
  4794                           
  4795                           ;interrupts.c: 201: RFcodePlace++;
  4796  00A1  3001               	movlw	1
  4797  00A2  00CD               	movwf	??_isr
  4798  00A3  084D               	movf	??_isr,w
  4799  00A4  07FB               	addwf	_RFcodePlace,f
  4800                           
  4801                           ;interrupts.c: 202: Sendcount--;
  4802  00A5  3001               	movlw	1
  4803  00A6  02C0               	subwf	_Sendcount,f	;volatile
  4804                           
  4805                           ;interrupts.c: 203: if(Sendcount)
  4806  00A7  0840               	movf	_Sendcount,w	;volatile
  4807  00A8  1903               	btfsc	3,2
  4808  00A9  28C0               	goto	i1l2029
  4809                           
  4810                           ;interrupts.c: 204: {
  4811                           ;interrupts.c: 206: RFcodePlace = 1;
  4812  00AA  01FB               	clrf	_RFcodePlace
  4813  00AB  0AFB               	incf	_RFcodePlace,f
  4814                           
  4815                           ;interrupts.c: 207: RFcodeBit = 0;
  4816  00AC  01FA               	clrf	_RFcodeBit
  4817                           
  4818                           ;interrupts.c: 208: }
  4819                           ;interrupts.c: 209: }
  4820  00AD  28C0               	goto	i1l2029
  4821  00AE                     i1l2015:	
  4822                           
  4823                           ;interrupts.c: 210: else
  4824                           ;interrupts.c: 211: {
  4825                           ;interrupts.c: 213: Timer4Reset();
  4826  00AE  3187  276B  3180   	fcall	_Timer4Reset
  4827                           
  4828                           ;interrupts.c: 214: PIR2bits.TMR4IF = 0;
  4829  00B1  0020               	movlb	0	; select bank0
  4830  00B2  1092               	bcf	18,1	;volatile
  4831                           
  4832                           ;interrupts.c: 215: TMR4_overflow = 0;
  4833  00B3  01BC               	clrf	_TMR4_overflow	;volatile
  4834  00B4  01BD               	clrf	_TMR4_overflow+1	;volatile
  4835                           
  4836                           ;interrupts.c: 216: Set_Timer4(0xFF);
  4837  00B5  30FF               	movlw	255
  4838  00B6  3187  274D  3180   	fcall	_Set_Timer4
  4839                           
  4840                           ;interrupts.c: 217: Timer4ON();
  4841  00B9  3187  2748  3180   	fcall	_Timer4ON
  4842                           
  4843                           ;interrupts.c: 218: Timer2OFF();
  4844  00BC  3187  2738  3180   	fcall	i1_Timer2OFF
  4845  00BF                     i1l2027:	
  4846                           
  4847                           ;interrupts.c: 219: RFsendFlag = 0;
  4848  00BF  01FC               	clrf	_RFsendFlag	;volatile
  4849  00C0                     i1l2029:	
  4850                           
  4851                           ;interrupts.c: 220: }
  4852                           ;interrupts.c: 221: }
  4853                           ;interrupts.c: 222: PIR1bits.TMR2IF = 0;
  4854  00C0  0020               	movlb	0	; select bank0
  4855  00C1  1091               	bcf	17,1	;volatile
  4856                           
  4857                           ;interrupts.c: 223: if(RFsendFlag)
  4858  00C2  087C               	movf	_RFsendFlag,w	;volatile
  4859  00C3  1903               	btfsc	3,2
  4860  00C4  29DF               	goto	i1l119
  4861                           
  4862                           ;interrupts.c: 224: {
  4863                           ;interrupts.c: 226: PIE1bits.TMR2IE = 1;
  4864  00C5  0021               	movlb	1	; select bank1
  4865  00C6  1491               	bsf	17,1	;volatile
  4866                           
  4867                           ;interrupts.c: 227: }
  4868                           ;interrupts.c: 228: }
  4869  00C7  29DF               	goto	i1l119
  4870  00C8                     i1l81:	
  4871                           
  4872                           ;interrupts.c: 229: else if(PIR1bits.TMR1IF)
  4873  00C8  1C11               	btfss	17,0	;volatile
  4874  00C9  28DF               	goto	i1l120
  4875                           
  4876                           ;interrupts.c: 230: {
  4877                           ;interrupts.c: 232: PIE1bits.TMR1IE = 0;
  4878  00CA  0021               	movlb	1	; select bank1
  4879  00CB  1011               	bcf	17,0	;volatile
  4880                           
  4881                           ;interrupts.c: 233: Reset_Timer1();
  4882  00CC  3187  275E  3180   	fcall	i1_Reset_Timer1
  4883                           
  4884                           ;interrupts.c: 250: Stop_Timer1();
  4885  00CF  3187  2768  3180   	fcall	i1_Stop_Timer1
  4886                           
  4887                           ;interrupts.c: 251: IR_New_Code = 0;
  4888  00D2  01FD               	clrf	_IR_New_Code
  4889                           
  4890                           ;interrupts.c: 252: IR_NEC = 0;
  4891  00D3  3000               	movlw	0
  4892  00D4  0020               	movlb	0	; select bank0
  4893  00D5  00C4               	movwf	_IR_NEC+3
  4894  00D6  3000               	movlw	0
  4895  00D7  00C3               	movwf	_IR_NEC+2
  4896  00D8  3000               	movlw	0
  4897  00D9  00C2               	movwf	_IR_NEC+1
  4898  00DA  3000               	movlw	0
  4899  00DB  00C1               	movwf	_IR_NEC
  4900                           
  4901                           ;interrupts.c: 253: IRrawCodeNum = 0;
  4902  00DC  01F9               	clrf	_IRrawCodeNum
  4903                           
  4904                           ;interrupts.c: 255: PIR1bits.TMR1IF = 0;
  4905  00DD  1011               	bcf	17,0	;volatile
  4906                           
  4907                           ;interrupts.c: 256: }
  4908  00DE  29DF               	goto	i1l119
  4909  00DF                     i1l120:	
  4910                           
  4911                           ;interrupts.c: 257: else if(IOCCFbits.IOCCF4)
  4912  00DF  0027               	movlb	7	; select bank7
  4913  00E0  1E19               	btfss	25,4	;volatile
  4914  00E1  29AE               	goto	i1l122
  4915                           
  4916                           ;interrupts.c: 258: {
  4917                           ;interrupts.c: 261: IOCCPbits.IOCCP4 = 0;
  4918  00E2  1217               	bcf	23,4	;volatile
  4919                           
  4920                           ;interrupts.c: 263: IOCCNbits.IOCCN4 = 0;
  4921  00E3  1218               	bcf	24,4	;volatile
  4922                           
  4923                           ;interrupts.c: 265: IRrawCount = TMR1L;
  4924  00E4  0020               	movlb	0	; select bank0
  4925  00E5  0816               	movf	22,w	;volatile
  4926  00E6  00CD               	movwf	??_isr
  4927  00E7  01CE               	clrf	??_isr+1
  4928  00E8  084D               	movf	??_isr,w
  4929  00E9  00B8               	movwf	_IRrawCount
  4930  00EA  084E               	movf	??_isr+1,w
  4931  00EB  00B9               	movwf	_IRrawCount+1
  4932                           
  4933                           ;interrupts.c: 266: IRrawCount += ((unsigned int)TMR1H << 8);
  4934  00EC  0817               	movf	23,w	;volatile
  4935  00ED  00CD               	movwf	??_isr
  4936  00EE  01CE               	clrf	??_isr+1
  4937  00EF  084D               	movf	??_isr,w
  4938  00F0  00CE               	movwf	??_isr+1
  4939  00F1  01CD               	clrf	??_isr
  4940  00F2  084D               	movf	??_isr,w
  4941  00F3  07B8               	addwf	_IRrawCount,f
  4942  00F4  084E               	movf	??_isr+1,w
  4943  00F5  3DB9               	addwfc	_IRrawCount+1,f
  4944                           
  4945                           ;interrupts.c: 268: Stop_Timer1();
  4946  00F6  3187  2768  3180   	fcall	i1_Stop_Timer1
  4947                           
  4948                           ;interrupts.c: 269: Reset_Timer1();
  4949  00F9  3187  275E  3180   	fcall	i1_Reset_Timer1
  4950                           
  4951                           ;interrupts.c: 270: PIR1bits.TMR1IF = 0;
  4952  00FC  0020               	movlb	0	; select bank0
  4953  00FD  1011               	bcf	17,0	;volatile
  4954                           
  4955                           ;interrupts.c: 271: Start_Timer1();
  4956  00FE  3187  276E  3180   	fcall	_Start_Timer1
  4957                           
  4958                           ;interrupts.c: 272: PIE1bits.TMR1IE = 1;
  4959  0101  0021               	movlb	1	; select bank1
  4960  0102  1411               	bsf	17,0	;volatile
  4961                           
  4962                           ;interrupts.c: 273: if(IRrawCodeNum < 72)
  4963  0103  3048               	movlw	72
  4964  0104  0279               	subwf	_IRrawCodeNum,w
  4965  0105  1803               	skipnc
  4966  0106  2980               	goto	i1l2083
  4967                           
  4968                           ;interrupts.c: 274: {
  4969                           ;interrupts.c: 276: if(IRrawCodeNum != 0)
  4970  0107  0879               	movf	_IRrawCodeNum,w
  4971  0108  1903               	btfsc	3,2
  4972  0109  2972               	goto	i1l2075
  4973                           
  4974                           ;interrupts.c: 277: {
  4975                           ;interrupts.c: 289: IRRawCode[IRrawCodeNum - 1] = IRrawCount;
  4976  010A  0879               	movf	_IRrawCodeNum,w
  4977  010B  0020               	movlb	0	; select bank0
  4978  010C  00CD               	movwf	??_isr
  4979  010D  01CE               	clrf	??_isr+1
  4980  010E  35CD               	lslf	??_isr,f
  4981  010F  0DCE               	rlf	??_isr+1,f
  4982  0110  084D               	movf	??_isr,w
  4983  0111  3EFE               	addlw	254
  4984  0112  00CF               	movwf	??_isr+2
  4985  0113  30FF               	movlw	255
  4986  0114  3D4E               	addwfc	??_isr+1,w
  4987  0115  00D0               	movwf	??_isr+3
  4988  0116  3060               	movlw	96
  4989  0117  00D1               	movwf	??_isr+4
  4990  0118  3021               	movlw	33
  4991  0119  00D2               	movwf	??_isr+5
  4992  011A  084F               	movf	??_isr+2,w
  4993  011B  0751               	addwf	??_isr+4,w
  4994  011C  0086               	movwf	6
  4995  011D  0850               	movf	??_isr+3,w
  4996  011E  3D52               	addwfc	??_isr+5,w
  4997  011F  0087               	movwf	7
  4998  0120  0838               	movf	_IRrawCount,w
  4999  0121  3FC0               	movwi [0]fsr1
  5000  0122  0839               	movf	_IRrawCount+1,w
  5001  0123  3FC1               	movwi [1]fsr1
  5002                           
  5003                           ;interrupts.c: 291: if( IRRawCode[IRrawCodeNum - 1] >= 22500 && IRRawCode[IRrawCodeNum -
      +                           1] <= 25000 )
  5004  0124  0879               	movf	_IRrawCodeNum,w
  5005  0125  00CD               	movwf	??_isr
  5006  0126  01CE               	clrf	??_isr+1
  5007  0127  35CD               	lslf	??_isr,f
  5008  0128  0DCE               	rlf	??_isr+1,f
  5009  0129  084D               	movf	??_isr,w
  5010  012A  3EFE               	addlw	254
  5011  012B  00CF               	movwf	??_isr+2
  5012  012C  30FF               	movlw	255
  5013  012D  3D4E               	addwfc	??_isr+1,w
  5014  012E  00D0               	movwf	??_isr+3
  5015  012F  3060               	movlw	96
  5016  0130  00D1               	movwf	??_isr+4
  5017  0131  3021               	movlw	33
  5018  0132  00D2               	movwf	??_isr+5
  5019  0133  084F               	movf	??_isr+2,w
  5020  0134  0751               	addwf	??_isr+4,w
  5021  0135  0086               	movwf	6
  5022  0136  0850               	movf	??_isr+3,w
  5023  0137  3D52               	addwfc	??_isr+5,w
  5024  0138  0087               	movwf	7
  5025  0139  3F40               	moviw [0]fsr1
  5026  013A  00D3               	movwf	??_isr+6
  5027  013B  3F41               	moviw [1]fsr1
  5028  013C  00D4               	movwf	??_isr+7
  5029  013D  3057               	movlw	87
  5030  013E  0254               	subwf	??_isr+7,w
  5031  013F  30E4               	movlw	228
  5032  0140  1903               	skipnz
  5033  0141  0253               	subwf	??_isr+6,w
  5034  0142  1C03               	skipc
  5035  0143  297B               	goto	i1l2081
  5036  0144  0879               	movf	_IRrawCodeNum,w
  5037  0145  00CD               	movwf	??_isr
  5038  0146  01CE               	clrf	??_isr+1
  5039  0147  35CD               	lslf	??_isr,f
  5040  0148  0DCE               	rlf	??_isr+1,f
  5041  0149  084D               	movf	??_isr,w
  5042  014A  3EFE               	addlw	254
  5043  014B  00CF               	movwf	??_isr+2
  5044  014C  30FF               	movlw	255
  5045  014D  3D4E               	addwfc	??_isr+1,w
  5046  014E  00D0               	movwf	??_isr+3
  5047  014F  3060               	movlw	96
  5048  0150  00D1               	movwf	??_isr+4
  5049  0151  3021               	movlw	33
  5050  0152  00D2               	movwf	??_isr+5
  5051  0153  084F               	movf	??_isr+2,w
  5052  0154  0751               	addwf	??_isr+4,w
  5053  0155  0086               	movwf	6
  5054  0156  0850               	movf	??_isr+3,w
  5055  0157  3D52               	addwfc	??_isr+5,w
  5056  0158  0087               	movwf	7
  5057  0159  3F40               	moviw [0]fsr1
  5058  015A  00D3               	movwf	??_isr+6
  5059  015B  3F41               	moviw [1]fsr1
  5060  015C  00D4               	movwf	??_isr+7
  5061  015D  3061               	movlw	97
  5062  015E  0254               	subwf	??_isr+7,w
  5063  015F  30A9               	movlw	169
  5064  0160  1903               	skipnz
  5065  0161  0253               	subwf	??_isr+6,w
  5066  0162  1803               	skipnc
  5067  0163  297B               	goto	i1l2081
  5068                           
  5069                           ;interrupts.c: 292: {
  5070                           ;interrupts.c: 294: IR_New_Code = 2;
  5071  0164  3002               	movlw	2
  5072  0165  00CD               	movwf	??_isr
  5073  0166  084D               	movf	??_isr,w
  5074  0167  00FD               	movwf	_IR_New_Code
  5075                           
  5076                           ;interrupts.c: 295: IRrawCodeNum =0;
  5077  0168  01F9               	clrf	_IRrawCodeNum
  5078                           
  5079                           ;interrupts.c: 296: IRRawCode[0] = 22500;
  5080  0169  3060               	movlw	96
  5081  016A  0086               	movwf	6
  5082  016B  3021               	movlw	33
  5083  016C  0087               	movwf	7
  5084  016D  30E4               	movlw	228
  5085  016E  3FC0               	movwi [0]fsr1
  5086  016F  3057               	movlw	87
  5087  0170  3FC1               	movwi [1]fsr1
  5088                           
  5089                           ;interrupts.c: 298: }
  5090                           ;interrupts.c: 299: }
  5091  0171  297B               	goto	i1l2081
  5092  0172                     i1l2075:	
  5093                           
  5094                           ;interrupts.c: 300: else
  5095                           ;interrupts.c: 301: {
  5096                           ;interrupts.c: 302: TMR1_overflow = 0;
  5097  0172  0020               	movlb	0	; select bank0
  5098  0173  01BA               	clrf	_TMR1_overflow	;volatile
  5099  0174  01BB               	clrf	_TMR1_overflow+1	;volatile
  5100                           
  5101                           ;interrupts.c: 303: Stop_Timer1();
  5102  0175  3187  2768  3180   	fcall	i1_Stop_Timer1
  5103                           
  5104                           ;interrupts.c: 304: Start_Timer1();
  5105  0178  3187  276E  3180   	fcall	_Start_Timer1
  5106  017B                     i1l2081:	
  5107                           
  5108                           ;interrupts.c: 305: }
  5109                           ;interrupts.c: 306: IRrawCodeNum++;
  5110  017B  3001               	movlw	1
  5111  017C  0020               	movlb	0	; select bank0
  5112  017D  00CD               	movwf	??_isr
  5113  017E  084D               	movf	??_isr,w
  5114  017F  07F9               	addwf	_IRrawCodeNum,f
  5115  0180                     i1l2083:	
  5116                           
  5117                           ;interrupts.c: 307: }
  5118                           ;interrupts.c: 308: if(IRrawCodeNum == 72)
  5119  0180  3048               	movlw	72
  5120  0181  0679               	xorwf	_IRrawCodeNum,w
  5121  0182  1D03               	btfss	3,2
  5122  0183  29A8               	goto	i1l2099
  5123                           
  5124                           ;interrupts.c: 309: {
  5125                           ;interrupts.c: 312: PIR1bits.TMR1IF = 0;
  5126  0184  0020               	movlb	0	; select bank0
  5127  0185  1011               	bcf	17,0	;volatile
  5128                           
  5129                           ;interrupts.c: 313: PIE1bits.TMR1IE = 0;
  5130  0186  0021               	movlb	1	; select bank1
  5131  0187  1011               	bcf	17,0	;volatile
  5132                           
  5133                           ;interrupts.c: 314: Stop_Timer1();
  5134  0188  3187  2768  3180   	fcall	i1_Stop_Timer1
  5135                           
  5136                           ;interrupts.c: 315: if(!IR_New_Code)
  5137  018B  087D               	movf	_IR_New_Code,w
  5138  018C  1D03               	btfss	3,2
  5139  018D  29A0               	goto	i1l2093
  5140                           
  5141                           ;interrupts.c: 316: {
  5142                           ;interrupts.c: 318: IR_New_Code = IRrawToNEC(IRRawCode, &IR_NEC, 1);
  5143  018E  3060               	movlw	96
  5144  018F  00F0               	movwf	IRrawToNEC@Raw
  5145  0190  3021               	movlw	33
  5146  0191  00F1               	movwf	IRrawToNEC@Raw+1
  5147  0192  3041               	movlw	(low (_IR_NEC| 0))& (0+255)
  5148  0193  0020               	movlb	0	; select bank0
  5149  0194  00CD               	movwf	??_isr
  5150  0195  084D               	movf	??_isr,w
  5151  0196  00F2               	movwf	IRrawToNEC@NEC
  5152  0197  01F3               	clrf	IRrawToNEC@Invert
  5153  0198  0AF3               	incf	IRrawToNEC@Invert,f
  5154  0199  3182  221F  3180   	fcall	_IRrawToNEC
  5155  019C  0020               	movlb	0	; select bank0
  5156  019D  00CE               	movwf	??_isr+1
  5157  019E  084E               	movf	??_isr+1,w
  5158  019F  00FD               	movwf	_IR_New_Code
  5159  01A0                     i1l2093:	
  5160                           
  5161                           ;interrupts.c: 319: }
  5162                           ;interrupts.c: 320: IRrawCodeNum = 0;
  5163  01A0  01F9               	clrf	_IRrawCodeNum
  5164                           
  5165                           ;interrupts.c: 321: TMR1_overflow = 0;
  5166  01A1  0020               	movlb	0	; select bank0
  5167  01A2  01BA               	clrf	_TMR1_overflow	;volatile
  5168  01A3  01BB               	clrf	_TMR1_overflow+1	;volatile
  5169                           
  5170                           ;interrupts.c: 322: IRreceived = 1;
  5171  01A4  3001               	movlw	1
  5172  01A5  00CD               	movwf	??_isr
  5173  01A6  084D               	movf	??_isr,w
  5174  01A7  00BF               	movwf	_IRreceived	;volatile
  5175  01A8                     i1l2099:	
  5176                           
  5177                           ;interrupts.c: 323: }
  5178                           ;interrupts.c: 326: IOCCPbits.IOCCP4 = 1;
  5179  01A8  0027               	movlb	7	; select bank7
  5180  01A9  1617               	bsf	23,4	;volatile
  5181                           
  5182                           ;interrupts.c: 328: IOCCNbits.IOCCN4 = 1;
  5183  01AA  1618               	bsf	24,4	;volatile
  5184                           
  5185                           ;interrupts.c: 330: IOCCFbits.IOCCF4 = 0;
  5186  01AB  1219               	bcf	25,4	;volatile
  5187                           
  5188                           ;interrupts.c: 331: INTCONbits.IOCIF = 0;
  5189  01AC  100B               	bcf	11,0	;volatile
  5190                           
  5191                           ;interrupts.c: 332: }
  5192  01AD  29DF               	goto	i1l119
  5193  01AE                     i1l122:	
  5194                           
  5195                           ;interrupts.c: 333: else if(PIR2bits.TMR4IF)
  5196  01AE  0020               	movlb	0	; select bank0
  5197  01AF  1C92               	btfss	18,1	;volatile
  5198  01B0  29CD               	goto	i1l130
  5199                           
  5200                           ;interrupts.c: 334: {
  5201                           ;interrupts.c: 336: Timer4OFF();
  5202  01B1  3187  2725  3180   	fcall	i1_Timer4OFF
  5203                           
  5204                           ;interrupts.c: 337: if(TMR4_overflow < 6)
  5205  01B4  3000               	movlw	0
  5206  01B5  0020               	movlb	0	; select bank0
  5207  01B6  023D               	subwf	_TMR4_overflow+1,w	;volatile
  5208  01B7  3006               	movlw	6
  5209  01B8  1903               	skipnz
  5210  01B9  023C               	subwf	_TMR4_overflow,w	;volatile
  5211  01BA  1803               	skipnc
  5212  01BB  29C8               	goto	i1l2115
  5213                           
  5214                           ;interrupts.c: 338: {
  5215                           ;interrupts.c: 339: Timer4Reset();
  5216  01BC  3187  276B  3180   	fcall	_Timer4Reset
  5217                           
  5218                           ;interrupts.c: 340: Timer4ON();
  5219  01BF  3187  2748  3180   	fcall	_Timer4ON
  5220                           
  5221                           ;interrupts.c: 341: TMR4_overflow++;
  5222  01C2  3001               	movlw	1
  5223  01C3  0020               	movlb	0	; select bank0
  5224  01C4  07BC               	addwf	_TMR4_overflow,f	;volatile
  5225  01C5  3000               	movlw	0
  5226  01C6  3DBD               	addwfc	_TMR4_overflow+1,f	;volatile
  5227                           
  5228                           ;interrupts.c: 342: }
  5229  01C7  29DF               	goto	i1l119
  5230  01C8                     i1l2115:	
  5231                           
  5232                           ;interrupts.c: 343: else
  5233                           ;interrupts.c: 344: {
  5234                           ;interrupts.c: 349: Sent = 1;
  5235  01C8  3001               	movlw	1
  5236  01C9  00CD               	movwf	??_isr
  5237  01CA  084D               	movf	??_isr,w
  5238  01CB  00DE               	movwf	_Sent	;volatile
  5239                           
  5240                           ;interrupts.c: 350: }
  5241                           ;interrupts.c: 351: }
  5242  01CC  29DF               	goto	i1l119
  5243  01CD                     i1l130:	
  5244                           
  5245                           ;interrupts.c: 352: else if(PIR2bits.TMR6IF)
  5246  01CD  1D12               	btfss	18,2	;volatile
  5247  01CE  29DE               	goto	i1l134
  5248                           
  5249                           ;interrupts.c: 353: {
  5250                           ;interrupts.c: 355: Timer6OFF();
  5251  01CF  3187  271E  3180   	fcall	i1_Timer6OFF
  5252                           
  5253                           ;interrupts.c: 356: LATC &= ~(0b00000001 + 0b00000010 + 0b00000100);
  5254  01D2  30F8               	movlw	248
  5255  01D3  0020               	movlb	0	; select bank0
  5256  01D4  00CD               	movwf	??_isr
  5257  01D5  084D               	movf	??_isr,w
  5258  01D6  0022               	movlb	2	; select bank2
  5259  01D7  058E               	andwf	14,f	;volatile
  5260                           
  5261                           ;interrupts.c: 357: LEDsdone = 1;
  5262  01D8  3001               	movlw	1
  5263  01D9  0020               	movlb	0	; select bank0
  5264  01DA  00CD               	movwf	??_isr
  5265  01DB  084D               	movf	??_isr,w
  5266  01DC  00DD               	movwf	_LEDsdone	;volatile
  5267                           
  5268                           ;interrupts.c: 358: }
  5269  01DD  29DF               	goto	i1l119
  5270  01DE                     i1l134:	
  5271                           
  5272                           ;interrupts.c: 359: else
  5273                           ;interrupts.c: 360: {
  5274                           ;interrupts.c: 362: __nop();
  5275  01DE  0000               	nop
  5276  01DF                     i1l119:	
  5277                           
  5278                           ;interrupts.c: 363: }
  5279                           ;interrupts.c: 364: INTCONbits.GIE = 1;
  5280  01DF  178B               	bsf	11,7	;volatile
  5281  01E0  0020               	movlb	0	; select bank0
  5282  01E1  0855               	movf	??_isr+8,w
  5283  01E2  00FF               	movwf	127
  5284  01E3  0009               	retfie
  5285  01E4                     __end_of_isr:	
  5286                           
  5287                           	psect	text23
  5288  071E                     __ptext23:	
  5289 ;; *************** function i1_Timer6OFF *****************
  5290 ;; Defined at:
  5291 ;;		line 261 in file "Timer.c"
  5292 ;; Parameters:    Size  Location     Type
  5293 ;;		None
  5294 ;; Auto vars:     Size  Location     Type
  5295 ;;		None
  5296 ;; Return value:  Size  Location     Type
  5297 ;;		None               void
  5298 ;; Registers used:
  5299 ;;		None
  5300 ;; Tracked objects:
  5301 ;;		On entry : 0/0
  5302 ;;		On exit  : 0/0
  5303 ;;		Unchanged: 0/0
  5304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5305 ;;      Params:         0       0       0       0       0       0       0       0
  5306 ;;      Locals:         0       0       0       0       0       0       0       0
  5307 ;;      Temps:          0       0       0       0       0       0       0       0
  5308 ;;      Totals:         0       0       0       0       0       0       0       0
  5309 ;;Total ram usage:        0 bytes
  5310 ;; Hardware stack levels used:    1
  5311 ;; This function calls:
  5312 ;;		Nothing
  5313 ;; This function is called by:
  5314 ;;		_isr
  5315 ;; This function uses a non-reentrant model
  5316 ;;
  5317                           
  5318                           
  5319                           ;psect for function i1_Timer6OFF
  5320  071E                     i1_Timer6OFF:	
  5321                           
  5322                           ;Timer.c: 263: T6CONbits.TMR6ON = 0;
  5323                           
  5324                           ;incstack = 0
  5325                           ; Regs used in i1_Timer6OFF: []
  5326  071E  0028               	movlb	8	; select bank8
  5327  071F  111E               	bcf	30,2	;volatile
  5328                           
  5329                           ;Timer.c: 264: PIR2bits.TMR6IF = 0;
  5330  0720  0020               	movlb	0	; select bank0
  5331  0721  1112               	bcf	18,2	;volatile
  5332                           
  5333                           ;Timer.c: 265: PIE2bits.TMR6IE = 0;
  5334  0722  0021               	movlb	1	; select bank1
  5335  0723  1112               	bcf	18,2	;volatile
  5336  0724  0008               	return
  5337  0725                     __end_ofi1_Timer6OFF:	
  5338                           
  5339                           	psect	text24
  5340  0725                     __ptext24:	
  5341 ;; *************** function i1_Timer4OFF *****************
  5342 ;; Defined at:
  5343 ;;		line 197 in file "Timer.c"
  5344 ;; Parameters:    Size  Location     Type
  5345 ;;		None
  5346 ;; Auto vars:     Size  Location     Type
  5347 ;;		None
  5348 ;; Return value:  Size  Location     Type
  5349 ;;		None               void
  5350 ;; Registers used:
  5351 ;;		None
  5352 ;; Tracked objects:
  5353 ;;		On entry : 0/0
  5354 ;;		On exit  : 0/0
  5355 ;;		Unchanged: 0/0
  5356 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5357 ;;      Params:         0       0       0       0       0       0       0       0
  5358 ;;      Locals:         0       0       0       0       0       0       0       0
  5359 ;;      Temps:          0       0       0       0       0       0       0       0
  5360 ;;      Totals:         0       0       0       0       0       0       0       0
  5361 ;;Total ram usage:        0 bytes
  5362 ;; Hardware stack levels used:    1
  5363 ;; This function calls:
  5364 ;;		Nothing
  5365 ;; This function is called by:
  5366 ;;		_isr
  5367 ;; This function uses a non-reentrant model
  5368 ;;
  5369                           
  5370                           
  5371                           ;psect for function i1_Timer4OFF
  5372  0725                     i1_Timer4OFF:	
  5373                           
  5374                           ;Timer.c: 199: T4CONbits.TMR4ON = 0;
  5375                           
  5376                           ;incstack = 0
  5377                           ; Regs used in i1_Timer4OFF: []
  5378  0725  0028               	movlb	8	; select bank8
  5379  0726  1117               	bcf	23,2	;volatile
  5380                           
  5381                           ;Timer.c: 200: PIR2bits.TMR4IF = 0;
  5382  0727  0020               	movlb	0	; select bank0
  5383  0728  1092               	bcf	18,1	;volatile
  5384                           
  5385                           ;Timer.c: 201: PIE2bits.TMR4IE = 0;
  5386  0729  0021               	movlb	1	; select bank1
  5387  072A  1092               	bcf	18,1	;volatile
  5388  072B  0008               	return
  5389  072C                     __end_ofi1_Timer4OFF:	
  5390                           
  5391                           	psect	text25
  5392  0738                     __ptext25:	
  5393 ;; *************** function i1_Timer2OFF *****************
  5394 ;; Defined at:
  5395 ;;		line 153 in file "Timer.c"
  5396 ;; Parameters:    Size  Location     Type
  5397 ;;		None
  5398 ;; Auto vars:     Size  Location     Type
  5399 ;;		None
  5400 ;; Return value:  Size  Location     Type
  5401 ;;		None               void
  5402 ;; Registers used:
  5403 ;;		None
  5404 ;; Tracked objects:
  5405 ;;		On entry : 0/0
  5406 ;;		On exit  : 0/0
  5407 ;;		Unchanged: 0/0
  5408 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5409 ;;      Params:         0       0       0       0       0       0       0       0
  5410 ;;      Locals:         0       0       0       0       0       0       0       0
  5411 ;;      Temps:          0       0       0       0       0       0       0       0
  5412 ;;      Totals:         0       0       0       0       0       0       0       0
  5413 ;;Total ram usage:        0 bytes
  5414 ;; Hardware stack levels used:    1
  5415 ;; This function calls:
  5416 ;;		Nothing
  5417 ;; This function is called by:
  5418 ;;		_isr
  5419 ;; This function uses a non-reentrant model
  5420 ;;
  5421                           
  5422                           
  5423                           ;psect for function i1_Timer2OFF
  5424  0738                     i1_Timer2OFF:	
  5425                           
  5426                           ;Timer.c: 155: T2CONbits.TMR2ON = 0;
  5427                           
  5428                           ;incstack = 0
  5429                           ; Regs used in i1_Timer2OFF: []
  5430  0738  0020               	movlb	0	; select bank0
  5431  0739  111C               	bcf	28,2	;volatile
  5432                           
  5433                           ;Timer.c: 156: PIR1bits.TMR2IF = 0;
  5434  073A  1091               	bcf	17,1	;volatile
  5435                           
  5436                           ;Timer.c: 157: PIE1bits.TMR2IE = 0;
  5437  073B  0021               	movlb	1	; select bank1
  5438  073C  1091               	bcf	17,1	;volatile
  5439  073D  0008               	return
  5440  073E                     __end_ofi1_Timer2OFF:	
  5441                           
  5442                           	psect	text26
  5443  0768                     __ptext26:	
  5444 ;; *************** function i1_Stop_Timer1 *****************
  5445 ;; Defined at:
  5446 ;;		line 81 in file "Timer.c"
  5447 ;; Parameters:    Size  Location     Type
  5448 ;;		None
  5449 ;; Auto vars:     Size  Location     Type
  5450 ;;		None
  5451 ;; Return value:  Size  Location     Type
  5452 ;;		None               void
  5453 ;; Registers used:
  5454 ;;		None
  5455 ;; Tracked objects:
  5456 ;;		On entry : 0/0
  5457 ;;		On exit  : 0/0
  5458 ;;		Unchanged: 0/0
  5459 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5460 ;;      Params:         0       0       0       0       0       0       0       0
  5461 ;;      Locals:         0       0       0       0       0       0       0       0
  5462 ;;      Temps:          0       0       0       0       0       0       0       0
  5463 ;;      Totals:         0       0       0       0       0       0       0       0
  5464 ;;Total ram usage:        0 bytes
  5465 ;; Hardware stack levels used:    1
  5466 ;; This function calls:
  5467 ;;		Nothing
  5468 ;; This function is called by:
  5469 ;;		_isr
  5470 ;; This function uses a non-reentrant model
  5471 ;;
  5472                           
  5473                           
  5474                           ;psect for function i1_Stop_Timer1
  5475  0768                     i1_Stop_Timer1:	
  5476                           
  5477                           ;Timer.c: 84: T1CONbits.TMR1ON =0;
  5478                           
  5479                           ;incstack = 0
  5480                           ; Regs used in i1_Stop_Timer1: []
  5481  0768  0020               	movlb	0	; select bank0
  5482  0769  1018               	bcf	24,0	;volatile
  5483  076A  0008               	return
  5484  076B                     __end_ofi1_Stop_Timer1:	
  5485                           
  5486                           	psect	text27
  5487  075E                     __ptext27:	
  5488 ;; *************** function i1_Reset_Timer1 *****************
  5489 ;; Defined at:
  5490 ;;		line 103 in file "Timer.c"
  5491 ;; Parameters:    Size  Location     Type
  5492 ;;		None
  5493 ;; Auto vars:     Size  Location     Type
  5494 ;;		None
  5495 ;; Return value:  Size  Location     Type
  5496 ;;		None               void
  5497 ;; Registers used:
  5498 ;;		status,2
  5499 ;; Tracked objects:
  5500 ;;		On entry : 0/0
  5501 ;;		On exit  : 0/0
  5502 ;;		Unchanged: 0/0
  5503 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5504 ;;      Params:         0       0       0       0       0       0       0       0
  5505 ;;      Locals:         0       0       0       0       0       0       0       0
  5506 ;;      Temps:          0       0       0       0       0       0       0       0
  5507 ;;      Totals:         0       0       0       0       0       0       0       0
  5508 ;;Total ram usage:        0 bytes
  5509 ;; Hardware stack levels used:    1
  5510 ;; This function calls:
  5511 ;;		Nothing
  5512 ;; This function is called by:
  5513 ;;		_isr
  5514 ;; This function uses a non-reentrant model
  5515 ;;
  5516                           
  5517                           
  5518                           ;psect for function i1_Reset_Timer1
  5519  075E                     i1_Reset_Timer1:	
  5520                           
  5521                           ;Timer.c: 109: TMR1H = 0;
  5522                           
  5523                           ;incstack = 0
  5524                           ; Regs used in i1_Reset_Timer1: [status,2]
  5525  075E  0020               	movlb	0	; select bank0
  5526  075F  0197               	clrf	23	;volatile
  5527                           
  5528                           ;Timer.c: 110: TMR1L = 0;
  5529  0760  0196               	clrf	22	;volatile
  5530  0761  0008               	return
  5531  0762                     __end_ofi1_Reset_Timer1:	
  5532                           
  5533                           	psect	text28
  5534  076B                     __ptext28:	
  5535 ;; *************** function _Timer4Reset *****************
  5536 ;; Defined at:
  5537 ;;		line 209 in file "Timer.c"
  5538 ;; Parameters:    Size  Location     Type
  5539 ;;		None
  5540 ;; Auto vars:     Size  Location     Type
  5541 ;;		None
  5542 ;; Return value:  Size  Location     Type
  5543 ;;		None               void
  5544 ;; Registers used:
  5545 ;;		status,2
  5546 ;; Tracked objects:
  5547 ;;		On entry : 0/0
  5548 ;;		On exit  : 0/0
  5549 ;;		Unchanged: 0/0
  5550 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5551 ;;      Params:         0       0       0       0       0       0       0       0
  5552 ;;      Locals:         0       0       0       0       0       0       0       0
  5553 ;;      Temps:          0       0       0       0       0       0       0       0
  5554 ;;      Totals:         0       0       0       0       0       0       0       0
  5555 ;;Total ram usage:        0 bytes
  5556 ;; Hardware stack levels used:    1
  5557 ;; This function calls:
  5558 ;;		Nothing
  5559 ;; This function is called by:
  5560 ;;		_isr
  5561 ;; This function uses a non-reentrant model
  5562 ;;
  5563                           
  5564                           
  5565                           ;psect for function _Timer4Reset
  5566  076B                     _Timer4Reset:	
  5567                           
  5568                           ;Timer.c: 211: TMR4 = 0;
  5569                           
  5570                           ;incstack = 0
  5571                           ; Regs used in _Timer4Reset: [status,2]
  5572  076B  0028               	movlb	8	; select bank8
  5573  076C  0195               	clrf	21	;volatile
  5574  076D  0008               	return
  5575  076E                     __end_of_Timer4Reset:	
  5576                           
  5577                           	psect	text29
  5578  0748                     __ptext29:	
  5579 ;; *************** function _Timer4ON *****************
  5580 ;; Defined at:
  5581 ;;		line 186 in file "Timer.c"
  5582 ;; Parameters:    Size  Location     Type
  5583 ;;		None
  5584 ;; Auto vars:     Size  Location     Type
  5585 ;;		None
  5586 ;; Return value:  Size  Location     Type
  5587 ;;		None               void
  5588 ;; Registers used:
  5589 ;;		None
  5590 ;; Tracked objects:
  5591 ;;		On entry : 0/0
  5592 ;;		On exit  : 0/0
  5593 ;;		Unchanged: 0/0
  5594 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5595 ;;      Params:         0       0       0       0       0       0       0       0
  5596 ;;      Locals:         0       0       0       0       0       0       0       0
  5597 ;;      Temps:          0       0       0       0       0       0       0       0
  5598 ;;      Totals:         0       0       0       0       0       0       0       0
  5599 ;;Total ram usage:        0 bytes
  5600 ;; Hardware stack levels used:    1
  5601 ;; This function calls:
  5602 ;;		Nothing
  5603 ;; This function is called by:
  5604 ;;		_isr
  5605 ;; This function uses a non-reentrant model
  5606 ;;
  5607                           
  5608                           
  5609                           ;psect for function _Timer4ON
  5610  0748                     _Timer4ON:	
  5611                           
  5612                           ;Timer.c: 188: T4CONbits.TMR4ON = 1;
  5613                           
  5614                           ;incstack = 0
  5615                           ; Regs used in _Timer4ON: []
  5616  0748  0028               	movlb	8	; select bank8
  5617  0749  1517               	bsf	23,2	;volatile
  5618                           
  5619                           ;Timer.c: 189: PIE2bits.TMR4IE = 1;
  5620  074A  0021               	movlb	1	; select bank1
  5621  074B  1492               	bsf	18,1	;volatile
  5622  074C  0008               	return
  5623  074D                     __end_of_Timer4ON:	
  5624                           
  5625                           	psect	text30
  5626  076E                     __ptext30:	
  5627 ;; *************** function _Start_Timer1 *****************
  5628 ;; Defined at:
  5629 ;;		line 92 in file "Timer.c"
  5630 ;; Parameters:    Size  Location     Type
  5631 ;;		None
  5632 ;; Auto vars:     Size  Location     Type
  5633 ;;		None
  5634 ;; Return value:  Size  Location     Type
  5635 ;;		None               void
  5636 ;; Registers used:
  5637 ;;		None
  5638 ;; Tracked objects:
  5639 ;;		On entry : 0/0
  5640 ;;		On exit  : 0/0
  5641 ;;		Unchanged: 0/0
  5642 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5643 ;;      Params:         0       0       0       0       0       0       0       0
  5644 ;;      Locals:         0       0       0       0       0       0       0       0
  5645 ;;      Temps:          0       0       0       0       0       0       0       0
  5646 ;;      Totals:         0       0       0       0       0       0       0       0
  5647 ;;Total ram usage:        0 bytes
  5648 ;; Hardware stack levels used:    1
  5649 ;; This function calls:
  5650 ;;		Nothing
  5651 ;; This function is called by:
  5652 ;;		_isr
  5653 ;; This function uses a non-reentrant model
  5654 ;;
  5655                           
  5656                           
  5657                           ;psect for function _Start_Timer1
  5658  076E                     _Start_Timer1:	
  5659                           
  5660                           ;Timer.c: 95: T1CONbits.TMR1ON =1;
  5661                           
  5662                           ;incstack = 0
  5663                           ; Regs used in _Start_Timer1: []
  5664  076E  0020               	movlb	0	; select bank0
  5665  076F  1418               	bsf	24,0	;volatile
  5666  0770  0008               	return
  5667  0771                     __end_of_Start_Timer1:	
  5668                           
  5669                           	psect	text31
  5670  074D                     __ptext31:	
  5671 ;; *************** function _Set_Timer4 *****************
  5672 ;; Defined at:
  5673 ;;		line 219 in file "Timer.c"
  5674 ;; Parameters:    Size  Location     Type
  5675 ;;  time            1    wreg     unsigned char 
  5676 ;; Auto vars:     Size  Location     Type
  5677 ;;  time            1    0[COMMON] unsigned char 
  5678 ;; Return value:  Size  Location     Type
  5679 ;;		None               void
  5680 ;; Registers used:
  5681 ;;		wreg
  5682 ;; Tracked objects:
  5683 ;;		On entry : 0/0
  5684 ;;		On exit  : 0/0
  5685 ;;		Unchanged: 0/0
  5686 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5687 ;;      Params:         0       0       0       0       0       0       0       0
  5688 ;;      Locals:         1       0       0       0       0       0       0       0
  5689 ;;      Temps:          0       0       0       0       0       0       0       0
  5690 ;;      Totals:         1       0       0       0       0       0       0       0
  5691 ;;Total ram usage:        1 bytes
  5692 ;; Hardware stack levels used:    1
  5693 ;; This function calls:
  5694 ;;		Nothing
  5695 ;; This function is called by:
  5696 ;;		_isr
  5697 ;; This function uses a non-reentrant model
  5698 ;;
  5699                           
  5700                           
  5701                           ;psect for function _Set_Timer4
  5702  074D                     _Set_Timer4:	
  5703                           
  5704                           ;incstack = 0
  5705                           ; Regs used in _Set_Timer4: [wreg]
  5706                           ;Set_Timer4@time stored from wreg
  5707  074D  00F0               	movwf	Set_Timer4@time
  5708                           
  5709                           ;Timer.c: 221: PR4 = time;
  5710  074E  0870               	movf	Set_Timer4@time,w
  5711  074F  0028               	movlb	8	; select bank8
  5712  0750  0096               	movwf	22	;volatile
  5713  0751  0008               	return
  5714  0752                     __end_of_Set_Timer4:	
  5715                           
  5716                           	psect	text32
  5717  021F                     __ptext32:	
  5718 ;; *************** function _IRrawToNEC *****************
  5719 ;; Defined at:
  5720 ;;		line 124 in file "IR.c"
  5721 ;; Parameters:    Size  Location     Type
  5722 ;;  Raw             2    0[COMMON] PTR unsigned int 
  5723 ;;		 -> IRRawCode(144), 
  5724 ;;  NEC             1    2[COMMON] PTR unsigned long 
  5725 ;;		 -> IR_NEC(4), 
  5726 ;;  Invert          1    3[COMMON] unsigned char 
  5727 ;; Auto vars:     Size  Location     Type
  5728 ;;  NECtemp         4    0[BANK0 ] unsigned long 
  5729 ;;  StartBit        1    7[BANK0 ] unsigned char 
  5730 ;;  i               1    6[BANK0 ] unsigned char 
  5731 ;;  first           1    5[BANK0 ] unsigned char 
  5732 ;;  Pause           1    4[BANK0 ] unsigned char 
  5733 ;; Return value:  Size  Location     Type
  5734 ;;                  1    wreg      unsigned char 
  5735 ;; Registers used:
  5736 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5737 ;; Tracked objects:
  5738 ;;		On entry : 0/0
  5739 ;;		On exit  : 0/0
  5740 ;;		Unchanged: 0/0
  5741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5742 ;;      Params:         4       0       0       0       0       0       0       0
  5743 ;;      Locals:         0       8       0       0       0       0       0       0
  5744 ;;      Temps:          5       0       0       0       0       0       0       0
  5745 ;;      Totals:         9       8       0       0       0       0       0       0
  5746 ;;Total ram usage:       17 bytes
  5747 ;; Hardware stack levels used:    1
  5748 ;; This function calls:
  5749 ;;		Nothing
  5750 ;; This function is called by:
  5751 ;;		_isr
  5752 ;; This function uses a non-reentrant model
  5753 ;;
  5754                           
  5755                           
  5756                           ;psect for function _IRrawToNEC
  5757  021F                     _IRrawToNEC:	
  5758                           
  5759                           ;IR.c: 152: unsigned char i;
  5760                           ;IR.c: 153: unsigned char Pause =0;
  5761                           
  5762                           ;incstack = 0
  5763                           ; Regs used in _IRrawToNEC: [wreg+fsr1l+fsr1h+status,2+status,0]
  5764  021F  0020               	movlb	0	; select bank0
  5765  0220  01C9               	clrf	IRrawToNEC@Pause
  5766                           
  5767                           ;IR.c: 154: unsigned char first =0;
  5768  0221  01CA               	clrf	IRrawToNEC@first
  5769                           
  5770                           ;IR.c: 155: unsigned char StartBit=72;
  5771  0222  3048               	movlw	72
  5772  0223  00F4               	movwf	??_IRrawToNEC
  5773  0224  0874               	movf	??_IRrawToNEC,w
  5774  0225  00CC               	movwf	IRrawToNEC@StartBit
  5775                           
  5776                           ;IR.c: 156: unsigned long NECtemp = 0;
  5777  0226  3000               	movlw	0
  5778  0227  00C8               	movwf	IRrawToNEC@NECtemp+3
  5779  0228  3000               	movlw	0
  5780  0229  00C7               	movwf	IRrawToNEC@NECtemp+2
  5781  022A  3000               	movlw	0
  5782  022B  00C6               	movwf	IRrawToNEC@NECtemp+1
  5783  022C  3000               	movlw	0
  5784  022D  00C5               	movwf	IRrawToNEC@NECtemp
  5785                           
  5786                           ;IR.c: 159: for (i =0; i < 72; i++)
  5787  022E  01CB               	clrf	IRrawToNEC@i
  5788  022F  3048               	movlw	72
  5789  0230  024B               	subwf	IRrawToNEC@i,w
  5790  0231  1803               	btfsc	3,0
  5791  0232  2A9A               	goto	i1l1657
  5792  0233                     i1l1637:	
  5793                           
  5794                           ;IR.c: 160: {
  5795                           ;IR.c: 161: if(Raw[i] >= 22500 && Raw[i] <= 25000 )
  5796  0233  084B               	movf	IRrawToNEC@i,w
  5797  0234  00F4               	movwf	??_IRrawToNEC
  5798  0235  01F5               	clrf	??_IRrawToNEC+1
  5799  0236  35F4               	lslf	??_IRrawToNEC,f
  5800  0237  0DF5               	rlf	??_IRrawToNEC+1,f
  5801  0238  0874               	movf	??_IRrawToNEC,w
  5802  0239  0770               	addwf	IRrawToNEC@Raw,w
  5803  023A  0086               	movwf	6
  5804  023B  0875               	movf	??_IRrawToNEC+1,w
  5805  023C  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5806  023D  0087               	movwf	7
  5807  023E  3F40               	moviw [0]fsr1
  5808  023F  00F6               	movwf	??_IRrawToNEC+2
  5809  0240  3F41               	moviw [1]fsr1
  5810  0241  00F7               	movwf	??_IRrawToNEC+3
  5811  0242  3057               	movlw	87
  5812  0243  0277               	subwf	??_IRrawToNEC+3,w
  5813  0244  30E4               	movlw	228
  5814  0245  1903               	skipnz
  5815  0246  0276               	subwf	??_IRrawToNEC+2,w
  5816  0247  1C03               	skipc
  5817  0248  2A61               	goto	i1l1647
  5818  0249  084B               	movf	IRrawToNEC@i,w
  5819  024A  00F4               	movwf	??_IRrawToNEC
  5820  024B  01F5               	clrf	??_IRrawToNEC+1
  5821  024C  35F4               	lslf	??_IRrawToNEC,f
  5822  024D  0DF5               	rlf	??_IRrawToNEC+1,f
  5823  024E  0874               	movf	??_IRrawToNEC,w
  5824  024F  0770               	addwf	IRrawToNEC@Raw,w
  5825  0250  0086               	movwf	6
  5826  0251  0875               	movf	??_IRrawToNEC+1,w
  5827  0252  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5828  0253  0087               	movwf	7
  5829  0254  3F40               	moviw [0]fsr1
  5830  0255  00F6               	movwf	??_IRrawToNEC+2
  5831  0256  3F41               	moviw [1]fsr1
  5832  0257  00F7               	movwf	??_IRrawToNEC+3
  5833  0258  3061               	movlw	97
  5834  0259  0277               	subwf	??_IRrawToNEC+3,w
  5835  025A  30A9               	movlw	169
  5836  025B  1903               	skipnz
  5837  025C  0276               	subwf	??_IRrawToNEC+2,w
  5838  025D  1803               	skipnc
  5839  025E  2A61               	goto	i1l1647
  5840                           
  5841                           ;IR.c: 162: {
  5842                           ;IR.c: 164: return 2;
  5843  025F  3002               	movlw	2
  5844  0260  0008               	return
  5845  0261                     i1l1647:	
  5846                           ;IR.c: 165: }
  5847                           
  5848                           
  5849                           ;IR.c: 166: else if(Raw[i] >= 2000 && Raw[i] <= 2500 )
  5850  0261  084B               	movf	IRrawToNEC@i,w
  5851  0262  00F4               	movwf	??_IRrawToNEC
  5852  0263  01F5               	clrf	??_IRrawToNEC+1
  5853  0264  35F4               	lslf	??_IRrawToNEC,f
  5854  0265  0DF5               	rlf	??_IRrawToNEC+1,f
  5855  0266  0874               	movf	??_IRrawToNEC,w
  5856  0267  0770               	addwf	IRrawToNEC@Raw,w
  5857  0268  0086               	movwf	6
  5858  0269  0875               	movf	??_IRrawToNEC+1,w
  5859  026A  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5860  026B  0087               	movwf	7
  5861  026C  3F40               	moviw [0]fsr1
  5862  026D  00F6               	movwf	??_IRrawToNEC+2
  5863  026E  3F41               	moviw [1]fsr1
  5864  026F  00F7               	movwf	??_IRrawToNEC+3
  5865  0270  3007               	movlw	7
  5866  0271  0277               	subwf	??_IRrawToNEC+3,w
  5867  0272  30D0               	movlw	208
  5868  0273  1903               	skipnz
  5869  0274  0276               	subwf	??_IRrawToNEC+2,w
  5870  0275  1C03               	skipc
  5871  0276  2A92               	goto	i1l1653
  5872  0277  084B               	movf	IRrawToNEC@i,w
  5873  0278  00F4               	movwf	??_IRrawToNEC
  5874  0279  01F5               	clrf	??_IRrawToNEC+1
  5875  027A  35F4               	lslf	??_IRrawToNEC,f
  5876  027B  0DF5               	rlf	??_IRrawToNEC+1,f
  5877  027C  0874               	movf	??_IRrawToNEC,w
  5878  027D  0770               	addwf	IRrawToNEC@Raw,w
  5879  027E  0086               	movwf	6
  5880  027F  0875               	movf	??_IRrawToNEC+1,w
  5881  0280  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5882  0281  0087               	movwf	7
  5883  0282  3F40               	moviw [0]fsr1
  5884  0283  00F6               	movwf	??_IRrawToNEC+2
  5885  0284  3F41               	moviw [1]fsr1
  5886  0285  00F7               	movwf	??_IRrawToNEC+3
  5887  0286  3009               	movlw	9
  5888  0287  0277               	subwf	??_IRrawToNEC+3,w
  5889  0288  30C5               	movlw	197
  5890  0289  1903               	skipnz
  5891  028A  0276               	subwf	??_IRrawToNEC+2,w
  5892  028B  1803               	skipnc
  5893  028C  2A92               	goto	i1l1653
  5894                           
  5895                           ;IR.c: 167: {
  5896                           ;IR.c: 169: StartBit = i;
  5897  028D  084B               	movf	IRrawToNEC@i,w
  5898  028E  00F4               	movwf	??_IRrawToNEC
  5899  028F  0874               	movf	??_IRrawToNEC,w
  5900  0290  00CC               	movwf	IRrawToNEC@StartBit
  5901                           
  5902                           ;IR.c: 170: break;
  5903  0291  2A9A               	goto	i1l1657
  5904  0292                     i1l1653:	
  5905  0292  3001               	movlw	1
  5906  0293  00F4               	movwf	??_IRrawToNEC
  5907  0294  0874               	movf	??_IRrawToNEC,w
  5908  0295  07CB               	addwf	IRrawToNEC@i,f
  5909  0296  3048               	movlw	72
  5910  0297  024B               	subwf	IRrawToNEC@i,w
  5911  0298  1C03               	skipc
  5912  0299  2A33               	goto	i1l1637
  5913  029A                     i1l1657:	
  5914                           
  5915                           ;IR.c: 171: }
  5916                           ;IR.c: 172: }
  5917                           ;IR.c: 173: if(72 - StartBit < 72)
  5918  029A  084C               	movf	IRrawToNEC@StartBit,w
  5919  029B  00F4               	movwf	??_IRrawToNEC
  5920  029C  01F5               	clrf	??_IRrawToNEC+1
  5921  029D  09F4               	comf	??_IRrawToNEC,f
  5922  029E  09F5               	comf	??_IRrawToNEC+1,f
  5923  029F  0AF4               	incf	??_IRrawToNEC,f
  5924  02A0  1903               	skipnz
  5925  02A1  0AF5               	incf	??_IRrawToNEC+1,f
  5926  02A2  0874               	movf	??_IRrawToNEC,w
  5927  02A3  3E48               	addlw	72
  5928  02A4  00F6               	movwf	??_IRrawToNEC+2
  5929  02A5  3000               	movlw	0
  5930  02A6  3D75               	addwfc	??_IRrawToNEC+1,w
  5931  02A7  00F7               	movwf	??_IRrawToNEC+3
  5932  02A8  0877               	movf	??_IRrawToNEC+3,w
  5933  02A9  3A80               	xorlw	128
  5934  02AA  00F8               	movwf	??_IRrawToNEC+4
  5935  02AB  3080               	movlw	128
  5936  02AC  0278               	subwf	??_IRrawToNEC+4,w
  5937  02AD  1D03               	skipz
  5938  02AE  2AB1               	goto	u96_25
  5939  02AF  3048               	movlw	72
  5940  02B0  0276               	subwf	??_IRrawToNEC+2,w
  5941  02B1                     u96_25:	
  5942  02B1  1803               	skipnc
  5943  02B2  2AB5               	goto	i1l1663
  5944                           
  5945                           ;IR.c: 174: {
  5946                           ;IR.c: 176: return 0;
  5947  02B3  3000               	movlw	0
  5948  02B4  0008               	return
  5949  02B5                     i1l1663:	
  5950                           
  5951                           ;IR.c: 177: }
  5952                           ;IR.c: 179: StartBit++;
  5953  02B5  3001               	movlw	1
  5954  02B6  00F4               	movwf	??_IRrawToNEC
  5955  02B7  0874               	movf	??_IRrawToNEC,w
  5956  02B8  0020               	movlb	0	; select bank0
  5957  02B9  07CC               	addwf	IRrawToNEC@StartBit,f
  5958                           
  5959                           ;IR.c: 180: if(Raw[StartBit] < 875 || Raw[StartBit] > 1375 )
  5960  02BA  084C               	movf	IRrawToNEC@StartBit,w
  5961  02BB  00F4               	movwf	??_IRrawToNEC
  5962  02BC  01F5               	clrf	??_IRrawToNEC+1
  5963  02BD  35F4               	lslf	??_IRrawToNEC,f
  5964  02BE  0DF5               	rlf	??_IRrawToNEC+1,f
  5965  02BF  0874               	movf	??_IRrawToNEC,w
  5966  02C0  0770               	addwf	IRrawToNEC@Raw,w
  5967  02C1  0086               	movwf	6
  5968  02C2  0875               	movf	??_IRrawToNEC+1,w
  5969  02C3  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5970  02C4  0087               	movwf	7
  5971  02C5  3F40               	moviw [0]fsr1
  5972  02C6  00F6               	movwf	??_IRrawToNEC+2
  5973  02C7  3F41               	moviw [1]fsr1
  5974  02C8  00F7               	movwf	??_IRrawToNEC+3
  5975  02C9  3003               	movlw	3
  5976  02CA  0277               	subwf	??_IRrawToNEC+3,w
  5977  02CB  306B               	movlw	107
  5978  02CC  1903               	skipnz
  5979  02CD  0276               	subwf	??_IRrawToNEC+2,w
  5980  02CE  1C03               	skipc
  5981  02CF  2AE6               	goto	i1l1669
  5982  02D0  084C               	movf	IRrawToNEC@StartBit,w
  5983  02D1  00F4               	movwf	??_IRrawToNEC
  5984  02D2  01F5               	clrf	??_IRrawToNEC+1
  5985  02D3  35F4               	lslf	??_IRrawToNEC,f
  5986  02D4  0DF5               	rlf	??_IRrawToNEC+1,f
  5987  02D5  0874               	movf	??_IRrawToNEC,w
  5988  02D6  0770               	addwf	IRrawToNEC@Raw,w
  5989  02D7  0086               	movwf	6
  5990  02D8  0875               	movf	??_IRrawToNEC+1,w
  5991  02D9  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5992  02DA  0087               	movwf	7
  5993  02DB  3F40               	moviw [0]fsr1
  5994  02DC  00F6               	movwf	??_IRrawToNEC+2
  5995  02DD  3F41               	moviw [1]fsr1
  5996  02DE  00F7               	movwf	??_IRrawToNEC+3
  5997  02DF  3005               	movlw	5
  5998  02E0  0277               	subwf	??_IRrawToNEC+3,w
  5999  02E1  3060               	movlw	96
  6000  02E2  1903               	skipnz
  6001  02E3  0276               	subwf	??_IRrawToNEC+2,w
  6002  02E4  1C03               	skipc
  6003  02E5  2AE8               	goto	i1l1673
  6004  02E6                     i1l1669:	
  6005                           
  6006                           ;IR.c: 181: {
  6007                           ;IR.c: 183: return 0;
  6008  02E6  3000               	movlw	0
  6009  02E7  0008               	return
  6010  02E8                     i1l1673:	
  6011                           
  6012                           ;IR.c: 184: }
  6013                           ;IR.c: 187: StartBit++;
  6014  02E8  3001               	movlw	1
  6015  02E9  00F4               	movwf	??_IRrawToNEC
  6016  02EA  0874               	movf	??_IRrawToNEC,w
  6017  02EB  07CC               	addwf	IRrawToNEC@StartBit,f
  6018                           
  6019                           ;IR.c: 188: for(i = StartBit; i < 72;i++)
  6020  02EC  084C               	movf	IRrawToNEC@StartBit,w
  6021  02ED  00F4               	movwf	??_IRrawToNEC
  6022  02EE  0874               	movf	??_IRrawToNEC,w
  6023  02EF  00CB               	movwf	IRrawToNEC@i
  6024  02F0  3048               	movlw	72
  6025  02F1  024B               	subwf	IRrawToNEC@i,w
  6026  02F2  1803               	btfsc	3,0
  6027  02F3  2C8B               	goto	i1l1775
  6028  02F4                     i1l1681:	
  6029                           
  6030                           ;IR.c: 189: {
  6031                           ;IR.c: 190: if(Raw[StartBit] >= 62 && Raw[StartBit] <= 300 )
  6032  02F4  084C               	movf	IRrawToNEC@StartBit,w
  6033  02F5  00F4               	movwf	??_IRrawToNEC
  6034  02F6  01F5               	clrf	??_IRrawToNEC+1
  6035  02F7  35F4               	lslf	??_IRrawToNEC,f
  6036  02F8  0DF5               	rlf	??_IRrawToNEC+1,f
  6037  02F9  0874               	movf	??_IRrawToNEC,w
  6038  02FA  0770               	addwf	IRrawToNEC@Raw,w
  6039  02FB  0086               	movwf	6
  6040  02FC  0875               	movf	??_IRrawToNEC+1,w
  6041  02FD  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6042  02FE  0087               	movwf	7
  6043  02FF  3F40               	moviw [0]fsr1
  6044  0300  00F6               	movwf	??_IRrawToNEC+2
  6045  0301  3F41               	moviw [1]fsr1
  6046  0302  00F7               	movwf	??_IRrawToNEC+3
  6047  0303  3000               	movlw	0
  6048  0304  0277               	subwf	??_IRrawToNEC+3,w
  6049  0305  303E               	movlw	62
  6050  0306  1903               	skipnz
  6051  0307  0276               	subwf	??_IRrawToNEC+2,w
  6052  0308  1C03               	skipc
  6053  0309  2B4B               	goto	i1l1705
  6054  030A  084C               	movf	IRrawToNEC@StartBit,w
  6055  030B  00F4               	movwf	??_IRrawToNEC
  6056  030C  01F5               	clrf	??_IRrawToNEC+1
  6057  030D  35F4               	lslf	??_IRrawToNEC,f
  6058  030E  0DF5               	rlf	??_IRrawToNEC+1,f
  6059  030F  0874               	movf	??_IRrawToNEC,w
  6060  0310  0770               	addwf	IRrawToNEC@Raw,w
  6061  0311  0086               	movwf	6
  6062  0312  0875               	movf	??_IRrawToNEC+1,w
  6063  0313  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6064  0314  0087               	movwf	7
  6065  0315  3F40               	moviw [0]fsr1
  6066  0316  00F6               	movwf	??_IRrawToNEC+2
  6067  0317  3F41               	moviw [1]fsr1
  6068  0318  00F7               	movwf	??_IRrawToNEC+3
  6069  0319  3001               	movlw	1
  6070  031A  0277               	subwf	??_IRrawToNEC+3,w
  6071  031B  302D               	movlw	45
  6072  031C  1903               	skipnz
  6073  031D  0276               	subwf	??_IRrawToNEC+2,w
  6074  031E  1803               	skipnc
  6075  031F  2B4B               	goto	i1l1705
  6076                           
  6077                           ;IR.c: 191: {
  6078                           ;IR.c: 192: if(Pause != 3)
  6079  0320  3003               	movlw	3
  6080  0321  0649               	xorwf	IRrawToNEC@Pause,w
  6081  0322  1903               	btfsc	3,2
  6082  0323  2B3E               	goto	i1l1699
  6083                           
  6084                           ;IR.c: 193: {
  6085                           ;IR.c: 194: if(!first)
  6086  0324  084A               	movf	IRrawToNEC@first,w
  6087  0325  1D03               	btfss	3,2
  6088  0326  2B2A               	goto	i1l1691
  6089                           
  6090                           ;IR.c: 195: {
  6091                           ;IR.c: 197: first = 1;
  6092  0327  01CA               	clrf	IRrawToNEC@first
  6093  0328  0ACA               	incf	IRrawToNEC@first,f
  6094                           
  6095                           ;IR.c: 198: }
  6096  0329  2C7F               	goto	i1l1771
  6097  032A                     i1l1691:	
  6098                           
  6099                           ;IR.c: 199: else
  6100                           ;IR.c: 200: {
  6101                           ;IR.c: 201: first = 0;
  6102  032A  01CA               	clrf	IRrawToNEC@first
  6103                           
  6104                           ;IR.c: 202: NECtemp <<= 1;
  6105  032B  3001               	movlw	1
  6106  032C                     u104_25:	
  6107  032C  35C5               	lslf	IRrawToNEC@NECtemp,f
  6108  032D  0DC6               	rlf	IRrawToNEC@NECtemp+1,f
  6109  032E  0DC7               	rlf	IRrawToNEC@NECtemp+2,f
  6110  032F  0DC8               	rlf	IRrawToNEC@NECtemp+3,f
  6111  0330  0B89               	decfsz	9,f
  6112  0331  2B2C               	goto	u104_25
  6113                           
  6114                           ;IR.c: 203: if(!Invert)
  6115  0332  0873               	movf	IRrawToNEC@Invert,w
  6116  0333  1D03               	btfss	3,2
  6117  0334  2C7F               	goto	i1l1771
  6118                           
  6119                           ;IR.c: 204: {
  6120                           ;IR.c: 205: NECtemp++;
  6121  0335  3001               	movlw	1
  6122  0336  07C5               	addwf	IRrawToNEC@NECtemp,f
  6123  0337  3000               	movlw	0
  6124  0338  3DC6               	addwfc	IRrawToNEC@NECtemp+1,f
  6125  0339  3000               	movlw	0
  6126  033A  3DC7               	addwfc	IRrawToNEC@NECtemp+2,f
  6127  033B  3000               	movlw	0
  6128  033C  3DC8               	addwfc	IRrawToNEC@NECtemp+3,f
  6129                           
  6130                           ;IR.c: 206: }
  6131                           ;IR.c: 208: }
  6132                           ;IR.c: 209: }
  6133  033D  2C7F               	goto	i1l1771
  6134  033E                     i1l1699:	
  6135                           
  6136                           ;IR.c: 210: else
  6137                           ;IR.c: 211: {
  6138                           ;IR.c: 213: *NEC = NECtemp;
  6139  033E  0872               	movf	IRrawToNEC@NEC,w
  6140  033F  0086               	movwf	6
  6141  0340  0187               	clrf	7
  6142  0341  0845               	movf	IRrawToNEC@NECtemp,w
  6143  0342  3FC0               	movwi [0]fsr1
  6144  0343  0846               	movf	IRrawToNEC@NECtemp+1,w
  6145  0344  3FC1               	movwi [1]fsr1
  6146  0345  0847               	movf	IRrawToNEC@NECtemp+2,w
  6147  0346  3FC2               	movwi [2]fsr1
  6148  0347  0848               	movf	IRrawToNEC@NECtemp+3,w
  6149  0348  3FC3               	movwi [3]fsr1
  6150                           
  6151                           ;IR.c: 214: return 1;
  6152  0349  3001               	movlw	1
  6153  034A  0008               	return
  6154  034B                     i1l1705:	
  6155                           ;IR.c: 215: }
  6156                           ;IR.c: 216: }
  6157                           
  6158                           
  6159                           ;IR.c: 217: else if(Raw[StartBit] >= 350 && Raw[StartBit] <= 425)
  6160  034B  084C               	movf	IRrawToNEC@StartBit,w
  6161  034C  00F4               	movwf	??_IRrawToNEC
  6162  034D  01F5               	clrf	??_IRrawToNEC+1
  6163  034E  35F4               	lslf	??_IRrawToNEC,f
  6164  034F  0DF5               	rlf	??_IRrawToNEC+1,f
  6165  0350  0874               	movf	??_IRrawToNEC,w
  6166  0351  0770               	addwf	IRrawToNEC@Raw,w
  6167  0352  0086               	movwf	6
  6168  0353  0875               	movf	??_IRrawToNEC+1,w
  6169  0354  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6170  0355  0087               	movwf	7
  6171  0356  3F40               	moviw [0]fsr1
  6172  0357  00F6               	movwf	??_IRrawToNEC+2
  6173  0358  3F41               	moviw [1]fsr1
  6174  0359  00F7               	movwf	??_IRrawToNEC+3
  6175  035A  3001               	movlw	1
  6176  035B  0277               	subwf	??_IRrawToNEC+3,w
  6177  035C  305E               	movlw	94
  6178  035D  1903               	skipnz
  6179  035E  0276               	subwf	??_IRrawToNEC+2,w
  6180  035F  1C03               	skipc
  6181  0360  2B90               	goto	i1l1721
  6182  0361  084C               	movf	IRrawToNEC@StartBit,w
  6183  0362  00F4               	movwf	??_IRrawToNEC
  6184  0363  01F5               	clrf	??_IRrawToNEC+1
  6185  0364  35F4               	lslf	??_IRrawToNEC,f
  6186  0365  0DF5               	rlf	??_IRrawToNEC+1,f
  6187  0366  0874               	movf	??_IRrawToNEC,w
  6188  0367  0770               	addwf	IRrawToNEC@Raw,w
  6189  0368  0086               	movwf	6
  6190  0369  0875               	movf	??_IRrawToNEC+1,w
  6191  036A  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6192  036B  0087               	movwf	7
  6193  036C  3F40               	moviw [0]fsr1
  6194  036D  00F6               	movwf	??_IRrawToNEC+2
  6195  036E  3F41               	moviw [1]fsr1
  6196  036F  00F7               	movwf	??_IRrawToNEC+3
  6197  0370  3001               	movlw	1
  6198  0371  0277               	subwf	??_IRrawToNEC+3,w
  6199  0372  30AA               	movlw	170
  6200  0373  1903               	skipnz
  6201  0374  0276               	subwf	??_IRrawToNEC+2,w
  6202  0375  1803               	skipnc
  6203  0376  2B90               	goto	i1l1721
  6204                           
  6205                           ;IR.c: 218: {
  6206                           ;IR.c: 219: if(first)
  6207  0377  084A               	movf	IRrawToNEC@first,w
  6208  0378  1903               	btfsc	3,2
  6209  0379  2B8E               	goto	i1l1717
  6210                           
  6211                           ;IR.c: 220: {
  6212                           ;IR.c: 222: NECtemp <<= 1;
  6213  037A  3001               	movlw	1
  6214  037B                     u109_25:	
  6215  037B  35C5               	lslf	IRrawToNEC@NECtemp,f
  6216  037C  0DC6               	rlf	IRrawToNEC@NECtemp+1,f
  6217  037D  0DC7               	rlf	IRrawToNEC@NECtemp+2,f
  6218  037E  0DC8               	rlf	IRrawToNEC@NECtemp+3,f
  6219  037F  0B89               	decfsz	9,f
  6220  0380  2B7B               	goto	u109_25
  6221                           
  6222                           ;IR.c: 223: if(Invert)
  6223  0381  0873               	movf	IRrawToNEC@Invert,w
  6224  0382  1903               	btfsc	3,2
  6225  0383  2B8C               	goto	i1l1715
  6226                           
  6227                           ;IR.c: 224: {
  6228                           ;IR.c: 225: NECtemp++;
  6229  0384  3001               	movlw	1
  6230  0385  07C5               	addwf	IRrawToNEC@NECtemp,f
  6231  0386  3000               	movlw	0
  6232  0387  3DC6               	addwfc	IRrawToNEC@NECtemp+1,f
  6233  0388  3000               	movlw	0
  6234  0389  3DC7               	addwfc	IRrawToNEC@NECtemp+2,f
  6235  038A  3000               	movlw	0
  6236  038B  3DC8               	addwfc	IRrawToNEC@NECtemp+3,f
  6237  038C                     i1l1715:	
  6238                           
  6239                           ;IR.c: 226: }
  6240                           ;IR.c: 227: first = 0;
  6241  038C  01CA               	clrf	IRrawToNEC@first
  6242                           
  6243                           ;IR.c: 228: }
  6244  038D  2C7F               	goto	i1l1771
  6245  038E                     i1l1717:	
  6246                           
  6247                           ;IR.c: 229: else
  6248                           ;IR.c: 230: {
  6249                           ;IR.c: 232: return 0;
  6250  038E  3000               	movlw	0
  6251  038F  0008               	return
  6252  0390                     i1l1721:	
  6253                           ;IR.c: 233: }
  6254                           ;IR.c: 234: }
  6255                           
  6256                           
  6257                           ;IR.c: 235: else if(Raw[StartBit] == 0 && first == 1)
  6258  0390  084C               	movf	IRrawToNEC@StartBit,w
  6259  0391  00F4               	movwf	??_IRrawToNEC
  6260  0392  01F5               	clrf	??_IRrawToNEC+1
  6261  0393  35F4               	lslf	??_IRrawToNEC,f
  6262  0394  0DF5               	rlf	??_IRrawToNEC+1,f
  6263  0395  0874               	movf	??_IRrawToNEC,w
  6264  0396  0770               	addwf	IRrawToNEC@Raw,w
  6265  0397  0086               	movwf	6
  6266  0398  0875               	movf	??_IRrawToNEC+1,w
  6267  0399  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6268  039A  0087               	movwf	7
  6269  039B  0016               	moviw fsr1++
  6270  039C  0401               	iorwf	1,w
  6271  039D  1D03               	btfss	3,2
  6272  039E  2BAF               	goto	i1l1733
  6273  039F  034A               	decf	IRrawToNEC@first,w
  6274  03A0  1D03               	btfss	3,2
  6275  03A1  2BAF               	goto	i1l1733
  6276                           
  6277                           ;IR.c: 236: {
  6278                           ;IR.c: 241: *NEC = NECtemp;
  6279  03A2  0872               	movf	IRrawToNEC@NEC,w
  6280  03A3  0086               	movwf	6
  6281  03A4  0187               	clrf	7
  6282  03A5  0845               	movf	IRrawToNEC@NECtemp,w
  6283  03A6  3FC0               	movwi [0]fsr1
  6284  03A7  0846               	movf	IRrawToNEC@NECtemp+1,w
  6285  03A8  3FC1               	movwi [1]fsr1
  6286  03A9  0847               	movf	IRrawToNEC@NECtemp+2,w
  6287  03AA  3FC2               	movwi [2]fsr1
  6288  03AB  0848               	movf	IRrawToNEC@NECtemp+3,w
  6289  03AC  3FC3               	movwi [3]fsr1
  6290                           
  6291                           ;IR.c: 242: return 1;
  6292  03AD  3001               	movlw	1
  6293  03AE  0008               	return
  6294  03AF                     i1l1733:	
  6295                           ;IR.c: 243: }
  6296                           
  6297                           
  6298                           ;IR.c: 244: else if(Raw[StartBit] >= 9500 && Raw[StartBit] <= 10500)
  6299  03AF  084C               	movf	IRrawToNEC@StartBit,w
  6300  03B0  00F4               	movwf	??_IRrawToNEC
  6301  03B1  01F5               	clrf	??_IRrawToNEC+1
  6302  03B2  35F4               	lslf	??_IRrawToNEC,f
  6303  03B3  0DF5               	rlf	??_IRrawToNEC+1,f
  6304  03B4  0874               	movf	??_IRrawToNEC,w
  6305  03B5  0770               	addwf	IRrawToNEC@Raw,w
  6306  03B6  0086               	movwf	6
  6307  03B7  0875               	movf	??_IRrawToNEC+1,w
  6308  03B8  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6309  03B9  0087               	movwf	7
  6310  03BA  3F40               	moviw [0]fsr1
  6311  03BB  00F6               	movwf	??_IRrawToNEC+2
  6312  03BC  3F41               	moviw [1]fsr1
  6313  03BD  00F7               	movwf	??_IRrawToNEC+3
  6314  03BE  3025               	movlw	37
  6315  03BF  0277               	subwf	??_IRrawToNEC+3,w
  6316  03C0  301C               	movlw	28
  6317  03C1  1903               	skipnz
  6318  03C2  0276               	subwf	??_IRrawToNEC+2,w
  6319  03C3  1C03               	skipc
  6320  03C4  2BDE               	goto	i1l1739
  6321  03C5  084C               	movf	IRrawToNEC@StartBit,w
  6322  03C6  00F4               	movwf	??_IRrawToNEC
  6323  03C7  01F5               	clrf	??_IRrawToNEC+1
  6324  03C8  35F4               	lslf	??_IRrawToNEC,f
  6325  03C9  0DF5               	rlf	??_IRrawToNEC+1,f
  6326  03CA  0874               	movf	??_IRrawToNEC,w
  6327  03CB  0770               	addwf	IRrawToNEC@Raw,w
  6328  03CC  0086               	movwf	6
  6329  03CD  0875               	movf	??_IRrawToNEC+1,w
  6330  03CE  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6331  03CF  0087               	movwf	7
  6332  03D0  3F40               	moviw [0]fsr1
  6333  03D1  00F6               	movwf	??_IRrawToNEC+2
  6334  03D2  3F41               	moviw [1]fsr1
  6335  03D3  00F7               	movwf	??_IRrawToNEC+3
  6336  03D4  3029               	movlw	41
  6337  03D5  0277               	subwf	??_IRrawToNEC+3,w
  6338  03D6  3005               	movlw	5
  6339  03D7  1903               	skipnz
  6340  03D8  0276               	subwf	??_IRrawToNEC+2,w
  6341  03D9  1803               	skipnc
  6342  03DA  2BDE               	goto	i1l1739
  6343                           
  6344                           ;IR.c: 245: {
  6345                           ;IR.c: 247: Pause = 1;
  6346  03DB  01C9               	clrf	IRrawToNEC@Pause
  6347  03DC  0AC9               	incf	IRrawToNEC@Pause,f
  6348                           
  6349                           ;IR.c: 248: }
  6350  03DD  2C7F               	goto	i1l1771
  6351  03DE                     i1l1739:	
  6352                           
  6353                           ;IR.c: 249: else if(Pause == 1 && Raw[StartBit] >= 2000 && Raw[StartBit] <= 2500)
  6354  03DE  0349               	decf	IRrawToNEC@Pause,w
  6355  03DF  1D03               	btfss	3,2
  6356  03E0  2C0F               	goto	i1l1747
  6357  03E1  084C               	movf	IRrawToNEC@StartBit,w
  6358  03E2  00F4               	movwf	??_IRrawToNEC
  6359  03E3  01F5               	clrf	??_IRrawToNEC+1
  6360  03E4  35F4               	lslf	??_IRrawToNEC,f
  6361  03E5  0DF5               	rlf	??_IRrawToNEC+1,f
  6362  03E6  0874               	movf	??_IRrawToNEC,w
  6363  03E7  0770               	addwf	IRrawToNEC@Raw,w
  6364  03E8  0086               	movwf	6
  6365  03E9  0875               	movf	??_IRrawToNEC+1,w
  6366  03EA  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6367  03EB  0087               	movwf	7
  6368  03EC  3F40               	moviw [0]fsr1
  6369  03ED  00F6               	movwf	??_IRrawToNEC+2
  6370  03EE  3F41               	moviw [1]fsr1
  6371  03EF  00F7               	movwf	??_IRrawToNEC+3
  6372  03F0  3007               	movlw	7
  6373  03F1  0277               	subwf	??_IRrawToNEC+3,w
  6374  03F2  30D0               	movlw	208
  6375  03F3  1903               	skipnz
  6376  03F4  0276               	subwf	??_IRrawToNEC+2,w
  6377  03F5  1C03               	skipc
  6378  03F6  2C0F               	goto	i1l1747
  6379  03F7  084C               	movf	IRrawToNEC@StartBit,w
  6380  03F8  00F4               	movwf	??_IRrawToNEC
  6381  03F9  01F5               	clrf	??_IRrawToNEC+1
  6382  03FA  35F4               	lslf	??_IRrawToNEC,f
  6383  03FB  0DF5               	rlf	??_IRrawToNEC+1,f
  6384  03FC  0874               	movf	??_IRrawToNEC,w
  6385  03FD  0770               	addwf	IRrawToNEC@Raw,w
  6386  03FE  0086               	movwf	6
  6387  03FF  0875               	movf	??_IRrawToNEC+1,w
  6388  0400  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6389  0401  0087               	movwf	7
  6390  0402  3F40               	moviw [0]fsr1
  6391  0403  00F6               	movwf	??_IRrawToNEC+2
  6392  0404  3F41               	moviw [1]fsr1
  6393  0405  00F7               	movwf	??_IRrawToNEC+3
  6394  0406  3009               	movlw	9
  6395  0407  0277               	subwf	??_IRrawToNEC+3,w
  6396  0408  30C5               	movlw	197
  6397  0409  1903               	skipnz
  6398  040A  0276               	subwf	??_IRrawToNEC+2,w
  6399  040B  1803               	skipnc
  6400  040C  2C0F               	goto	i1l1747
  6401                           
  6402                           ;IR.c: 250: {
  6403                           ;IR.c: 252: Pause = 2;
  6404  040D  3002               	movlw	2
  6405  040E  2C40               	goto	L7
  6406  040F                     i1l1747:	
  6407                           ;IR.c: 253: }
  6408                           
  6409                           
  6410                           ;IR.c: 254: else if(Pause == 2 && Raw[StartBit] >= 462 && Raw[StartBit] <= 625)
  6411  040F  3002               	movlw	2
  6412  0410  0649               	xorwf	IRrawToNEC@Pause,w
  6413  0411  1D03               	btfss	3,2
  6414  0412  2C44               	goto	i1l1755
  6415  0413  084C               	movf	IRrawToNEC@StartBit,w
  6416  0414  00F4               	movwf	??_IRrawToNEC
  6417  0415  01F5               	clrf	??_IRrawToNEC+1
  6418  0416  35F4               	lslf	??_IRrawToNEC,f
  6419  0417  0DF5               	rlf	??_IRrawToNEC+1,f
  6420  0418  0874               	movf	??_IRrawToNEC,w
  6421  0419  0770               	addwf	IRrawToNEC@Raw,w
  6422  041A  0086               	movwf	6
  6423  041B  0875               	movf	??_IRrawToNEC+1,w
  6424  041C  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6425  041D  0087               	movwf	7
  6426  041E  3F40               	moviw [0]fsr1
  6427  041F  00F6               	movwf	??_IRrawToNEC+2
  6428  0420  3F41               	moviw [1]fsr1
  6429  0421  00F7               	movwf	??_IRrawToNEC+3
  6430  0422  3001               	movlw	1
  6431  0423  0277               	subwf	??_IRrawToNEC+3,w
  6432  0424  30CE               	movlw	206
  6433  0425  1903               	skipnz
  6434  0426  0276               	subwf	??_IRrawToNEC+2,w
  6435  0427  1C03               	skipc
  6436  0428  2C44               	goto	i1l1755
  6437  0429  084C               	movf	IRrawToNEC@StartBit,w
  6438  042A  00F4               	movwf	??_IRrawToNEC
  6439  042B  01F5               	clrf	??_IRrawToNEC+1
  6440  042C  35F4               	lslf	??_IRrawToNEC,f
  6441  042D  0DF5               	rlf	??_IRrawToNEC+1,f
  6442  042E  0874               	movf	??_IRrawToNEC,w
  6443  042F  0770               	addwf	IRrawToNEC@Raw,w
  6444  0430  0086               	movwf	6
  6445  0431  0875               	movf	??_IRrawToNEC+1,w
  6446  0432  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6447  0433  0087               	movwf	7
  6448  0434  3F40               	moviw [0]fsr1
  6449  0435  00F6               	movwf	??_IRrawToNEC+2
  6450  0436  3F41               	moviw [1]fsr1
  6451  0437  00F7               	movwf	??_IRrawToNEC+3
  6452  0438  3002               	movlw	2
  6453  0439  0277               	subwf	??_IRrawToNEC+3,w
  6454  043A  3072               	movlw	114
  6455  043B  1903               	skipnz
  6456  043C  0276               	subwf	??_IRrawToNEC+2,w
  6457  043D  1803               	skipnc
  6458  043E  2C44               	goto	i1l1755
  6459                           
  6460                           ;IR.c: 255: {
  6461                           ;IR.c: 258: Pause = 3;
  6462  043F  3003               	movlw	3
  6463  0440                     L7:	
  6464  0440  00F4               	movwf	??_IRrawToNEC
  6465  0441  0874               	movf	??_IRrawToNEC,w
  6466  0442  00C9               	movwf	IRrawToNEC@Pause
  6467                           
  6468                           ;IR.c: 259: }
  6469  0443  2C7F               	goto	i1l1771
  6470  0444                     i1l1755:	
  6471                           
  6472                           ;IR.c: 260: else if(Raw[StartBit] >= 22500 && Raw[StartBit] <= 25000)
  6473  0444  084C               	movf	IRrawToNEC@StartBit,w
  6474  0445  00F4               	movwf	??_IRrawToNEC
  6475  0446  01F5               	clrf	??_IRrawToNEC+1
  6476  0447  35F4               	lslf	??_IRrawToNEC,f
  6477  0448  0DF5               	rlf	??_IRrawToNEC+1,f
  6478  0449  0874               	movf	??_IRrawToNEC,w
  6479  044A  0770               	addwf	IRrawToNEC@Raw,w
  6480  044B  0086               	movwf	6
  6481  044C  0875               	movf	??_IRrawToNEC+1,w
  6482  044D  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6483  044E  0087               	movwf	7
  6484  044F  3F40               	moviw [0]fsr1
  6485  0450  00F6               	movwf	??_IRrawToNEC+2
  6486  0451  3F41               	moviw [1]fsr1
  6487  0452  00F7               	movwf	??_IRrawToNEC+3
  6488  0453  3057               	movlw	87
  6489  0454  0277               	subwf	??_IRrawToNEC+3,w
  6490  0455  30E4               	movlw	228
  6491  0456  1903               	skipnz
  6492  0457  0276               	subwf	??_IRrawToNEC+2,w
  6493  0458  1C03               	skipc
  6494  0459  2C7D               	goto	i1l1767
  6495  045A  084C               	movf	IRrawToNEC@StartBit,w
  6496  045B  00F4               	movwf	??_IRrawToNEC
  6497  045C  01F5               	clrf	??_IRrawToNEC+1
  6498  045D  35F4               	lslf	??_IRrawToNEC,f
  6499  045E  0DF5               	rlf	??_IRrawToNEC+1,f
  6500  045F  0874               	movf	??_IRrawToNEC,w
  6501  0460  0770               	addwf	IRrawToNEC@Raw,w
  6502  0461  0086               	movwf	6
  6503  0462  0875               	movf	??_IRrawToNEC+1,w
  6504  0463  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6505  0464  0087               	movwf	7
  6506  0465  3F40               	moviw [0]fsr1
  6507  0466  00F6               	movwf	??_IRrawToNEC+2
  6508  0467  3F41               	moviw [1]fsr1
  6509  0468  00F7               	movwf	??_IRrawToNEC+3
  6510  0469  3061               	movlw	97
  6511  046A  0277               	subwf	??_IRrawToNEC+3,w
  6512  046B  30A9               	movlw	169
  6513  046C  1903               	skipnz
  6514  046D  0276               	subwf	??_IRrawToNEC+2,w
  6515  046E  1803               	skipnc
  6516  046F  2C7D               	goto	i1l1767
  6517                           
  6518                           ;IR.c: 261: {
  6519                           ;IR.c: 263: *NEC = NECtemp;
  6520  0470  0872               	movf	IRrawToNEC@NEC,w
  6521  0471  0086               	movwf	6
  6522  0472  0187               	clrf	7
  6523  0473  0845               	movf	IRrawToNEC@NECtemp,w
  6524  0474  3FC0               	movwi [0]fsr1
  6525  0475  0846               	movf	IRrawToNEC@NECtemp+1,w
  6526  0476  3FC1               	movwi [1]fsr1
  6527  0477  0847               	movf	IRrawToNEC@NECtemp+2,w
  6528  0478  3FC2               	movwi [2]fsr1
  6529  0479  0848               	movf	IRrawToNEC@NECtemp+3,w
  6530  047A  3FC3               	movwi [3]fsr1
  6531                           
  6532                           ;IR.c: 264: return 2;
  6533  047B  3002               	movlw	2
  6534  047C  0008               	return
  6535  047D                     i1l1767:	
  6536                           ;IR.c: 265: }
  6537                           
  6538                           
  6539                           ;IR.c: 266: else
  6540                           ;IR.c: 267: {
  6541                           ;IR.c: 268: return 0;
  6542  047D  3000               	movlw	0
  6543  047E  0008               	return
  6544  047F                     i1l1771:	
  6545                           
  6546                           ;IR.c: 269: }
  6547                           ;IR.c: 270: StartBit++;
  6548  047F  3001               	movlw	1
  6549  0480  00F4               	movwf	??_IRrawToNEC
  6550  0481  0874               	movf	??_IRrawToNEC,w
  6551  0482  07CC               	addwf	IRrawToNEC@StartBit,f
  6552  0483  3001               	movlw	1
  6553  0484  00F4               	movwf	??_IRrawToNEC
  6554  0485  0874               	movf	??_IRrawToNEC,w
  6555  0486  07CB               	addwf	IRrawToNEC@i,f
  6556  0487  3048               	movlw	72
  6557  0488  024B               	subwf	IRrawToNEC@i,w
  6558  0489  1C03               	skipc
  6559  048A  2AF4               	goto	i1l1681
  6560  048B                     i1l1775:	
  6561                           
  6562                           ;IR.c: 271: }
  6563                           ;IR.c: 273: return 0;
  6564  048B  3000               	movlw	0
  6565  048C  0008               	return
  6566  048D                     __end_of_IRrawToNEC:	
  6567  007E                     btemp	set	126	;btemp
  6568  007E                     wtemp	set	126
  6569  007E                     wtemp0	set	126
  6570  0080                     wtemp1	set	128
  6571  0082                     wtemp2	set	130
  6572  0084                     wtemp3	set	132
  6573  0086                     wtemp4	set	134
  6574  0088                     wtemp5	set	136
  6575  007F                     wtemp6	set	127
  6576  007E                     ttemp	set	126
  6577  007E                     ttemp0	set	126
  6578  0081                     ttemp1	set	129
  6579  0084                     ttemp2	set	132
  6580  0087                     ttemp3	set	135
  6581  007F                     ttemp4	set	127
  6582  007E                     ltemp	set	126
  6583  007E                     ltemp0	set	126
  6584  0082                     ltemp1	set	130
  6585  0086                     ltemp2	set	134
  6586  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    9
    Data        16
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     22      63
    BANK1            80     10      22
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            32      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    UseIRCode@Code	PTR unsigned char  size(1) Largest target is 1
		 -> IR_New_Code(COMMON[1]), 

    IRrawToNEC@NEC	PTR unsigned long  size(1) Largest target is 4
		 -> IR_NEC(BANK0[4]), 

    IRrawToNEC@Raw	PTR unsigned int  size(2) Largest target is 144
		 -> IRRawCode(BIGRAM[144]), 

    SendRF@Code	PTR unsigned char  size(1) Largest target is 12
		 -> ChannelF(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_IRrawToNEC

Critical Paths under _main in BANK0

    _main->_UseIRCode
    _main->_delayUS
    _UseIRCode->_SendRF

Critical Paths under _isr in BANK0

    _isr->_IRrawToNEC

Critical Paths under _main in BANK1

    _main->_UseIRCode
    _UseIRCode->_SendRF

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1130
                                              8 BANK1      2     2      0
                _ConfigureOscillator
                            _InitApp
                          _UseIRCode
                            _delayUS
                            _init_IR
                        _init_Timers
 ---------------------------------------------------------------------------------
 (1) _init_Timers                                          0     0      0       0
                         _Timer1Init
                         _Timer2Init
                         _Timer4Init
                         _Timer6Init
 ---------------------------------------------------------------------------------
 (2) _Timer6Init                                           0     0      0       0
                          _Timer6OFF
 ---------------------------------------------------------------------------------
 (2) _Timer4Init                                           0     0      0       0
                          _Timer4OFF
 ---------------------------------------------------------------------------------
 (3) _Timer4OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           0     0      0       0
                          _Timer2OFF
 ---------------------------------------------------------------------------------
 (3) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_IR                                              0     0      0       0
                          _Enable_IR
                         _Timer1Init
 ---------------------------------------------------------------------------------
 (2) _Timer1Init                                           0     0      0       0
                       _Reset_Timer1
                        _Stop_Timer1
 ---------------------------------------------------------------------------------
 (3) _Stop_Timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Reset_Timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Enable_IR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4     266
                                             17 BANK0      5     1      4
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (1) _UseIRCode                                            7     3      4     793
                                             21 BANK0      1     1      0
                                              2 BANK1      6     2      4
                             _SendRF
                         _Set_Timer6
                          _Timer6OFF
                           _Timer6ON
                        _Timer6Reset
 ---------------------------------------------------------------------------------
 (2) _Timer6Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer6ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer6OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_Timer6                                           1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SendRF                                               6     4      2     574
                                             17 BANK0      4     2      2
                                              0 BANK1      2     2      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  9     9      0    1501
                                              8 BANK0      9     9      0
                         _IRrawToNEC
                         _Set_Timer4
                       _Start_Timer1
                           _Timer4ON
                        _Timer4Reset
                     i1_Reset_Timer1
                      i1_Stop_Timer1
                        i1_Timer2OFF
                        i1_Timer4OFF
                        i1_Timer6OFF
 ---------------------------------------------------------------------------------
 (5) i1_Timer6OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Timer4OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Timer2OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Stop_Timer1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Reset_Timer1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer4Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer4ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Start_Timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Set_Timer4                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRrawToNEC                                          17    13      4    1479
                                              0 COMMON     9     5      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UseIRCode
     _SendRF
       _Timer2ON
     _Set_Timer6
     _Timer6OFF
     _Timer6ON
     _Timer6Reset
   _delayUS
   _init_IR
     _Enable_IR
     _Timer1Init
       _Reset_Timer1
       _Stop_Timer1
   _init_Timers
     _Timer1Init
       _Reset_Timer1
       _Stop_Timer1
     _Timer2Init
       _Timer2OFF
     _Timer4Init
       _Timer4OFF
     _Timer6Init
       _Timer6OFF

 _isr (ROOT)
   _IRrawToNEC
   _Set_Timer4
   _Start_Timer1
   _Timer4ON
   _Timer4Reset
   i1_Reset_Timer1
   i1_Stop_Timer1
   i1_Timer2OFF
   i1_Timer4OFF
   i1_Timer6OFF

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      63       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     16      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      A      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      63      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Tue Mar 17 19:04:27 2015

                 __CFG_CP$OFF 0000                   __CFG_LVP$ON 0000                           l215 05C2  
                         l217 05E3                           l171 04A3                           l173 04D9  
                         l478 0558                           _PR2 001B                           _PR4 0416  
                         _PR6 041D                           _isr 0004                    _IRrawToNEC 021F  
                  _IRrawCount 0038                    _IRreceived 003F                  __CFG_BORV$LO 0000  
                         wreg 0009                          l2303 05EE                          l2313 0535  
                        l2323 055C                          l2245 0588                          l2247 05A5  
                        l2239 0586                          l2361 04D4                          l2259 05B7  
                        l2269 0635                          l2373 0506                          l2381 050E  
                        l2365 04F0                          l2383 0518                          ?_isr 0070  
                        _LATC 010E                          u1773 05DC                          i1l81 00C8  
                        _TMR2 001A                          _TMR4 0415                          _TMR6 041C  
               i1_Stop_Timer1 0768                  __CFG_WRT$OFF 0000                          _Sent 005E  
                        _main 048D                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf0 0000                          indf1 0001  
                        fsr1l 0006                          btemp 007E                    _RFsendCode 0020  
                  _RFsendFlag 007C                 __CFG_BOREN$ON 0000                          ltemp 007E  
                 _RFcodePlace 007B                          start 01E4                          ttemp 007E  
                        wtemp 007E                 __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000  
             __end_of_InitApp 062F                         ??_isr 004D             IRrawToNEC@NECtemp 0045  
                ?_init_Timers 0070               __end_of_Version 0709                         ?_main 0070  
               __CFG_WDTE$OFF 0000                         i1l110 0083                         i1l120 00DF  
                       i1l130 01CD                         i1l122 01AE                         i1l134 01DE  
                       i1l119 01DF                         _TMR1H 0017                         _TMR1L 0016  
                       _PORTC 000E                         u96_25 02B1           _ConfigureOscillator 062F  
             __end_of_delayUS 05F7                __CFG_FCMEN$OFF 0000                    SendRF@Code 00AC  
                _IRrawCodeNum 0079               __end_of_init_IR 0717                    SendRF@size 0056  
              ?i1_Stop_Timer1 0070                         main@i 00B5                         ltemp0 007E  
                       ltemp1 0082                         ltemp2 0086                         ltemp3 0080  
                       ttemp0 007E                         ttemp1 0081                         ttemp2 0084  
                       ttemp3 0087                         ttemp4 007F                         status 0003  
                       wtemp0 007E                         wtemp1 0080                         wtemp2 0082  
                       wtemp3 0084                         wtemp4 0086                         wtemp5 0088  
                       wtemp6 007F          ?_ConfigureOscillator 0070               __initialization 01E6  
                __end_of_main 0521                __CFG_LPBOR$OFF 0000                        ??_main 00B4  
          __size_of_Enable_IR 0004            SendRF@RepeatAmount 0057                __CFG_PLLEN$OFF 0000  
            __end_of_Timer2ON 0748              __end_of_Timer4ON 074D              __end_of_Timer6ON 0743  
                 ?_IRrawToNEC 0070                __CFG_ZCDDIS$ON 0000                        _ANSELC 018E  
                      _HFIOFS 04D0                        i1l2015 00AE                        i1l2115 01C8  
                      i1l2027 00BF                        i1l2029 00C0                        i1l2081 017B  
                      i1l2075 0172                        i1l2083 0180                        u104_25 032C  
                      i1l2093 01A0                        i1l1721 0390                        i1l1705 034B  
                      i1l1715 038C                        i1l2099 01A8                        i1l1733 03AF  
                      i1l1717 038E                        i1l1653 0292                        i1l1637 0233  
                      i1l1663 02B5                        i1l1647 0261                        i1l1681 02F4  
                      i1l1673 02E8                        i1l1657 029A                        i1l1755 0444  
                      i1l1747 040F                        i1l1739 03DE                        i1l1771 047F  
                      i1l1691 032A                        i1l1907 003E                        i1l1669 02E6  
                      i1l1767 047D                        i1l1775 048B                        i1l1699 033E  
                      i1l1949 0053                        i1l1975 006F                        i1l1967 0061  
                      i1l1997 0092                        i1l1989 0086                        i1l1999 0094  
                      u109_25 037B                        _IR_NEC 0041                    _Set_Timer4 074D  
                  _Set_Timer6 0732                     ??_InitApp 0056         ??_ConfigureOscillator 0056  
              __CFG_PWRTE$OFF 0000                 ??_Timer4Reset 0070                    _SleepTimer 0034  
                      _SendRF 056E                 ??_Timer6Reset 0056                    _Timer1Init 060B  
                  _Timer2Init 05F7                    _Timer4Init 0678                    _Timer6Init 066C  
              __CFG_STVREN$ON 0000                     ??_delayUS 005A            __size_of_UseIRCode 004D  
          __size_of_Timer2OFF 0006              ??i1_Reset_Timer1 0070            __size_of_Timer4OFF 0007  
          __size_of_Timer6OFF 0007                     ??_init_IR 0056            IRrawToNEC@StartBit 004C  
             ??i1_Stop_Timer1 0070                  _BlueLEDcount 005B                  ?i1_Timer2OFF 0070  
                ?i1_Timer4OFF 0070                  ?i1_Timer6OFF 0070       __end_of__initialization 021C  
           __end_of_Enable_IR 075E           __size_of_IRrawToNEC 026E                __pcstackCOMMON 0070  
                __pidataBANK0 0752                  __pidataBANK1 063C           __end_of_Timer4Reset 076E  
         __end_of_Timer6Reset 0768          __size_of_init_Timers 000C                 ?_Reset_Timer1 0070  
               ??_Stop_Timer1 0056                    __pbssBANK0 0020                   ?_Set_Timer4 0070  
                 ?_Set_Timer6 0070             __end_of_UseIRCode 056E             __end_of_Timer2OFF 0732  
           __end_of_Timer4OFF 0710             __end_of_Timer6OFF 071E                   ?_Timer1Init 0070  
                     ?_SendRF 0056                   ?_Timer2Init 0070                   ?_Timer4Init 0070  
                 ?_Timer6Init 0070                     ?_Timer2ON 0070                     ?_Timer4ON 0070  
                   ?_Timer6ON 0070                    __pmaintext 048D                    __pintentry 0004  
              ??_Reset_Timer1 0056                 UseIRCode@Code 005A                       _OSCSTAT 009A  
                     _IRfault 003E                       SendRF@i 00AD                       _InitApp 061D  
         __end_of_Stop_Timer1 0765                    ??_Timer2ON 0056                    ??_Timer4ON 0070  
                  ??_Timer6ON 0056                   _Timer4Reset 076B               __size_of_SendRF 004B  
                 _Timer6Reset 0765                       _Version 0700                Set_Timer4@time 0070  
              Set_Timer6@time 0056                       _delayUS 05B9                       __ptext1 0660  
                     __ptext2 066C                       __ptext3 0678                       __ptext4 0709  
                     __ptext5 05F7                       __ptext6 072C                       __ptext7 0710  
                     __ptext8 060B                       __ptext9 0762           __size_of_Set_Timer4 0005  
         __size_of_Set_Timer6 0006                     _T1CONbits 0018                       _init_IR 0710  
                ??_IRrawToNEC 0074                     _T2CONbits 001C                  __size_of_isr 01E0  
                   _T4CONbits 0417                     _IOCCFbits 0399                     _T6CONbits 041E  
                   _IOCCNbits 0398                     _IOCCPbits 0397           __size_of_Timer1Init 0012  
         __size_of_Timer2Init 0014           __size_of_Timer4Init 000C           __size_of_Timer6Init 000C  
                     clrloop0 0649          end_of_initialization 021C                       init_ram 0654  
                     initloop 0655          __size_ofi1_Timer2OFF 0006          __size_ofi1_Timer4OFF 0007  
        __size_ofi1_Timer6OFF 0007            __end_of_IRrawToNEC 048D                  __pstringtext 0700  
                   _IRRawCode 2160                 ?_Start_Timer1 0070              __CFG_FOSC$INTOSC 0000  
                   _TRISCbits 008E   __end_of_ConfigureOscillator 063C                   _Stop_Timer1 0762  
                   _RFcodeBit 007A                   _CCP1CONbits 0293                   _CCP2CONbits 029A  
        __end_of_Reset_Timer1 075A                     _Enable_IR 075A                __end_of_SendRF 05B9  
              ??_Start_Timer1 0070              IRrawToNEC@Invert 0073           start_initialization 01E6  
                 __end_of_isr 01E4         __end_ofi1_Stop_Timer1 076B                  ??_Set_Timer4 0070  
                ??_Set_Timer6 0056                     _Sendcount 0040                  ??_Timer1Init 0056  
                ??_Timer2Init 0056                     _UseIRCode 0521                  ??_Timer4Init 0056  
                   _Timer2OFF 072C                      ??_SendRF 0058                     _Timer4OFF 0709  
                ??_Timer6Init 0056                     _Timer6OFF 0717                    ?_Enable_IR 0070  
           __size_of_Timer2ON 0005             __size_of_Timer4ON 0005             __size_of_Timer6ON 0005  
                 __pdataBANK0 005B                   __pdataBANK1 00A0                 ??_init_Timers 0056  
          __end_of_Set_Timer4 0752            __end_of_Set_Timer6 0738                   __pbssBIGRAM 2160  
                 __pbssCOMMON 0079                     ___latbits 0001                 __pcstackBANK0 0045  
               __pcstackBANK1 00AC            __end_of_Timer1Init 061D            __end_of_Timer2Init 060B  
          __end_of_Timer4Init 0684            __end_of_Timer6Init 0678       __size_ofi1_Reset_Timer1 0004  
                    ?_InitApp 0070                    ?_UseIRCode 00AE                    ?_Timer2OFF 0070  
                  ?_Timer4OFF 0070                    ?_Timer6OFF 0070                  ?_Timer4Reset 0070  
                ?_Timer6Reset 0070                   IRrawToNEC@i 004B              __CFG_PPS1WAY$OFF 0000  
                UseIRCode@NEC 00AE                      ?_delayUS 0056                      ?_init_IR 0070  
               IRrawToNEC@NEC 0072                 IRrawToNEC@Raw 0070           __end_of_init_Timers 066C  
                   delayUS@US 0056         __size_of_Reset_Timer1 0004          __end_of_Start_Timer1 0771  
                   clear_ram0 0648                      _PIE1bits 0091                      _PIE2bits 0092  
                    _LEDsdone 005D                      _PIR1bits 0011                      _PIR2bits 0012  
                 ??_Enable_IR 0056                      _ChannelF 00A0                  _Reset_Timer1 0756  
                ?_Stop_Timer1 0070               IRrawToNEC@Pause 0049                 ??i1_Timer2OFF 0070  
               ??i1_Timer4OFF 0070                 ??i1_Timer6OFF 0070               IRrawToNEC@first 004A  
            __size_of_InitApp 0012                   ??_UseIRCode 00B2                   ??_Timer2OFF 0056  
                 ??_Timer4OFF 0056                   ??_Timer6OFF 0056                      _Timer2ON 0743  
                    _Timer4ON 0748                      _Timer6ON 073E                   _init_Timers 0660  
            __size_of_delayUS 003E              __size_of_init_IR 0007                 _TMR1_overflow 003A  
                    __ptext10 0756                      __ptext11 075A                      __ptext20 061D  
                    __ptext12 05B9                      __ptext21 062F                      __ptext13 0521  
                    __ptext30 076E                      __ptext14 0765                      __ptext31 074D  
                    __ptext23 071E                      __ptext15 073E                      __ptext32 021F  
                    __ptext24 0725                      __ptext16 0717                      __ptext25 0738  
                    __ptext17 0732                      __ptext26 0768                      __ptext18 056E  
                    __ptext27 075E                      __ptext19 0743                      __ptext28 076B  
                    __ptext29 0748                i1_Reset_Timer1 075E                 __size_of_main 0094  
                    delayUS@i 00AC                      delayUS@j 00B0                 _TMR4_overflow 003C  
__size_of_ConfigureOscillator 000D           __end_ofi1_Timer2OFF 073E           __end_ofi1_Timer4OFF 072C  
         __end_ofi1_Timer6OFF 0725          __size_of_Timer4Reset 0003          __size_of_Timer6Reset 0003  
                  _INTCONbits 000B        __end_ofi1_Reset_Timer1 0762         __size_of_Start_Timer1 0003  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                   _SLRCONCbits 030E  
                  _OSCCONbits 0099                   _IR_New_Code 007D        __size_ofi1_Stop_Timer1 0003  
                _Start_Timer1 076E               ?i1_Reset_Timer1 0070                   _VREGCONbits 0197  
                 i1_Timer2OFF 0738                   i1_Timer4OFF 0725                   i1_Timer6OFF 071E  
        __size_of_Stop_Timer1 0003  
