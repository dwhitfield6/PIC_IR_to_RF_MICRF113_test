

Microchip Technology PIC LITE Macro Assembler V1.34 build -361300703 
                                                                                               Wed Oct 21 15:28:14 2015

Microchip Technology Omniscient Code Generator (Lite mode) build 201502162209
     1                           	processor	16F1704
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	idataBANK1,global,class=CODE,delta=2
     6                           	psect	stringtext,global,reloc=256,class=STRCODE,delta=2
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     9                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    11                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    12                           	psect	clrtext,global,class=CODE,delta=2
    13                           	psect	inittext,global,class=CODE,delta=2
    14                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    16                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    17                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    18                           	psect	text1,local,class=CODE,merge=1,delta=2
    19                           	psect	text2,local,class=CODE,merge=1,delta=2
    20                           	psect	text3,local,class=CODE,merge=1,delta=2
    21                           	psect	text4,local,class=CODE,merge=1,delta=2
    22                           	psect	text5,local,class=CODE,merge=1,delta=2
    23                           	psect	text6,local,class=CODE,merge=1,delta=2
    24                           	psect	text7,local,class=CODE,merge=1,delta=2
    25                           	psect	text8,local,class=CODE,merge=1,delta=2
    26                           	psect	text9,local,class=CODE,merge=1,delta=2
    27                           	psect	text10,local,class=CODE,merge=1,delta=2
    28                           	psect	text11,local,class=CODE,merge=1,delta=2
    29                           	psect	text12,local,class=CODE,merge=1,delta=2
    30                           	psect	text13,local,class=CODE,merge=1,delta=2
    31                           	psect	text14,local,class=CODE,merge=1,delta=2
    32                           	psect	text15,local,class=CODE,merge=1,delta=2
    33                           	psect	text16,local,class=CODE,merge=1,delta=2
    34                           	psect	text17,local,class=CODE,merge=1,delta=2
    35                           	psect	text18,local,class=CODE,merge=1,delta=2
    36                           	psect	text19,local,class=CODE,merge=1,delta=2
    37                           	psect	text20,local,class=CODE,merge=1,delta=2
    38                           	psect	text21,local,class=CODE,merge=1,delta=2
    39                           	psect	intentry,global,class=CODE,delta=2
    40                           	psect	text23,local,class=CODE,merge=1,delta=2
    41                           	psect	text24,local,class=CODE,merge=1,delta=2
    42                           	psect	text25,local,class=CODE,merge=1,delta=2
    43                           	psect	text26,local,class=CODE,merge=1,delta=2
    44                           	psect	text27,local,class=CODE,merge=1,delta=2
    45                           	psect	text28,local,class=CODE,merge=1,delta=2
    46                           	psect	text29,local,class=CODE,merge=1,delta=2
    47                           	psect	text30,local,class=CODE,merge=1,delta=2
    48                           	psect	text31,local,class=CODE,merge=1,delta=2
    49                           	psect	text32,local,class=CODE,merge=1,delta=2
    50                           	dabs	1,0x320,16
    51                           	dabs	1,0x2A0,80
    52                           	dabs	1,0x240,48
    53                           	dabs	1,0x2160,0,_IRRawCode
    54                           	dabs	1,0x7E,2
    55  0000                     	;# 
    56  0001                     	;# 
    57  0002                     	;# 
    58  0003                     	;# 
    59  0004                     	;# 
    60  0005                     	;# 
    61  0006                     	;# 
    62  0007                     	;# 
    63  0008                     	;# 
    64  0009                     	;# 
    65  000A                     	;# 
    66  000B                     	;# 
    67  000C                     	;# 
    68  000E                     	;# 
    69  0011                     	;# 
    70  0012                     	;# 
    71  0013                     	;# 
    72  0015                     	;# 
    73  0016                     	;# 
    74  0016                     	;# 
    75  0017                     	;# 
    76  0018                     	;# 
    77  0019                     	;# 
    78  001A                     	;# 
    79  001B                     	;# 
    80  001C                     	;# 
    81  008C                     	;# 
    82  008E                     	;# 
    83  0091                     	;# 
    84  0092                     	;# 
    85  0093                     	;# 
    86  0095                     	;# 
    87  0096                     	;# 
    88  0097                     	;# 
    89  0098                     	;# 
    90  0099                     	;# 
    91  009A                     	;# 
    92  009B                     	;# 
    93  009B                     	;# 
    94  009C                     	;# 
    95  009D                     	;# 
    96  009E                     	;# 
    97  009F                     	;# 
    98  010C                     	;# 
    99  010E                     	;# 
   100  0111                     	;# 
   101  0112                     	;# 
   102  0113                     	;# 
   103  0114                     	;# 
   104  0115                     	;# 
   105  0116                     	;# 
   106  0117                     	;# 
   107  0118                     	;# 
   108  0119                     	;# 
   109  011C                     	;# 
   110  018C                     	;# 
   111  018E                     	;# 
   112  0191                     	;# 
   113  0191                     	;# 
   114  0192                     	;# 
   115  0193                     	;# 
   116  0193                     	;# 
   117  0194                     	;# 
   118  0195                     	;# 
   119  0196                     	;# 
   120  0197                     	;# 
   121  0199                     	;# 
   122  0199                     	;# 
   123  0199                     	;# 
   124  019A                     	;# 
   125  019A                     	;# 
   126  019A                     	;# 
   127  019B                     	;# 
   128  019B                     	;# 
   129  019B                     	;# 
   130  019B                     	;# 
   131  019B                     	;# 
   132  019C                     	;# 
   133  019C                     	;# 
   134  019C                     	;# 
   135  019D                     	;# 
   136  019D                     	;# 
   137  019D                     	;# 
   138  019E                     	;# 
   139  019E                     	;# 
   140  019E                     	;# 
   141  019F                     	;# 
   142  019F                     	;# 
   143  019F                     	;# 
   144  019F                     	;# 
   145  019F                     	;# 
   146  020C                     	;# 
   147  020E                     	;# 
   148  0211                     	;# 
   149  0211                     	;# 
   150  0212                     	;# 
   151  0212                     	;# 
   152  0213                     	;# 
   153  0213                     	;# 
   154  0214                     	;# 
   155  0214                     	;# 
   156  0215                     	;# 
   157  0215                     	;# 
   158  0215                     	;# 
   159  0215                     	;# 
   160  0216                     	;# 
   161  0216                     	;# 
   162  0217                     	;# 
   163  0217                     	;# 
   164  028C                     	;# 
   165  028E                     	;# 
   166  0291                     	;# 
   167  0291                     	;# 
   168  0292                     	;# 
   169  0293                     	;# 
   170  0293                     	;# 
   171  0298                     	;# 
   172  0298                     	;# 
   173  0299                     	;# 
   174  029A                     	;# 
   175  029A                     	;# 
   176  029E                     	;# 
   177  030C                     	;# 
   178  030E                     	;# 
   179  038C                     	;# 
   180  038E                     	;# 
   181  0391                     	;# 
   182  0392                     	;# 
   183  0393                     	;# 
   184  0397                     	;# 
   185  0398                     	;# 
   186  0399                     	;# 
   187  0415                     	;# 
   188  0416                     	;# 
   189  0417                     	;# 
   190  041C                     	;# 
   191  041D                     	;# 
   192  041E                     	;# 
   193  0511                     	;# 
   194  0515                     	;# 
   195  0617                     	;# 
   196  0618                     	;# 
   197  0619                     	;# 
   198  0619                     	;# 
   199  061A                     	;# 
   200  061B                     	;# 
   201  061C                     	;# 
   202  061C                     	;# 
   203  0691                     	;# 
   204  0692                     	;# 
   205  0693                     	;# 
   206  0694                     	;# 
   207  0695                     	;# 
   208  0696                     	;# 
   209  0697                     	;# 
   210  0698                     	;# 
   211  0699                     	;# 
   212  069A                     	;# 
   213  069B                     	;# 
   214  069C                     	;# 
   215  069D                     	;# 
   216  069E                     	;# 
   217  069F                     	;# 
   218  0E0F                     	;# 
   219  0E10                     	;# 
   220  0E11                     	;# 
   221  0E12                     	;# 
   222  0E13                     	;# 
   223  0E14                     	;# 
   224  0E15                     	;# 
   225  0E17                     	;# 
   226  0E20                     	;# 
   227  0E21                     	;# 
   228  0E22                     	;# 
   229  0E24                     	;# 
   230  0E25                     	;# 
   231  0E28                     	;# 
   232  0E29                     	;# 
   233  0E2A                     	;# 
   234  0E2B                     	;# 
   235  0E90                     	;# 
   236  0E91                     	;# 
   237  0E92                     	;# 
   238  0E94                     	;# 
   239  0E95                     	;# 
   240  0EA0                     	;# 
   241  0EA1                     	;# 
   242  0EA2                     	;# 
   243  0EA3                     	;# 
   244  0EA4                     	;# 
   245  0EA5                     	;# 
   246  0F0F                     	;# 
   247  0F10                     	;# 
   248  0F11                     	;# 
   249  0F12                     	;# 
   250  0F13                     	;# 
   251  0F14                     	;# 
   252  0F15                     	;# 
   253  0F16                     	;# 
   254  0F17                     	;# 
   255  0F18                     	;# 
   256  0F19                     	;# 
   257  0F1A                     	;# 
   258  0F1B                     	;# 
   259  0F1C                     	;# 
   260  0F1D                     	;# 
   261  0F1E                     	;# 
   262  0F1F                     	;# 
   263  0F20                     	;# 
   264  0F21                     	;# 
   265  0F22                     	;# 
   266  0F23                     	;# 
   267  0F24                     	;# 
   268  0F25                     	;# 
   269  0F26                     	;# 
   270  0F27                     	;# 
   271  0F28                     	;# 
   272  0F29                     	;# 
   273  0F2A                     	;# 
   274  0F2B                     	;# 
   275  0F2C                     	;# 
   276  0F2D                     	;# 
   277  0FE4                     	;# 
   278  0FE5                     	;# 
   279  0FE6                     	;# 
   280  0FE7                     	;# 
   281  0FE8                     	;# 
   282  0FE9                     	;# 
   283  0FEA                     	;# 
   284  0FEB                     	;# 
   285  0FED                     	;# 
   286  0FEE                     	;# 
   287  0FEF                     	;# 
   288  0000                     	;# 
   289  0001                     	;# 
   290  0002                     	;# 
   291  0003                     	;# 
   292  0004                     	;# 
   293  0005                     	;# 
   294  0006                     	;# 
   295  0007                     	;# 
   296  0008                     	;# 
   297  0009                     	;# 
   298  000A                     	;# 
   299  000B                     	;# 
   300  000C                     	;# 
   301  000E                     	;# 
   302  0011                     	;# 
   303  0012                     	;# 
   304  0013                     	;# 
   305  0015                     	;# 
   306  0016                     	;# 
   307  0016                     	;# 
   308  0017                     	;# 
   309  0018                     	;# 
   310  0019                     	;# 
   311  001A                     	;# 
   312  001B                     	;# 
   313  001C                     	;# 
   314  008C                     	;# 
   315  008E                     	;# 
   316  0091                     	;# 
   317  0092                     	;# 
   318  0093                     	;# 
   319  0095                     	;# 
   320  0096                     	;# 
   321  0097                     	;# 
   322  0098                     	;# 
   323  0099                     	;# 
   324  009A                     	;# 
   325  009B                     	;# 
   326  009B                     	;# 
   327  009C                     	;# 
   328  009D                     	;# 
   329  009E                     	;# 
   330  009F                     	;# 
   331  010C                     	;# 
   332  010E                     	;# 
   333  0111                     	;# 
   334  0112                     	;# 
   335  0113                     	;# 
   336  0114                     	;# 
   337  0115                     	;# 
   338  0116                     	;# 
   339  0117                     	;# 
   340  0118                     	;# 
   341  0119                     	;# 
   342  011C                     	;# 
   343  018C                     	;# 
   344  018E                     	;# 
   345  0191                     	;# 
   346  0191                     	;# 
   347  0192                     	;# 
   348  0193                     	;# 
   349  0193                     	;# 
   350  0194                     	;# 
   351  0195                     	;# 
   352  0196                     	;# 
   353  0197                     	;# 
   354  0199                     	;# 
   355  0199                     	;# 
   356  0199                     	;# 
   357  019A                     	;# 
   358  019A                     	;# 
   359  019A                     	;# 
   360  019B                     	;# 
   361  019B                     	;# 
   362  019B                     	;# 
   363  019B                     	;# 
   364  019B                     	;# 
   365  019C                     	;# 
   366  019C                     	;# 
   367  019C                     	;# 
   368  019D                     	;# 
   369  019D                     	;# 
   370  019D                     	;# 
   371  019E                     	;# 
   372  019E                     	;# 
   373  019E                     	;# 
   374  019F                     	;# 
   375  019F                     	;# 
   376  019F                     	;# 
   377  019F                     	;# 
   378  019F                     	;# 
   379  020C                     	;# 
   380  020E                     	;# 
   381  0211                     	;# 
   382  0211                     	;# 
   383  0212                     	;# 
   384  0212                     	;# 
   385  0213                     	;# 
   386  0213                     	;# 
   387  0214                     	;# 
   388  0214                     	;# 
   389  0215                     	;# 
   390  0215                     	;# 
   391  0215                     	;# 
   392  0215                     	;# 
   393  0216                     	;# 
   394  0216                     	;# 
   395  0217                     	;# 
   396  0217                     	;# 
   397  028C                     	;# 
   398  028E                     	;# 
   399  0291                     	;# 
   400  0291                     	;# 
   401  0292                     	;# 
   402  0293                     	;# 
   403  0293                     	;# 
   404  0298                     	;# 
   405  0298                     	;# 
   406  0299                     	;# 
   407  029A                     	;# 
   408  029A                     	;# 
   409  029E                     	;# 
   410  030C                     	;# 
   411  030E                     	;# 
   412  038C                     	;# 
   413  038E                     	;# 
   414  0391                     	;# 
   415  0392                     	;# 
   416  0393                     	;# 
   417  0397                     	;# 
   418  0398                     	;# 
   419  0399                     	;# 
   420  0415                     	;# 
   421  0416                     	;# 
   422  0417                     	;# 
   423  041C                     	;# 
   424  041D                     	;# 
   425  041E                     	;# 
   426  0511                     	;# 
   427  0515                     	;# 
   428  0617                     	;# 
   429  0618                     	;# 
   430  0619                     	;# 
   431  0619                     	;# 
   432  061A                     	;# 
   433  061B                     	;# 
   434  061C                     	;# 
   435  061C                     	;# 
   436  0691                     	;# 
   437  0692                     	;# 
   438  0693                     	;# 
   439  0694                     	;# 
   440  0695                     	;# 
   441  0696                     	;# 
   442  0697                     	;# 
   443  0698                     	;# 
   444  0699                     	;# 
   445  069A                     	;# 
   446  069B                     	;# 
   447  069C                     	;# 
   448  069D                     	;# 
   449  069E                     	;# 
   450  069F                     	;# 
   451  0E0F                     	;# 
   452  0E10                     	;# 
   453  0E11                     	;# 
   454  0E12                     	;# 
   455  0E13                     	;# 
   456  0E14                     	;# 
   457  0E15                     	;# 
   458  0E17                     	;# 
   459  0E20                     	;# 
   460  0E21                     	;# 
   461  0E22                     	;# 
   462  0E24                     	;# 
   463  0E25                     	;# 
   464  0E28                     	;# 
   465  0E29                     	;# 
   466  0E2A                     	;# 
   467  0E2B                     	;# 
   468  0E90                     	;# 
   469  0E91                     	;# 
   470  0E92                     	;# 
   471  0E94                     	;# 
   472  0E95                     	;# 
   473  0EA0                     	;# 
   474  0EA1                     	;# 
   475  0EA2                     	;# 
   476  0EA3                     	;# 
   477  0EA4                     	;# 
   478  0EA5                     	;# 
   479  0F0F                     	;# 
   480  0F10                     	;# 
   481  0F11                     	;# 
   482  0F12                     	;# 
   483  0F13                     	;# 
   484  0F14                     	;# 
   485  0F15                     	;# 
   486  0F16                     	;# 
   487  0F17                     	;# 
   488  0F18                     	;# 
   489  0F19                     	;# 
   490  0F1A                     	;# 
   491  0F1B                     	;# 
   492  0F1C                     	;# 
   493  0F1D                     	;# 
   494  0F1E                     	;# 
   495  0F1F                     	;# 
   496  0F20                     	;# 
   497  0F21                     	;# 
   498  0F22                     	;# 
   499  0F23                     	;# 
   500  0F24                     	;# 
   501  0F25                     	;# 
   502  0F26                     	;# 
   503  0F27                     	;# 
   504  0F28                     	;# 
   505  0F29                     	;# 
   506  0F2A                     	;# 
   507  0F2B                     	;# 
   508  0F2C                     	;# 
   509  0F2D                     	;# 
   510  0FE4                     	;# 
   511  0FE5                     	;# 
   512  0FE6                     	;# 
   513  0FE7                     	;# 
   514  0FE8                     	;# 
   515  0FE9                     	;# 
   516  0FEA                     	;# 
   517  0FEB                     	;# 
   518  0FED                     	;# 
   519  0FEE                     	;# 
   520  0FEF                     	;# 
   521  0000                     	;# 
   522  0001                     	;# 
   523  0002                     	;# 
   524  0003                     	;# 
   525  0004                     	;# 
   526  0005                     	;# 
   527  0006                     	;# 
   528  0007                     	;# 
   529  0008                     	;# 
   530  0009                     	;# 
   531  000A                     	;# 
   532  000B                     	;# 
   533  000C                     	;# 
   534  000E                     	;# 
   535  0011                     	;# 
   536  0012                     	;# 
   537  0013                     	;# 
   538  0015                     	;# 
   539  0016                     	;# 
   540  0016                     	;# 
   541  0017                     	;# 
   542  0018                     	;# 
   543  0019                     	;# 
   544  001A                     	;# 
   545  001B                     	;# 
   546  001C                     	;# 
   547  008C                     	;# 
   548  008E                     	;# 
   549  0091                     	;# 
   550  0092                     	;# 
   551  0093                     	;# 
   552  0095                     	;# 
   553  0096                     	;# 
   554  0097                     	;# 
   555  0098                     	;# 
   556  0099                     	;# 
   557  009A                     	;# 
   558  009B                     	;# 
   559  009B                     	;# 
   560  009C                     	;# 
   561  009D                     	;# 
   562  009E                     	;# 
   563  009F                     	;# 
   564  010C                     	;# 
   565  010E                     	;# 
   566  0111                     	;# 
   567  0112                     	;# 
   568  0113                     	;# 
   569  0114                     	;# 
   570  0115                     	;# 
   571  0116                     	;# 
   572  0117                     	;# 
   573  0118                     	;# 
   574  0119                     	;# 
   575  011C                     	;# 
   576  018C                     	;# 
   577  018E                     	;# 
   578  0191                     	;# 
   579  0191                     	;# 
   580  0192                     	;# 
   581  0193                     	;# 
   582  0193                     	;# 
   583  0194                     	;# 
   584  0195                     	;# 
   585  0196                     	;# 
   586  0197                     	;# 
   587  0199                     	;# 
   588  0199                     	;# 
   589  0199                     	;# 
   590  019A                     	;# 
   591  019A                     	;# 
   592  019A                     	;# 
   593  019B                     	;# 
   594  019B                     	;# 
   595  019B                     	;# 
   596  019B                     	;# 
   597  019B                     	;# 
   598  019C                     	;# 
   599  019C                     	;# 
   600  019C                     	;# 
   601  019D                     	;# 
   602  019D                     	;# 
   603  019D                     	;# 
   604  019E                     	;# 
   605  019E                     	;# 
   606  019E                     	;# 
   607  019F                     	;# 
   608  019F                     	;# 
   609  019F                     	;# 
   610  019F                     	;# 
   611  019F                     	;# 
   612  020C                     	;# 
   613  020E                     	;# 
   614  0211                     	;# 
   615  0211                     	;# 
   616  0212                     	;# 
   617  0212                     	;# 
   618  0213                     	;# 
   619  0213                     	;# 
   620  0214                     	;# 
   621  0214                     	;# 
   622  0215                     	;# 
   623  0215                     	;# 
   624  0215                     	;# 
   625  0215                     	;# 
   626  0216                     	;# 
   627  0216                     	;# 
   628  0217                     	;# 
   629  0217                     	;# 
   630  028C                     	;# 
   631  028E                     	;# 
   632  0291                     	;# 
   633  0291                     	;# 
   634  0292                     	;# 
   635  0293                     	;# 
   636  0293                     	;# 
   637  0298                     	;# 
   638  0298                     	;# 
   639  0299                     	;# 
   640  029A                     	;# 
   641  029A                     	;# 
   642  029E                     	;# 
   643  030C                     	;# 
   644  030E                     	;# 
   645  038C                     	;# 
   646  038E                     	;# 
   647  0391                     	;# 
   648  0392                     	;# 
   649  0393                     	;# 
   650  0397                     	;# 
   651  0398                     	;# 
   652  0399                     	;# 
   653  0415                     	;# 
   654  0416                     	;# 
   655  0417                     	;# 
   656  041C                     	;# 
   657  041D                     	;# 
   658  041E                     	;# 
   659  0511                     	;# 
   660  0515                     	;# 
   661  0617                     	;# 
   662  0618                     	;# 
   663  0619                     	;# 
   664  0619                     	;# 
   665  061A                     	;# 
   666  061B                     	;# 
   667  061C                     	;# 
   668  061C                     	;# 
   669  0691                     	;# 
   670  0692                     	;# 
   671  0693                     	;# 
   672  0694                     	;# 
   673  0695                     	;# 
   674  0696                     	;# 
   675  0697                     	;# 
   676  0698                     	;# 
   677  0699                     	;# 
   678  069A                     	;# 
   679  069B                     	;# 
   680  069C                     	;# 
   681  069D                     	;# 
   682  069E                     	;# 
   683  069F                     	;# 
   684  0E0F                     	;# 
   685  0E10                     	;# 
   686  0E11                     	;# 
   687  0E12                     	;# 
   688  0E13                     	;# 
   689  0E14                     	;# 
   690  0E15                     	;# 
   691  0E17                     	;# 
   692  0E20                     	;# 
   693  0E21                     	;# 
   694  0E22                     	;# 
   695  0E24                     	;# 
   696  0E25                     	;# 
   697  0E28                     	;# 
   698  0E29                     	;# 
   699  0E2A                     	;# 
   700  0E2B                     	;# 
   701  0E90                     	;# 
   702  0E91                     	;# 
   703  0E92                     	;# 
   704  0E94                     	;# 
   705  0E95                     	;# 
   706  0EA0                     	;# 
   707  0EA1                     	;# 
   708  0EA2                     	;# 
   709  0EA3                     	;# 
   710  0EA4                     	;# 
   711  0EA5                     	;# 
   712  0F0F                     	;# 
   713  0F10                     	;# 
   714  0F11                     	;# 
   715  0F12                     	;# 
   716  0F13                     	;# 
   717  0F14                     	;# 
   718  0F15                     	;# 
   719  0F16                     	;# 
   720  0F17                     	;# 
   721  0F18                     	;# 
   722  0F19                     	;# 
   723  0F1A                     	;# 
   724  0F1B                     	;# 
   725  0F1C                     	;# 
   726  0F1D                     	;# 
   727  0F1E                     	;# 
   728  0F1F                     	;# 
   729  0F20                     	;# 
   730  0F21                     	;# 
   731  0F22                     	;# 
   732  0F23                     	;# 
   733  0F24                     	;# 
   734  0F25                     	;# 
   735  0F26                     	;# 
   736  0F27                     	;# 
   737  0F28                     	;# 
   738  0F29                     	;# 
   739  0F2A                     	;# 
   740  0F2B                     	;# 
   741  0F2C                     	;# 
   742  0F2D                     	;# 
   743  0FE4                     	;# 
   744  0FE5                     	;# 
   745  0FE6                     	;# 
   746  0FE7                     	;# 
   747  0FE8                     	;# 
   748  0FE9                     	;# 
   749  0FEA                     	;# 
   750  0FEB                     	;# 
   751  0FED                     	;# 
   752  0FEE                     	;# 
   753  0FEF                     	;# 
   754  0000                     	;# 
   755  0001                     	;# 
   756  0002                     	;# 
   757  0003                     	;# 
   758  0004                     	;# 
   759  0005                     	;# 
   760  0006                     	;# 
   761  0007                     	;# 
   762  0008                     	;# 
   763  0009                     	;# 
   764  000A                     	;# 
   765  000B                     	;# 
   766  000C                     	;# 
   767  000E                     	;# 
   768  0011                     	;# 
   769  0012                     	;# 
   770  0013                     	;# 
   771  0015                     	;# 
   772  0016                     	;# 
   773  0016                     	;# 
   774  0017                     	;# 
   775  0018                     	;# 
   776  0019                     	;# 
   777  001A                     	;# 
   778  001B                     	;# 
   779  001C                     	;# 
   780  008C                     	;# 
   781  008E                     	;# 
   782  0091                     	;# 
   783  0092                     	;# 
   784  0093                     	;# 
   785  0095                     	;# 
   786  0096                     	;# 
   787  0097                     	;# 
   788  0098                     	;# 
   789  0099                     	;# 
   790  009A                     	;# 
   791  009B                     	;# 
   792  009B                     	;# 
   793  009C                     	;# 
   794  009D                     	;# 
   795  009E                     	;# 
   796  009F                     	;# 
   797  010C                     	;# 
   798  010E                     	;# 
   799  0111                     	;# 
   800  0112                     	;# 
   801  0113                     	;# 
   802  0114                     	;# 
   803  0115                     	;# 
   804  0116                     	;# 
   805  0117                     	;# 
   806  0118                     	;# 
   807  0119                     	;# 
   808  011C                     	;# 
   809  018C                     	;# 
   810  018E                     	;# 
   811  0191                     	;# 
   812  0191                     	;# 
   813  0192                     	;# 
   814  0193                     	;# 
   815  0193                     	;# 
   816  0194                     	;# 
   817  0195                     	;# 
   818  0196                     	;# 
   819  0197                     	;# 
   820  0199                     	;# 
   821  0199                     	;# 
   822  0199                     	;# 
   823  019A                     	;# 
   824  019A                     	;# 
   825  019A                     	;# 
   826  019B                     	;# 
   827  019B                     	;# 
   828  019B                     	;# 
   829  019B                     	;# 
   830  019B                     	;# 
   831  019C                     	;# 
   832  019C                     	;# 
   833  019C                     	;# 
   834  019D                     	;# 
   835  019D                     	;# 
   836  019D                     	;# 
   837  019E                     	;# 
   838  019E                     	;# 
   839  019E                     	;# 
   840  019F                     	;# 
   841  019F                     	;# 
   842  019F                     	;# 
   843  019F                     	;# 
   844  019F                     	;# 
   845  020C                     	;# 
   846  020E                     	;# 
   847  0211                     	;# 
   848  0211                     	;# 
   849  0212                     	;# 
   850  0212                     	;# 
   851  0213                     	;# 
   852  0213                     	;# 
   853  0214                     	;# 
   854  0214                     	;# 
   855  0215                     	;# 
   856  0215                     	;# 
   857  0215                     	;# 
   858  0215                     	;# 
   859  0216                     	;# 
   860  0216                     	;# 
   861  0217                     	;# 
   862  0217                     	;# 
   863  028C                     	;# 
   864  028E                     	;# 
   865  0291                     	;# 
   866  0291                     	;# 
   867  0292                     	;# 
   868  0293                     	;# 
   869  0293                     	;# 
   870  0298                     	;# 
   871  0298                     	;# 
   872  0299                     	;# 
   873  029A                     	;# 
   874  029A                     	;# 
   875  029E                     	;# 
   876  030C                     	;# 
   877  030E                     	;# 
   878  038C                     	;# 
   879  038E                     	;# 
   880  0391                     	;# 
   881  0392                     	;# 
   882  0393                     	;# 
   883  0397                     	;# 
   884  0398                     	;# 
   885  0399                     	;# 
   886  0415                     	;# 
   887  0416                     	;# 
   888  0417                     	;# 
   889  041C                     	;# 
   890  041D                     	;# 
   891  041E                     	;# 
   892  0511                     	;# 
   893  0515                     	;# 
   894  0617                     	;# 
   895  0618                     	;# 
   896  0619                     	;# 
   897  0619                     	;# 
   898  061A                     	;# 
   899  061B                     	;# 
   900  061C                     	;# 
   901  061C                     	;# 
   902  0691                     	;# 
   903  0692                     	;# 
   904  0693                     	;# 
   905  0694                     	;# 
   906  0695                     	;# 
   907  0696                     	;# 
   908  0697                     	;# 
   909  0698                     	;# 
   910  0699                     	;# 
   911  069A                     	;# 
   912  069B                     	;# 
   913  069C                     	;# 
   914  069D                     	;# 
   915  069E                     	;# 
   916  069F                     	;# 
   917  0E0F                     	;# 
   918  0E10                     	;# 
   919  0E11                     	;# 
   920  0E12                     	;# 
   921  0E13                     	;# 
   922  0E14                     	;# 
   923  0E15                     	;# 
   924  0E17                     	;# 
   925  0E20                     	;# 
   926  0E21                     	;# 
   927  0E22                     	;# 
   928  0E24                     	;# 
   929  0E25                     	;# 
   930  0E28                     	;# 
   931  0E29                     	;# 
   932  0E2A                     	;# 
   933  0E2B                     	;# 
   934  0E90                     	;# 
   935  0E91                     	;# 
   936  0E92                     	;# 
   937  0E94                     	;# 
   938  0E95                     	;# 
   939  0EA0                     	;# 
   940  0EA1                     	;# 
   941  0EA2                     	;# 
   942  0EA3                     	;# 
   943  0EA4                     	;# 
   944  0EA5                     	;# 
   945  0F0F                     	;# 
   946  0F10                     	;# 
   947  0F11                     	;# 
   948  0F12                     	;# 
   949  0F13                     	;# 
   950  0F14                     	;# 
   951  0F15                     	;# 
   952  0F16                     	;# 
   953  0F17                     	;# 
   954  0F18                     	;# 
   955  0F19                     	;# 
   956  0F1A                     	;# 
   957  0F1B                     	;# 
   958  0F1C                     	;# 
   959  0F1D                     	;# 
   960  0F1E                     	;# 
   961  0F1F                     	;# 
   962  0F20                     	;# 
   963  0F21                     	;# 
   964  0F22                     	;# 
   965  0F23                     	;# 
   966  0F24                     	;# 
   967  0F25                     	;# 
   968  0F26                     	;# 
   969  0F27                     	;# 
   970  0F28                     	;# 
   971  0F29                     	;# 
   972  0F2A                     	;# 
   973  0F2B                     	;# 
   974  0F2C                     	;# 
   975  0F2D                     	;# 
   976  0FE4                     	;# 
   977  0FE5                     	;# 
   978  0FE6                     	;# 
   979  0FE7                     	;# 
   980  0FE8                     	;# 
   981  0FE9                     	;# 
   982  0FEA                     	;# 
   983  0FEB                     	;# 
   984  0FED                     	;# 
   985  0FEE                     	;# 
   986  0FEF                     	;# 
   987  0000                     	;# 
   988  0001                     	;# 
   989  0002                     	;# 
   990  0003                     	;# 
   991  0004                     	;# 
   992  0005                     	;# 
   993  0006                     	;# 
   994  0007                     	;# 
   995  0008                     	;# 
   996  0009                     	;# 
   997  000A                     	;# 
   998  000B                     	;# 
   999  000C                     	;# 
  1000  000E                     	;# 
  1001  0011                     	;# 
  1002  0012                     	;# 
  1003  0013                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001B                     	;# 
  1012  001C                     	;# 
  1013  008C                     	;# 
  1014  008E                     	;# 
  1015  0091                     	;# 
  1016  0092                     	;# 
  1017  0093                     	;# 
  1018  0095                     	;# 
  1019  0096                     	;# 
  1020  0097                     	;# 
  1021  0098                     	;# 
  1022  0099                     	;# 
  1023  009A                     	;# 
  1024  009B                     	;# 
  1025  009B                     	;# 
  1026  009C                     	;# 
  1027  009D                     	;# 
  1028  009E                     	;# 
  1029  009F                     	;# 
  1030  010C                     	;# 
  1031  010E                     	;# 
  1032  0111                     	;# 
  1033  0112                     	;# 
  1034  0113                     	;# 
  1035  0114                     	;# 
  1036  0115                     	;# 
  1037  0116                     	;# 
  1038  0117                     	;# 
  1039  0118                     	;# 
  1040  0119                     	;# 
  1041  011C                     	;# 
  1042  018C                     	;# 
  1043  018E                     	;# 
  1044  0191                     	;# 
  1045  0191                     	;# 
  1046  0192                     	;# 
  1047  0193                     	;# 
  1048  0193                     	;# 
  1049  0194                     	;# 
  1050  0195                     	;# 
  1051  0196                     	;# 
  1052  0197                     	;# 
  1053  0199                     	;# 
  1054  0199                     	;# 
  1055  0199                     	;# 
  1056  019A                     	;# 
  1057  019A                     	;# 
  1058  019A                     	;# 
  1059  019B                     	;# 
  1060  019B                     	;# 
  1061  019B                     	;# 
  1062  019B                     	;# 
  1063  019B                     	;# 
  1064  019C                     	;# 
  1065  019C                     	;# 
  1066  019C                     	;# 
  1067  019D                     	;# 
  1068  019D                     	;# 
  1069  019D                     	;# 
  1070  019E                     	;# 
  1071  019E                     	;# 
  1072  019E                     	;# 
  1073  019F                     	;# 
  1074  019F                     	;# 
  1075  019F                     	;# 
  1076  019F                     	;# 
  1077  019F                     	;# 
  1078  020C                     	;# 
  1079  020E                     	;# 
  1080  0211                     	;# 
  1081  0211                     	;# 
  1082  0212                     	;# 
  1083  0212                     	;# 
  1084  0213                     	;# 
  1085  0213                     	;# 
  1086  0214                     	;# 
  1087  0214                     	;# 
  1088  0215                     	;# 
  1089  0215                     	;# 
  1090  0215                     	;# 
  1091  0215                     	;# 
  1092  0216                     	;# 
  1093  0216                     	;# 
  1094  0217                     	;# 
  1095  0217                     	;# 
  1096  028C                     	;# 
  1097  028E                     	;# 
  1098  0291                     	;# 
  1099  0291                     	;# 
  1100  0292                     	;# 
  1101  0293                     	;# 
  1102  0293                     	;# 
  1103  0298                     	;# 
  1104  0298                     	;# 
  1105  0299                     	;# 
  1106  029A                     	;# 
  1107  029A                     	;# 
  1108  029E                     	;# 
  1109  030C                     	;# 
  1110  030E                     	;# 
  1111  038C                     	;# 
  1112  038E                     	;# 
  1113  0391                     	;# 
  1114  0392                     	;# 
  1115  0393                     	;# 
  1116  0397                     	;# 
  1117  0398                     	;# 
  1118  0399                     	;# 
  1119  0415                     	;# 
  1120  0416                     	;# 
  1121  0417                     	;# 
  1122  041C                     	;# 
  1123  041D                     	;# 
  1124  041E                     	;# 
  1125  0511                     	;# 
  1126  0515                     	;# 
  1127  0617                     	;# 
  1128  0618                     	;# 
  1129  0619                     	;# 
  1130  0619                     	;# 
  1131  061A                     	;# 
  1132  061B                     	;# 
  1133  061C                     	;# 
  1134  061C                     	;# 
  1135  0691                     	;# 
  1136  0692                     	;# 
  1137  0693                     	;# 
  1138  0694                     	;# 
  1139  0695                     	;# 
  1140  0696                     	;# 
  1141  0697                     	;# 
  1142  0698                     	;# 
  1143  0699                     	;# 
  1144  069A                     	;# 
  1145  069B                     	;# 
  1146  069C                     	;# 
  1147  069D                     	;# 
  1148  069E                     	;# 
  1149  069F                     	;# 
  1150  0E0F                     	;# 
  1151  0E10                     	;# 
  1152  0E11                     	;# 
  1153  0E12                     	;# 
  1154  0E13                     	;# 
  1155  0E14                     	;# 
  1156  0E15                     	;# 
  1157  0E17                     	;# 
  1158  0E20                     	;# 
  1159  0E21                     	;# 
  1160  0E22                     	;# 
  1161  0E24                     	;# 
  1162  0E25                     	;# 
  1163  0E28                     	;# 
  1164  0E29                     	;# 
  1165  0E2A                     	;# 
  1166  0E2B                     	;# 
  1167  0E90                     	;# 
  1168  0E91                     	;# 
  1169  0E92                     	;# 
  1170  0E94                     	;# 
  1171  0E95                     	;# 
  1172  0EA0                     	;# 
  1173  0EA1                     	;# 
  1174  0EA2                     	;# 
  1175  0EA3                     	;# 
  1176  0EA4                     	;# 
  1177  0EA5                     	;# 
  1178  0F0F                     	;# 
  1179  0F10                     	;# 
  1180  0F11                     	;# 
  1181  0F12                     	;# 
  1182  0F13                     	;# 
  1183  0F14                     	;# 
  1184  0F15                     	;# 
  1185  0F16                     	;# 
  1186  0F17                     	;# 
  1187  0F18                     	;# 
  1188  0F19                     	;# 
  1189  0F1A                     	;# 
  1190  0F1B                     	;# 
  1191  0F1C                     	;# 
  1192  0F1D                     	;# 
  1193  0F1E                     	;# 
  1194  0F1F                     	;# 
  1195  0F20                     	;# 
  1196  0F21                     	;# 
  1197  0F22                     	;# 
  1198  0F23                     	;# 
  1199  0F24                     	;# 
  1200  0F25                     	;# 
  1201  0F26                     	;# 
  1202  0F27                     	;# 
  1203  0F28                     	;# 
  1204  0F29                     	;# 
  1205  0F2A                     	;# 
  1206  0F2B                     	;# 
  1207  0F2C                     	;# 
  1208  0F2D                     	;# 
  1209  0FE4                     	;# 
  1210  0FE5                     	;# 
  1211  0FE6                     	;# 
  1212  0FE7                     	;# 
  1213  0FE8                     	;# 
  1214  0FE9                     	;# 
  1215  0FEA                     	;# 
  1216  0FEB                     	;# 
  1217  0FED                     	;# 
  1218  0FEE                     	;# 
  1219  0FEF                     	;# 
  1220  0000                     	;# 
  1221  0001                     	;# 
  1222  0002                     	;# 
  1223  0003                     	;# 
  1224  0004                     	;# 
  1225  0005                     	;# 
  1226  0006                     	;# 
  1227  0007                     	;# 
  1228  0008                     	;# 
  1229  0009                     	;# 
  1230  000A                     	;# 
  1231  000B                     	;# 
  1232  000C                     	;# 
  1233  000E                     	;# 
  1234  0011                     	;# 
  1235  0012                     	;# 
  1236  0013                     	;# 
  1237  0015                     	;# 
  1238  0016                     	;# 
  1239  0016                     	;# 
  1240  0017                     	;# 
  1241  0018                     	;# 
  1242  0019                     	;# 
  1243  001A                     	;# 
  1244  001B                     	;# 
  1245  001C                     	;# 
  1246  008C                     	;# 
  1247  008E                     	;# 
  1248  0091                     	;# 
  1249  0092                     	;# 
  1250  0093                     	;# 
  1251  0095                     	;# 
  1252  0096                     	;# 
  1253  0097                     	;# 
  1254  0098                     	;# 
  1255  0099                     	;# 
  1256  009A                     	;# 
  1257  009B                     	;# 
  1258  009B                     	;# 
  1259  009C                     	;# 
  1260  009D                     	;# 
  1261  009E                     	;# 
  1262  009F                     	;# 
  1263  010C                     	;# 
  1264  010E                     	;# 
  1265  0111                     	;# 
  1266  0112                     	;# 
  1267  0113                     	;# 
  1268  0114                     	;# 
  1269  0115                     	;# 
  1270  0116                     	;# 
  1271  0117                     	;# 
  1272  0118                     	;# 
  1273  0119                     	;# 
  1274  011C                     	;# 
  1275  018C                     	;# 
  1276  018E                     	;# 
  1277  0191                     	;# 
  1278  0191                     	;# 
  1279  0192                     	;# 
  1280  0193                     	;# 
  1281  0193                     	;# 
  1282  0194                     	;# 
  1283  0195                     	;# 
  1284  0196                     	;# 
  1285  0197                     	;# 
  1286  0199                     	;# 
  1287  0199                     	;# 
  1288  0199                     	;# 
  1289  019A                     	;# 
  1290  019A                     	;# 
  1291  019A                     	;# 
  1292  019B                     	;# 
  1293  019B                     	;# 
  1294  019B                     	;# 
  1295  019B                     	;# 
  1296  019B                     	;# 
  1297  019C                     	;# 
  1298  019C                     	;# 
  1299  019C                     	;# 
  1300  019D                     	;# 
  1301  019D                     	;# 
  1302  019D                     	;# 
  1303  019E                     	;# 
  1304  019E                     	;# 
  1305  019E                     	;# 
  1306  019F                     	;# 
  1307  019F                     	;# 
  1308  019F                     	;# 
  1309  019F                     	;# 
  1310  019F                     	;# 
  1311  020C                     	;# 
  1312  020E                     	;# 
  1313  0211                     	;# 
  1314  0211                     	;# 
  1315  0212                     	;# 
  1316  0212                     	;# 
  1317  0213                     	;# 
  1318  0213                     	;# 
  1319  0214                     	;# 
  1320  0214                     	;# 
  1321  0215                     	;# 
  1322  0215                     	;# 
  1323  0215                     	;# 
  1324  0215                     	;# 
  1325  0216                     	;# 
  1326  0216                     	;# 
  1327  0217                     	;# 
  1328  0217                     	;# 
  1329  028C                     	;# 
  1330  028E                     	;# 
  1331  0291                     	;# 
  1332  0291                     	;# 
  1333  0292                     	;# 
  1334  0293                     	;# 
  1335  0293                     	;# 
  1336  0298                     	;# 
  1337  0298                     	;# 
  1338  0299                     	;# 
  1339  029A                     	;# 
  1340  029A                     	;# 
  1341  029E                     	;# 
  1342  030C                     	;# 
  1343  030E                     	;# 
  1344  038C                     	;# 
  1345  038E                     	;# 
  1346  0391                     	;# 
  1347  0392                     	;# 
  1348  0393                     	;# 
  1349  0397                     	;# 
  1350  0398                     	;# 
  1351  0399                     	;# 
  1352  0415                     	;# 
  1353  0416                     	;# 
  1354  0417                     	;# 
  1355  041C                     	;# 
  1356  041D                     	;# 
  1357  041E                     	;# 
  1358  0511                     	;# 
  1359  0515                     	;# 
  1360  0617                     	;# 
  1361  0618                     	;# 
  1362  0619                     	;# 
  1363  0619                     	;# 
  1364  061A                     	;# 
  1365  061B                     	;# 
  1366  061C                     	;# 
  1367  061C                     	;# 
  1368  0691                     	;# 
  1369  0692                     	;# 
  1370  0693                     	;# 
  1371  0694                     	;# 
  1372  0695                     	;# 
  1373  0696                     	;# 
  1374  0697                     	;# 
  1375  0698                     	;# 
  1376  0699                     	;# 
  1377  069A                     	;# 
  1378  069B                     	;# 
  1379  069C                     	;# 
  1380  069D                     	;# 
  1381  069E                     	;# 
  1382  069F                     	;# 
  1383  0E0F                     	;# 
  1384  0E10                     	;# 
  1385  0E11                     	;# 
  1386  0E12                     	;# 
  1387  0E13                     	;# 
  1388  0E14                     	;# 
  1389  0E15                     	;# 
  1390  0E17                     	;# 
  1391  0E20                     	;# 
  1392  0E21                     	;# 
  1393  0E22                     	;# 
  1394  0E24                     	;# 
  1395  0E25                     	;# 
  1396  0E28                     	;# 
  1397  0E29                     	;# 
  1398  0E2A                     	;# 
  1399  0E2B                     	;# 
  1400  0E90                     	;# 
  1401  0E91                     	;# 
  1402  0E92                     	;# 
  1403  0E94                     	;# 
  1404  0E95                     	;# 
  1405  0EA0                     	;# 
  1406  0EA1                     	;# 
  1407  0EA2                     	;# 
  1408  0EA3                     	;# 
  1409  0EA4                     	;# 
  1410  0EA5                     	;# 
  1411  0F0F                     	;# 
  1412  0F10                     	;# 
  1413  0F11                     	;# 
  1414  0F12                     	;# 
  1415  0F13                     	;# 
  1416  0F14                     	;# 
  1417  0F15                     	;# 
  1418  0F16                     	;# 
  1419  0F17                     	;# 
  1420  0F18                     	;# 
  1421  0F19                     	;# 
  1422  0F1A                     	;# 
  1423  0F1B                     	;# 
  1424  0F1C                     	;# 
  1425  0F1D                     	;# 
  1426  0F1E                     	;# 
  1427  0F1F                     	;# 
  1428  0F20                     	;# 
  1429  0F21                     	;# 
  1430  0F22                     	;# 
  1431  0F23                     	;# 
  1432  0F24                     	;# 
  1433  0F25                     	;# 
  1434  0F26                     	;# 
  1435  0F27                     	;# 
  1436  0F28                     	;# 
  1437  0F29                     	;# 
  1438  0F2A                     	;# 
  1439  0F2B                     	;# 
  1440  0F2C                     	;# 
  1441  0F2D                     	;# 
  1442  0FE4                     	;# 
  1443  0FE5                     	;# 
  1444  0FE6                     	;# 
  1445  0FE7                     	;# 
  1446  0FE8                     	;# 
  1447  0FE9                     	;# 
  1448  0FEA                     	;# 
  1449  0FEB                     	;# 
  1450  0FED                     	;# 
  1451  0FEE                     	;# 
  1452  0FEF                     	;# 
  1453  0000                     	;# 
  1454  0001                     	;# 
  1455  0002                     	;# 
  1456  0003                     	;# 
  1457  0004                     	;# 
  1458  0005                     	;# 
  1459  0006                     	;# 
  1460  0007                     	;# 
  1461  0008                     	;# 
  1462  0009                     	;# 
  1463  000A                     	;# 
  1464  000B                     	;# 
  1465  000C                     	;# 
  1466  000E                     	;# 
  1467  0011                     	;# 
  1468  0012                     	;# 
  1469  0013                     	;# 
  1470  0015                     	;# 
  1471  0016                     	;# 
  1472  0016                     	;# 
  1473  0017                     	;# 
  1474  0018                     	;# 
  1475  0019                     	;# 
  1476  001A                     	;# 
  1477  001B                     	;# 
  1478  001C                     	;# 
  1479  008C                     	;# 
  1480  008E                     	;# 
  1481  0091                     	;# 
  1482  0092                     	;# 
  1483  0093                     	;# 
  1484  0095                     	;# 
  1485  0096                     	;# 
  1486  0097                     	;# 
  1487  0098                     	;# 
  1488  0099                     	;# 
  1489  009A                     	;# 
  1490  009B                     	;# 
  1491  009B                     	;# 
  1492  009C                     	;# 
  1493  009D                     	;# 
  1494  009E                     	;# 
  1495  009F                     	;# 
  1496  010C                     	;# 
  1497  010E                     	;# 
  1498  0111                     	;# 
  1499  0112                     	;# 
  1500  0113                     	;# 
  1501  0114                     	;# 
  1502  0115                     	;# 
  1503  0116                     	;# 
  1504  0117                     	;# 
  1505  0118                     	;# 
  1506  0119                     	;# 
  1507  011C                     	;# 
  1508  018C                     	;# 
  1509  018E                     	;# 
  1510  0191                     	;# 
  1511  0191                     	;# 
  1512  0192                     	;# 
  1513  0193                     	;# 
  1514  0193                     	;# 
  1515  0194                     	;# 
  1516  0195                     	;# 
  1517  0196                     	;# 
  1518  0197                     	;# 
  1519  0199                     	;# 
  1520  0199                     	;# 
  1521  0199                     	;# 
  1522  019A                     	;# 
  1523  019A                     	;# 
  1524  019A                     	;# 
  1525  019B                     	;# 
  1526  019B                     	;# 
  1527  019B                     	;# 
  1528  019B                     	;# 
  1529  019B                     	;# 
  1530  019C                     	;# 
  1531  019C                     	;# 
  1532  019C                     	;# 
  1533  019D                     	;# 
  1534  019D                     	;# 
  1535  019D                     	;# 
  1536  019E                     	;# 
  1537  019E                     	;# 
  1538  019E                     	;# 
  1539  019F                     	;# 
  1540  019F                     	;# 
  1541  019F                     	;# 
  1542  019F                     	;# 
  1543  019F                     	;# 
  1544  020C                     	;# 
  1545  020E                     	;# 
  1546  0211                     	;# 
  1547  0211                     	;# 
  1548  0212                     	;# 
  1549  0212                     	;# 
  1550  0213                     	;# 
  1551  0213                     	;# 
  1552  0214                     	;# 
  1553  0214                     	;# 
  1554  0215                     	;# 
  1555  0215                     	;# 
  1556  0215                     	;# 
  1557  0215                     	;# 
  1558  0216                     	;# 
  1559  0216                     	;# 
  1560  0217                     	;# 
  1561  0217                     	;# 
  1562  028C                     	;# 
  1563  028E                     	;# 
  1564  0291                     	;# 
  1565  0291                     	;# 
  1566  0292                     	;# 
  1567  0293                     	;# 
  1568  0293                     	;# 
  1569  0298                     	;# 
  1570  0298                     	;# 
  1571  0299                     	;# 
  1572  029A                     	;# 
  1573  029A                     	;# 
  1574  029E                     	;# 
  1575  030C                     	;# 
  1576  030E                     	;# 
  1577  038C                     	;# 
  1578  038E                     	;# 
  1579  0391                     	;# 
  1580  0392                     	;# 
  1581  0393                     	;# 
  1582  0397                     	;# 
  1583  0398                     	;# 
  1584  0399                     	;# 
  1585  0415                     	;# 
  1586  0416                     	;# 
  1587  0417                     	;# 
  1588  041C                     	;# 
  1589  041D                     	;# 
  1590  041E                     	;# 
  1591  0511                     	;# 
  1592  0515                     	;# 
  1593  0617                     	;# 
  1594  0618                     	;# 
  1595  0619                     	;# 
  1596  0619                     	;# 
  1597  061A                     	;# 
  1598  061B                     	;# 
  1599  061C                     	;# 
  1600  061C                     	;# 
  1601  0691                     	;# 
  1602  0692                     	;# 
  1603  0693                     	;# 
  1604  0694                     	;# 
  1605  0695                     	;# 
  1606  0696                     	;# 
  1607  0697                     	;# 
  1608  0698                     	;# 
  1609  0699                     	;# 
  1610  069A                     	;# 
  1611  069B                     	;# 
  1612  069C                     	;# 
  1613  069D                     	;# 
  1614  069E                     	;# 
  1615  069F                     	;# 
  1616  0E0F                     	;# 
  1617  0E10                     	;# 
  1618  0E11                     	;# 
  1619  0E12                     	;# 
  1620  0E13                     	;# 
  1621  0E14                     	;# 
  1622  0E15                     	;# 
  1623  0E17                     	;# 
  1624  0E20                     	;# 
  1625  0E21                     	;# 
  1626  0E22                     	;# 
  1627  0E24                     	;# 
  1628  0E25                     	;# 
  1629  0E28                     	;# 
  1630  0E29                     	;# 
  1631  0E2A                     	;# 
  1632  0E2B                     	;# 
  1633  0E90                     	;# 
  1634  0E91                     	;# 
  1635  0E92                     	;# 
  1636  0E94                     	;# 
  1637  0E95                     	;# 
  1638  0EA0                     	;# 
  1639  0EA1                     	;# 
  1640  0EA2                     	;# 
  1641  0EA3                     	;# 
  1642  0EA4                     	;# 
  1643  0EA5                     	;# 
  1644  0F0F                     	;# 
  1645  0F10                     	;# 
  1646  0F11                     	;# 
  1647  0F12                     	;# 
  1648  0F13                     	;# 
  1649  0F14                     	;# 
  1650  0F15                     	;# 
  1651  0F16                     	;# 
  1652  0F17                     	;# 
  1653  0F18                     	;# 
  1654  0F19                     	;# 
  1655  0F1A                     	;# 
  1656  0F1B                     	;# 
  1657  0F1C                     	;# 
  1658  0F1D                     	;# 
  1659  0F1E                     	;# 
  1660  0F1F                     	;# 
  1661  0F20                     	;# 
  1662  0F21                     	;# 
  1663  0F22                     	;# 
  1664  0F23                     	;# 
  1665  0F24                     	;# 
  1666  0F25                     	;# 
  1667  0F26                     	;# 
  1668  0F27                     	;# 
  1669  0F28                     	;# 
  1670  0F29                     	;# 
  1671  0F2A                     	;# 
  1672  0F2B                     	;# 
  1673  0F2C                     	;# 
  1674  0F2D                     	;# 
  1675  0FE4                     	;# 
  1676  0FE5                     	;# 
  1677  0FE6                     	;# 
  1678  0FE7                     	;# 
  1679  0FE8                     	;# 
  1680  0FE9                     	;# 
  1681  0FEA                     	;# 
  1682  0FEB                     	;# 
  1683  0FED                     	;# 
  1684  0FEE                     	;# 
  1685  0FEF                     	;# 
  1686  0000                     	;# 
  1687  0001                     	;# 
  1688  0002                     	;# 
  1689  0003                     	;# 
  1690  0004                     	;# 
  1691  0005                     	;# 
  1692  0006                     	;# 
  1693  0007                     	;# 
  1694  0008                     	;# 
  1695  0009                     	;# 
  1696  000A                     	;# 
  1697  000B                     	;# 
  1698  000C                     	;# 
  1699  000E                     	;# 
  1700  0011                     	;# 
  1701  0012                     	;# 
  1702  0013                     	;# 
  1703  0015                     	;# 
  1704  0016                     	;# 
  1705  0016                     	;# 
  1706  0017                     	;# 
  1707  0018                     	;# 
  1708  0019                     	;# 
  1709  001A                     	;# 
  1710  001B                     	;# 
  1711  001C                     	;# 
  1712  008C                     	;# 
  1713  008E                     	;# 
  1714  0091                     	;# 
  1715  0092                     	;# 
  1716  0093                     	;# 
  1717  0095                     	;# 
  1718  0096                     	;# 
  1719  0097                     	;# 
  1720  0098                     	;# 
  1721  0099                     	;# 
  1722  009A                     	;# 
  1723  009B                     	;# 
  1724  009B                     	;# 
  1725  009C                     	;# 
  1726  009D                     	;# 
  1727  009E                     	;# 
  1728  009F                     	;# 
  1729  010C                     	;# 
  1730  010E                     	;# 
  1731  0111                     	;# 
  1732  0112                     	;# 
  1733  0113                     	;# 
  1734  0114                     	;# 
  1735  0115                     	;# 
  1736  0116                     	;# 
  1737  0117                     	;# 
  1738  0118                     	;# 
  1739  0119                     	;# 
  1740  011C                     	;# 
  1741  018C                     	;# 
  1742  018E                     	;# 
  1743  0191                     	;# 
  1744  0191                     	;# 
  1745  0192                     	;# 
  1746  0193                     	;# 
  1747  0193                     	;# 
  1748  0194                     	;# 
  1749  0195                     	;# 
  1750  0196                     	;# 
  1751  0197                     	;# 
  1752  0199                     	;# 
  1753  0199                     	;# 
  1754  0199                     	;# 
  1755  019A                     	;# 
  1756  019A                     	;# 
  1757  019A                     	;# 
  1758  019B                     	;# 
  1759  019B                     	;# 
  1760  019B                     	;# 
  1761  019B                     	;# 
  1762  019B                     	;# 
  1763  019C                     	;# 
  1764  019C                     	;# 
  1765  019C                     	;# 
  1766  019D                     	;# 
  1767  019D                     	;# 
  1768  019D                     	;# 
  1769  019E                     	;# 
  1770  019E                     	;# 
  1771  019E                     	;# 
  1772  019F                     	;# 
  1773  019F                     	;# 
  1774  019F                     	;# 
  1775  019F                     	;# 
  1776  019F                     	;# 
  1777  020C                     	;# 
  1778  020E                     	;# 
  1779  0211                     	;# 
  1780  0211                     	;# 
  1781  0212                     	;# 
  1782  0212                     	;# 
  1783  0213                     	;# 
  1784  0213                     	;# 
  1785  0214                     	;# 
  1786  0214                     	;# 
  1787  0215                     	;# 
  1788  0215                     	;# 
  1789  0215                     	;# 
  1790  0215                     	;# 
  1791  0216                     	;# 
  1792  0216                     	;# 
  1793  0217                     	;# 
  1794  0217                     	;# 
  1795  028C                     	;# 
  1796  028E                     	;# 
  1797  0291                     	;# 
  1798  0291                     	;# 
  1799  0292                     	;# 
  1800  0293                     	;# 
  1801  0293                     	;# 
  1802  0298                     	;# 
  1803  0298                     	;# 
  1804  0299                     	;# 
  1805  029A                     	;# 
  1806  029A                     	;# 
  1807  029E                     	;# 
  1808  030C                     	;# 
  1809  030E                     	;# 
  1810  038C                     	;# 
  1811  038E                     	;# 
  1812  0391                     	;# 
  1813  0392                     	;# 
  1814  0393                     	;# 
  1815  0397                     	;# 
  1816  0398                     	;# 
  1817  0399                     	;# 
  1818  0415                     	;# 
  1819  0416                     	;# 
  1820  0417                     	;# 
  1821  041C                     	;# 
  1822  041D                     	;# 
  1823  041E                     	;# 
  1824  0511                     	;# 
  1825  0515                     	;# 
  1826  0617                     	;# 
  1827  0618                     	;# 
  1828  0619                     	;# 
  1829  0619                     	;# 
  1830  061A                     	;# 
  1831  061B                     	;# 
  1832  061C                     	;# 
  1833  061C                     	;# 
  1834  0691                     	;# 
  1835  0692                     	;# 
  1836  0693                     	;# 
  1837  0694                     	;# 
  1838  0695                     	;# 
  1839  0696                     	;# 
  1840  0697                     	;# 
  1841  0698                     	;# 
  1842  0699                     	;# 
  1843  069A                     	;# 
  1844  069B                     	;# 
  1845  069C                     	;# 
  1846  069D                     	;# 
  1847  069E                     	;# 
  1848  069F                     	;# 
  1849  0E0F                     	;# 
  1850  0E10                     	;# 
  1851  0E11                     	;# 
  1852  0E12                     	;# 
  1853  0E13                     	;# 
  1854  0E14                     	;# 
  1855  0E15                     	;# 
  1856  0E17                     	;# 
  1857  0E20                     	;# 
  1858  0E21                     	;# 
  1859  0E22                     	;# 
  1860  0E24                     	;# 
  1861  0E25                     	;# 
  1862  0E28                     	;# 
  1863  0E29                     	;# 
  1864  0E2A                     	;# 
  1865  0E2B                     	;# 
  1866  0E90                     	;# 
  1867  0E91                     	;# 
  1868  0E92                     	;# 
  1869  0E94                     	;# 
  1870  0E95                     	;# 
  1871  0EA0                     	;# 
  1872  0EA1                     	;# 
  1873  0EA2                     	;# 
  1874  0EA3                     	;# 
  1875  0EA4                     	;# 
  1876  0EA5                     	;# 
  1877  0F0F                     	;# 
  1878  0F10                     	;# 
  1879  0F11                     	;# 
  1880  0F12                     	;# 
  1881  0F13                     	;# 
  1882  0F14                     	;# 
  1883  0F15                     	;# 
  1884  0F16                     	;# 
  1885  0F17                     	;# 
  1886  0F18                     	;# 
  1887  0F19                     	;# 
  1888  0F1A                     	;# 
  1889  0F1B                     	;# 
  1890  0F1C                     	;# 
  1891  0F1D                     	;# 
  1892  0F1E                     	;# 
  1893  0F1F                     	;# 
  1894  0F20                     	;# 
  1895  0F21                     	;# 
  1896  0F22                     	;# 
  1897  0F23                     	;# 
  1898  0F24                     	;# 
  1899  0F25                     	;# 
  1900  0F26                     	;# 
  1901  0F27                     	;# 
  1902  0F28                     	;# 
  1903  0F29                     	;# 
  1904  0F2A                     	;# 
  1905  0F2B                     	;# 
  1906  0F2C                     	;# 
  1907  0F2D                     	;# 
  1908  0FE4                     	;# 
  1909  0FE5                     	;# 
  1910  0FE6                     	;# 
  1911  0FE7                     	;# 
  1912  0FE8                     	;# 
  1913  0FE9                     	;# 
  1914  0FEA                     	;# 
  1915  0FEB                     	;# 
  1916  0FED                     	;# 
  1917  0FEE                     	;# 
  1918  0FEF                     	;# 
  1919  0000                     	;# 
  1920  0001                     	;# 
  1921  0002                     	;# 
  1922  0003                     	;# 
  1923  0004                     	;# 
  1924  0005                     	;# 
  1925  0006                     	;# 
  1926  0007                     	;# 
  1927  0008                     	;# 
  1928  0009                     	;# 
  1929  000A                     	;# 
  1930  000B                     	;# 
  1931  000C                     	;# 
  1932  000E                     	;# 
  1933  0011                     	;# 
  1934  0012                     	;# 
  1935  0013                     	;# 
  1936  0015                     	;# 
  1937  0016                     	;# 
  1938  0016                     	;# 
  1939  0017                     	;# 
  1940  0018                     	;# 
  1941  0019                     	;# 
  1942  001A                     	;# 
  1943  001B                     	;# 
  1944  001C                     	;# 
  1945  008C                     	;# 
  1946  008E                     	;# 
  1947  0091                     	;# 
  1948  0092                     	;# 
  1949  0093                     	;# 
  1950  0095                     	;# 
  1951  0096                     	;# 
  1952  0097                     	;# 
  1953  0098                     	;# 
  1954  0099                     	;# 
  1955  009A                     	;# 
  1956  009B                     	;# 
  1957  009B                     	;# 
  1958  009C                     	;# 
  1959  009D                     	;# 
  1960  009E                     	;# 
  1961  009F                     	;# 
  1962  010C                     	;# 
  1963  010E                     	;# 
  1964  0111                     	;# 
  1965  0112                     	;# 
  1966  0113                     	;# 
  1967  0114                     	;# 
  1968  0115                     	;# 
  1969  0116                     	;# 
  1970  0117                     	;# 
  1971  0118                     	;# 
  1972  0119                     	;# 
  1973  011C                     	;# 
  1974  018C                     	;# 
  1975  018E                     	;# 
  1976  0191                     	;# 
  1977  0191                     	;# 
  1978  0192                     	;# 
  1979  0193                     	;# 
  1980  0193                     	;# 
  1981  0194                     	;# 
  1982  0195                     	;# 
  1983  0196                     	;# 
  1984  0197                     	;# 
  1985  0199                     	;# 
  1986  0199                     	;# 
  1987  0199                     	;# 
  1988  019A                     	;# 
  1989  019A                     	;# 
  1990  019A                     	;# 
  1991  019B                     	;# 
  1992  019B                     	;# 
  1993  019B                     	;# 
  1994  019B                     	;# 
  1995  019B                     	;# 
  1996  019C                     	;# 
  1997  019C                     	;# 
  1998  019C                     	;# 
  1999  019D                     	;# 
  2000  019D                     	;# 
  2001  019D                     	;# 
  2002  019E                     	;# 
  2003  019E                     	;# 
  2004  019E                     	;# 
  2005  019F                     	;# 
  2006  019F                     	;# 
  2007  019F                     	;# 
  2008  019F                     	;# 
  2009  019F                     	;# 
  2010  020C                     	;# 
  2011  020E                     	;# 
  2012  0211                     	;# 
  2013  0211                     	;# 
  2014  0212                     	;# 
  2015  0212                     	;# 
  2016  0213                     	;# 
  2017  0213                     	;# 
  2018  0214                     	;# 
  2019  0214                     	;# 
  2020  0215                     	;# 
  2021  0215                     	;# 
  2022  0215                     	;# 
  2023  0215                     	;# 
  2024  0216                     	;# 
  2025  0216                     	;# 
  2026  0217                     	;# 
  2027  0217                     	;# 
  2028  028C                     	;# 
  2029  028E                     	;# 
  2030  0291                     	;# 
  2031  0291                     	;# 
  2032  0292                     	;# 
  2033  0293                     	;# 
  2034  0293                     	;# 
  2035  0298                     	;# 
  2036  0298                     	;# 
  2037  0299                     	;# 
  2038  029A                     	;# 
  2039  029A                     	;# 
  2040  029E                     	;# 
  2041  030C                     	;# 
  2042  030E                     	;# 
  2043  038C                     	;# 
  2044  038E                     	;# 
  2045  0391                     	;# 
  2046  0392                     	;# 
  2047  0393                     	;# 
  2048  0397                     	;# 
  2049  0398                     	;# 
  2050  0399                     	;# 
  2051  0415                     	;# 
  2052  0416                     	;# 
  2053  0417                     	;# 
  2054  041C                     	;# 
  2055  041D                     	;# 
  2056  041E                     	;# 
  2057  0511                     	;# 
  2058  0515                     	;# 
  2059  0617                     	;# 
  2060  0618                     	;# 
  2061  0619                     	;# 
  2062  0619                     	;# 
  2063  061A                     	;# 
  2064  061B                     	;# 
  2065  061C                     	;# 
  2066  061C                     	;# 
  2067  0691                     	;# 
  2068  0692                     	;# 
  2069  0693                     	;# 
  2070  0694                     	;# 
  2071  0695                     	;# 
  2072  0696                     	;# 
  2073  0697                     	;# 
  2074  0698                     	;# 
  2075  0699                     	;# 
  2076  069A                     	;# 
  2077  069B                     	;# 
  2078  069C                     	;# 
  2079  069D                     	;# 
  2080  069E                     	;# 
  2081  069F                     	;# 
  2082  0E0F                     	;# 
  2083  0E10                     	;# 
  2084  0E11                     	;# 
  2085  0E12                     	;# 
  2086  0E13                     	;# 
  2087  0E14                     	;# 
  2088  0E15                     	;# 
  2089  0E17                     	;# 
  2090  0E20                     	;# 
  2091  0E21                     	;# 
  2092  0E22                     	;# 
  2093  0E24                     	;# 
  2094  0E25                     	;# 
  2095  0E28                     	;# 
  2096  0E29                     	;# 
  2097  0E2A                     	;# 
  2098  0E2B                     	;# 
  2099  0E90                     	;# 
  2100  0E91                     	;# 
  2101  0E92                     	;# 
  2102  0E94                     	;# 
  2103  0E95                     	;# 
  2104  0EA0                     	;# 
  2105  0EA1                     	;# 
  2106  0EA2                     	;# 
  2107  0EA3                     	;# 
  2108  0EA4                     	;# 
  2109  0EA5                     	;# 
  2110  0F0F                     	;# 
  2111  0F10                     	;# 
  2112  0F11                     	;# 
  2113  0F12                     	;# 
  2114  0F13                     	;# 
  2115  0F14                     	;# 
  2116  0F15                     	;# 
  2117  0F16                     	;# 
  2118  0F17                     	;# 
  2119  0F18                     	;# 
  2120  0F19                     	;# 
  2121  0F1A                     	;# 
  2122  0F1B                     	;# 
  2123  0F1C                     	;# 
  2124  0F1D                     	;# 
  2125  0F1E                     	;# 
  2126  0F1F                     	;# 
  2127  0F20                     	;# 
  2128  0F21                     	;# 
  2129  0F22                     	;# 
  2130  0F23                     	;# 
  2131  0F24                     	;# 
  2132  0F25                     	;# 
  2133  0F26                     	;# 
  2134  0F27                     	;# 
  2135  0F28                     	;# 
  2136  0F29                     	;# 
  2137  0F2A                     	;# 
  2138  0F2B                     	;# 
  2139  0F2C                     	;# 
  2140  0F2D                     	;# 
  2141  0FE4                     	;# 
  2142  0FE5                     	;# 
  2143  0FE6                     	;# 
  2144  0FE7                     	;# 
  2145  0FE8                     	;# 
  2146  0FE9                     	;# 
  2147  0FEA                     	;# 
  2148  0FEB                     	;# 
  2149  0FED                     	;# 
  2150  0FEE                     	;# 
  2151  0FEF                     	;_IRRawCode
  2152                           
  2153                           	psect	idataBANK0
  2154  0752                     __pidataBANK0:	
  2155                           
  2156                           ;initializer for _BlueLEDcount
  2157  0752  34C4               	retlw	196
  2158  0753  3409               	retlw	9
  2159                           
  2160                           ;initializer for _LEDsdone
  2161  0754  3401               	retlw	1
  2162                           
  2163                           ;initializer for _Sent
  2164  0755  3401               	retlw	1
  2165                           
  2166                           	psect	idataBANK1
  2167  0649                     __pidataBANK1:	
  2168                           
  2169                           ;initializer for _ChannelF
  2170  0649  3403               	retlw	3
  2171  064A  3400               	retlw	0
  2172  064B  3403               	retlw	3
  2173  064C  3403               	retlw	3
  2174  064D  3403               	retlw	3
  2175  064E  3403               	retlw	3
  2176  064F  3400               	retlw	0
  2177  0650  3400               	retlw	0
  2178  0651  3401               	retlw	1
  2179  0652  3400               	retlw	0
  2180  0653  3400               	retlw	0
  2181  0654  3400               	retlw	0
  2182                           
  2183                           	psect	stringtext
  2184  0700                     __pstringtext:	
  2185  0700                     _Version:	
  2186  0700  3431               	retlw	49
  2187  0701  342E               	retlw	46
  2188  0702  3430               	retlw	48
  2189  0703  345F               	retlw	95
  2190  0704  3444               	retlw	68
  2191  0705  3457               	retlw	87
  2192  0706  3430               	retlw	48
  2193  0707  3461               	retlw	97
  2194  0708  3400               	retlw	0
  2195  0709                     __end_of_Version:	
  2196  000B                     _INTCONbits	set	11
  2197  0011                     _PIR1bits	set	17
  2198  0012                     _PIR2bits	set	18
  2199  000E                     _PORTC	set	14
  2200  001B                     _PR2	set	27
  2201  0018                     _T1CONbits	set	24
  2202  001C                     _T2CONbits	set	28
  2203  0017                     _TMR1H	set	23
  2204  0016                     _TMR1L	set	22
  2205  001A                     _TMR2	set	26
  2206  0099                     _OSCCONbits	set	153
  2207  009A                     _OSCSTAT	set	154
  2208  0091                     _PIE1bits	set	145
  2209  0092                     _PIE2bits	set	146
  2210  008E                     _TRISCbits	set	142
  2211  04D0                     _HFIOFS	set	1232
  2212  010E                     _LATC	set	270
  2213  018E                     _ANSELC	set	398
  2214  0197                     _VREGCONbits	set	407
  2215  0293                     _CCP1CONbits	set	659
  2216  029A                     _CCP2CONbits	set	666
  2217  030E                     _SLRCONCbits	set	782
  2218  0399                     _IOCCFbits	set	921
  2219  0398                     _IOCCNbits	set	920
  2220  0397                     _IOCCPbits	set	919
  2221  0416                     _PR4	set	1046
  2222  041D                     _PR6	set	1053
  2223  0417                     _T4CONbits	set	1047
  2224  041E                     _T6CONbits	set	1054
  2225  0415                     _TMR4	set	1045
  2226  041C                     _TMR6	set	1052
  2227                           
  2228                           ; #config settings
  2229  0000                     
  2230                           	psect	cinit
  2231  01F3                     start_initialization:	
  2232  01F3                     __initialization:		;BIGRAM
  2233                           
  2234                           ; Clear objects allocated to BIGRAM
  2235  01F3  3060               	movlw	low (0+8544)
  2236  01F4  0084               	movwf	4
  2237  01F5  3021               	movlw	high (0+8544)
  2238  01F6  0085               	movwf	5
  2239  01F7  3090               	movlw	144
  2240  01F8  00FE               	movwf	btemp
  2241  01F9  3000               	movlw	0
  2242  01FA  00FF               	movwf	btemp+1
  2243  01FB  3186  2655  3181   	fcall	clear_ram0
  2244                           
  2245                           ; Clear objects allocated to COMMON
  2246  01FE  01F9               	clrf	__pbssCOMMON& (0+127)
  2247  01FF  01FA               	clrf	(__pbssCOMMON+1)& (0+127)
  2248  0200  01FB               	clrf	(__pbssCOMMON+2)& (0+127)
  2249  0201  01FC               	clrf	(__pbssCOMMON+3)& (0+127)
  2250  0202  01FD               	clrf	(__pbssCOMMON+4)& (0+127)
  2251                           
  2252                           ; Clear objects allocated to BANK0
  2253  0203  3020               	movlw	low __pbssBANK0
  2254  0204  0084               	movwf	4
  2255  0205  3000               	movlw	high __pbssBANK0
  2256  0206  0085               	movwf	5
  2257  0207  3025               	movlw	37
  2258  0208  00FE               	movwf	btemp
  2259  0209  3000               	movlw	0
  2260  020A  00FF               	movwf	btemp+1
  2261  020B  3186  2655  3181   	fcall	clear_ram0
  2262                           
  2263                           ; Initialize objects allocated to BANK0
  2264  020E  3052               	movlw	low __pidataBANK0
  2265  020F  0084               	movwf	4
  2266  0210  3087               	movlw	(high __pidataBANK0)| (0+128)
  2267  0211  0085               	movwf	5
  2268  0212  305B               	movlw	low __pdataBANK0
  2269  0213  0086               	movwf	6
  2270  0214  3000               	movlw	high __pdataBANK0
  2271  0215  0087               	movwf	7
  2272  0216  3000               	movlw	0
  2273  0217  00FF               	movwf	btemp+1
  2274  0218  3004               	movlw	4
  2275  0219  3186  2661  3181   	fcall	init_ram
  2276                           
  2277                           ; Initialize objects allocated to BANK1
  2278  021C  3049               	movlw	low __pidataBANK1
  2279  021D  0084               	movwf	4
  2280  021E  3086               	movlw	(high __pidataBANK1)| (0+128)
  2281  021F  0085               	movwf	5
  2282  0220  30A0               	movlw	low __pdataBANK1
  2283  0221  0086               	movwf	6
  2284  0222  3000               	movlw	high __pdataBANK1
  2285  0223  0087               	movwf	7
  2286  0224  3000               	movlw	0
  2287  0225  00FF               	movwf	btemp+1
  2288  0226  300C               	movlw	12
  2289  0227  3186  2661         	fcall	init_ram
  2290  0229                     end_of_initialization:	
  2291                           ;End of C runtime variable initialization code
  2292                           
  2293  0229                     __end_of__initialization:	
  2294  0229  0020               	movlb	0
  2295  022A  3184  2C9A         	ljmp	_main	;jump to C main() function
  2296                           
  2297                           	psect	bssCOMMON
  2298  0079                     __pbssCOMMON:	
  2299  0079                     _IRrawCodeNum:	
  2300  0079                     	ds	1
  2301  007A                     _RFcodeBit:	
  2302  007A                     	ds	1
  2303  007B                     _RFcodePlace:	
  2304  007B                     	ds	1
  2305  007C                     _RFsendFlag:	
  2306  007C                     	ds	1
  2307  007D                     _IR_New_Code:	
  2308  007D                     	ds	1
  2309                           
  2310                           	psect	bssBANK0
  2311  0020                     __pbssBANK0:	
  2312  0020                     _RFsendCode:	
  2313  0020                     	ds	20
  2314  0034                     _SleepTimer:	
  2315  0034                     	ds	4
  2316  0038                     _IRrawCount:	
  2317  0038                     	ds	2
  2318  003A                     _TMR1_overflow:	
  2319  003A                     	ds	2
  2320  003C                     _TMR4_overflow:	
  2321  003C                     	ds	2
  2322  003E                     _IRfault:	
  2323  003E                     	ds	1
  2324  003F                     _IRreceived:	
  2325  003F                     	ds	1
  2326  0040                     _Sendcount:	
  2327  0040                     	ds	1
  2328  0041                     _IR_NEC:	
  2329  0041                     	ds	4
  2330                           
  2331                           	psect	dataBANK0
  2332  005B                     __pdataBANK0:	
  2333  005B                     _BlueLEDcount:	
  2334  005B                     	ds	2
  2335  005D                     _LEDsdone:	
  2336  005D                     	ds	1
  2337  005E                     _Sent:	
  2338  005E                     	ds	1
  2339                           
  2340                           	psect	dataBANK1
  2341  00A0                     __pdataBANK1:	
  2342  00A0                     _ChannelF:	
  2343  00A0                     	ds	12
  2344                           
  2345                           	psect	clrtext
  2346  0655                     clear_ram0:	
  2347                           ;	Called with FSR0 containing the base address, and
  2348                           ;	btemp/btemp+1 has the size to clear
  2349                           
  2350  0655  0064               	clrwdt	;clear the watchdog before getting into this loop
  2351  0656                     clrloop0:	
  2352  0656  0180               	clrf	0	;clear RAM location pointed to by FSR
  2353  0657  3101               	addfsr 0,1
  2354  0658  3001               	movlw	1
  2355  0659  02FE               	subwf	126,f
  2356  065A  3000               	movlw	0
  2357  065B  3BFF               	subwfb	127,f
  2358  065C  087F               	movf	127,w
  2359  065D  047E               	iorwf	126,w
  2360  065E  1903               	btfsc	3,2
  2361  065F  3400               	retlw	0	;all done for this memory range, return
  2362  0660  2E56               	goto	clrloop0	;have we reached the end yet?
  2363                           
  2364                           	psect	inittext
  2365  0661                     init_ram:	
  2366  0661  00FE               	movwf	126
  2367  0662                     initloop:	
  2368  0662  0012               	moviw fsr0++
  2369  0663  001E               	movwi fsr1++
  2370  0664  3001               	movlw	1
  2371  0665  02FE               	subwf	126,f
  2372  0666  3000               	movlw	0
  2373  0667  3BFF               	subwfb	127,f
  2374  0668  087F               	movf	127,w
  2375  0669  047E               	iorwf	126,w
  2376  066A  1903               	btfsc	3,2
  2377  066B  3400               	retlw	0
  2378  066C  2E62               	goto	initloop
  2379                           
  2380                           	psect	cstackBANK1
  2381  00AC                     __pcstackBANK1:	
  2382  00AC                     SendRF@Code:	
  2383  00AC                     delayUS@i:	
  2384                           ; 1 bytes @ 0x0
  2385                           
  2386                           
  2387                           ; 4 bytes @ 0x0
  2388  00AC                     	ds	1
  2389  00AD                     SendRF@i:	
  2390                           
  2391                           ; 1 bytes @ 0x1
  2392  00AD                     	ds	1
  2393  00AE                     ?_UseIRCode:	
  2394  00AE                     UseIRCode@NEC:	
  2395                           ; 0 bytes @ 0x2
  2396                           
  2397                           
  2398                           ; 4 bytes @ 0x2
  2399  00AE                     	ds	2
  2400  00B0                     delayUS@j:	
  2401                           
  2402                           ; 1 bytes @ 0x4
  2403  00B0                     	ds	2
  2404  00B2                     ??_UseIRCode:	
  2405                           
  2406                           ; 0 bytes @ 0x6
  2407  00B2                     	ds	2
  2408  00B4                     ??_main:	
  2409                           
  2410                           ; 0 bytes @ 0x8
  2411  00B4                     	ds	1
  2412  00B5                     main@i:	
  2413                           
  2414                           ; 1 bytes @ 0x9
  2415  00B5                     	ds	1
  2416                           
  2417                           	psect	cstackCOMMON
  2418  0070                     __pcstackCOMMON:	
  2419  0070                     ?_Timer4Reset:	
  2420  0070                     ??_Timer4Reset:	
  2421                           ; 0 bytes @ 0x0
  2422                           
  2423  0070                     ?_Set_Timer4:	
  2424                           ; 0 bytes @ 0x0
  2425                           
  2426  0070                     ??_Set_Timer4:	
  2427                           ; 0 bytes @ 0x0
  2428                           
  2429  0070                     ?_Timer4ON:	
  2430                           ; 0 bytes @ 0x0
  2431                           
  2432  0070                     ??_Timer4ON:	
  2433                           ; 0 bytes @ 0x0
  2434                           
  2435  0070                     ?_Timer2OFF:	
  2436                           ; 0 bytes @ 0x0
  2437                           
  2438  0070                     ?_Reset_Timer1:	
  2439                           ; 0 bytes @ 0x0
  2440                           
  2441  0070                     ?_Stop_Timer1:	
  2442                           ; 0 bytes @ 0x0
  2443                           
  2444  0070                     ?_Start_Timer1:	
  2445                           ; 0 bytes @ 0x0
  2446                           
  2447  0070                     ??_Start_Timer1:	
  2448                           ; 0 bytes @ 0x0
  2449                           
  2450  0070                     ?_Timer4OFF:	
  2451                           ; 0 bytes @ 0x0
  2452                           
  2453  0070                     ?_Timer6OFF:	
  2454                           ; 0 bytes @ 0x0
  2455                           
  2456  0070                     ?_ConfigureOscillator:	
  2457                           ; 0 bytes @ 0x0
  2458                           
  2459  0070                     ?_InitApp:	
  2460                           ; 0 bytes @ 0x0
  2461                           
  2462  0070                     ?_init_Timers:	
  2463                           ; 0 bytes @ 0x0
  2464                           
  2465  0070                     ?_init_IR:	
  2466                           ; 0 bytes @ 0x0
  2467                           
  2468  0070                     ?_Timer1Init:	
  2469                           ; 0 bytes @ 0x0
  2470                           
  2471  0070                     ?_Timer2Init:	
  2472                           ; 0 bytes @ 0x0
  2473                           
  2474  0070                     ?_Timer4Init:	
  2475                           ; 0 bytes @ 0x0
  2476                           
  2477  0070                     ?_Timer6Init:	
  2478                           ; 0 bytes @ 0x0
  2479                           
  2480  0070                     ?_Enable_IR:	
  2481                           ; 0 bytes @ 0x0
  2482                           
  2483  0070                     ?_isr:	
  2484                           ; 0 bytes @ 0x0
  2485                           
  2486  0070                     ?_main:	
  2487                           ; 0 bytes @ 0x0
  2488                           
  2489  0070                     ?_Timer2ON:	
  2490                           ; 0 bytes @ 0x0
  2491                           
  2492  0070                     ?_Timer6ON:	
  2493                           ; 0 bytes @ 0x0
  2494                           
  2495  0070                     ?_Timer6Reset:	
  2496                           ; 0 bytes @ 0x0
  2497                           
  2498  0070                     ?_Set_Timer6:	
  2499                           ; 0 bytes @ 0x0
  2500                           
  2501  0070                     ?i1_Stop_Timer1:	
  2502                           ; 0 bytes @ 0x0
  2503                           
  2504  0070                     ??i1_Stop_Timer1:	
  2505                           ; 0 bytes @ 0x0
  2506                           
  2507  0070                     ?i1_Reset_Timer1:	
  2508                           ; 0 bytes @ 0x0
  2509                           
  2510  0070                     ??i1_Reset_Timer1:	
  2511                           ; 0 bytes @ 0x0
  2512                           
  2513  0070                     ?i1_Timer2OFF:	
  2514                           ; 0 bytes @ 0x0
  2515                           
  2516  0070                     ??i1_Timer2OFF:	
  2517                           ; 0 bytes @ 0x0
  2518                           
  2519  0070                     ?i1_Timer4OFF:	
  2520                           ; 0 bytes @ 0x0
  2521                           
  2522  0070                     ??i1_Timer4OFF:	
  2523                           ; 0 bytes @ 0x0
  2524                           
  2525  0070                     ?i1_Timer6OFF:	
  2526                           ; 0 bytes @ 0x0
  2527                           
  2528  0070                     ??i1_Timer6OFF:	
  2529                           ; 0 bytes @ 0x0
  2530                           
  2531  0070                     ?_IRrawToNEC:	
  2532                           ; 0 bytes @ 0x0
  2533                           
  2534  0070                     Set_Timer4@time:	
  2535                           ; 1 bytes @ 0x0
  2536                           
  2537  0070                     IRrawToNEC@Raw:	
  2538                           ; 1 bytes @ 0x0
  2539                           
  2540                           
  2541                           ; 2 bytes @ 0x0
  2542  0070                     	ds	2
  2543  0072                     IRrawToNEC@NEC:	
  2544                           
  2545                           ; 1 bytes @ 0x2
  2546  0072                     	ds	1
  2547  0073                     IRrawToNEC@Invert:	
  2548                           
  2549                           ; 1 bytes @ 0x3
  2550  0073                     	ds	1
  2551  0074                     ??_IRrawToNEC:	
  2552                           
  2553                           ; 0 bytes @ 0x4
  2554  0074                     	ds	5
  2555                           
  2556                           	psect	cstackBANK0
  2557  0045                     __pcstackBANK0:	
  2558  0045                     IRrawToNEC@NECtemp:	
  2559                           
  2560                           ; 4 bytes @ 0x0
  2561  0045                     	ds	4
  2562  0049                     IRrawToNEC@Pause:	
  2563                           
  2564                           ; 1 bytes @ 0x4
  2565  0049                     	ds	1
  2566  004A                     IRrawToNEC@first:	
  2567                           
  2568                           ; 1 bytes @ 0x5
  2569  004A                     	ds	1
  2570  004B                     IRrawToNEC@i:	
  2571                           
  2572                           ; 1 bytes @ 0x6
  2573  004B                     	ds	1
  2574  004C                     IRrawToNEC@StartBit:	
  2575                           
  2576                           ; 1 bytes @ 0x7
  2577  004C                     	ds	1
  2578  004D                     ??_isr:	
  2579                           
  2580                           ; 0 bytes @ 0x8
  2581  004D                     	ds	9
  2582  0056                     ??_Timer2OFF:	
  2583  0056                     ??_Reset_Timer1:	
  2584                           ; 0 bytes @ 0x11
  2585                           
  2586  0056                     ??_Stop_Timer1:	
  2587                           ; 0 bytes @ 0x11
  2588                           
  2589  0056                     ??_Timer4OFF:	
  2590                           ; 0 bytes @ 0x11
  2591                           
  2592  0056                     ??_Timer6OFF:	
  2593                           ; 0 bytes @ 0x11
  2594                           
  2595  0056                     ??_ConfigureOscillator:	
  2596                           ; 0 bytes @ 0x11
  2597                           
  2598  0056                     ??_InitApp:	
  2599                           ; 0 bytes @ 0x11
  2600                           
  2601  0056                     ??_init_Timers:	
  2602                           ; 0 bytes @ 0x11
  2603                           
  2604  0056                     ??_init_IR:	
  2605                           ; 0 bytes @ 0x11
  2606                           
  2607  0056                     ?_delayUS:	
  2608                           ; 0 bytes @ 0x11
  2609                           
  2610  0056                     ??_Timer1Init:	
  2611                           ; 0 bytes @ 0x11
  2612                           
  2613  0056                     ??_Timer2Init:	
  2614                           ; 0 bytes @ 0x11
  2615                           
  2616  0056                     ??_Timer4Init:	
  2617                           ; 0 bytes @ 0x11
  2618                           
  2619  0056                     ??_Timer6Init:	
  2620                           ; 0 bytes @ 0x11
  2621                           
  2622  0056                     ??_Enable_IR:	
  2623                           ; 0 bytes @ 0x11
  2624                           
  2625  0056                     ??_Timer2ON:	
  2626                           ; 0 bytes @ 0x11
  2627                           
  2628  0056                     ??_Timer6ON:	
  2629                           ; 0 bytes @ 0x11
  2630                           
  2631  0056                     ??_Timer6Reset:	
  2632                           ; 0 bytes @ 0x11
  2633                           
  2634  0056                     ??_Set_Timer6:	
  2635                           ; 0 bytes @ 0x11
  2636                           
  2637  0056                     ?_SendRF:	
  2638                           ; 0 bytes @ 0x11
  2639                           
  2640  0056                     Set_Timer6@time:	
  2641                           ; 1 bytes @ 0x11
  2642                           
  2643  0056                     SendRF@size:	
  2644                           ; 1 bytes @ 0x11
  2645                           
  2646  0056                     delayUS@US:	
  2647                           ; 1 bytes @ 0x11
  2648                           
  2649                           
  2650                           ; 4 bytes @ 0x11
  2651  0056                     	ds	1
  2652  0057                     SendRF@RepeatAmount:	
  2653                           
  2654                           ; 1 bytes @ 0x12
  2655  0057                     	ds	1
  2656  0058                     ??_SendRF:	
  2657                           
  2658                           ; 0 bytes @ 0x13
  2659  0058                     	ds	2
  2660  005A                     ??_delayUS:	
  2661  005A                     UseIRCode@Code:	
  2662                           ; 0 bytes @ 0x15
  2663                           
  2664                           
  2665                           ; 1 bytes @ 0x15
  2666  005A                     	ds	1
  2667                           
  2668                           	psect	maintext
  2669  049A                     __pmaintext:	
  2670 ;;
  2671 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  2672 ;;
  2673 ;; *************** function _main *****************
  2674 ;; Defined at:
  2675 ;;		line 51 in file "main.c"
  2676 ;; Parameters:    Size  Location     Type
  2677 ;;		None
  2678 ;; Auto vars:     Size  Location     Type
  2679 ;;  i               1    9[BANK1 ] unsigned char 
  2680 ;; Return value:  Size  Location     Type
  2681 ;;		None               void
  2682 ;; Registers used:
  2683 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  2684 ;; Tracked objects:
  2685 ;;		On entry : B1F/0
  2686 ;;		On exit  : 0/0
  2687 ;;		Unchanged: 0/0
  2688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2689 ;;      Params:         0       0       0       0       0       0       0       0
  2690 ;;      Locals:         0       0       1       0       0       0       0       0
  2691 ;;      Temps:          0       0       1       0       0       0       0       0
  2692 ;;      Totals:         0       0       2       0       0       0       0       0
  2693 ;;Total ram usage:        2 bytes
  2694 ;; Hardware stack levels required when called:    5
  2695 ;; This function calls:
  2696 ;;		_ConfigureOscillator
  2697 ;;		_InitApp
  2698 ;;		_UseIRCode
  2699 ;;		_delayUS
  2700 ;;		_init_IR
  2701 ;;		_init_Timers
  2702 ;; This function is called by:
  2703 ;;		Startup code after reset
  2704 ;; This function uses a non-reentrant model
  2705 ;;
  2706                           
  2707                           
  2708                           ;psect for function _main
  2709  049A                     _main:	
  2710                           
  2711                           ;main.c: 53: unsigned char i=0;
  2712                           
  2713                           ;incstack = 0
  2714                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  2715  049A  0021               	movlb	1	; select bank1
  2716  049B  01B5               	clrf	main@i^(0+128)
  2717                           
  2718                           ;main.c: 56: ConfigureOscillator();
  2719  049C  3186  263C  3184   	fcall	_ConfigureOscillator
  2720                           
  2721                           ;main.c: 57: InitApp();
  2722  049F  3186  262A  3184   	fcall	_InitApp
  2723                           
  2724                           ;main.c: 58: init_Timers();
  2725  04A2  3186  266D  3184   	fcall	_init_Timers
  2726                           
  2727                           ;main.c: 59: init_IR();
  2728  04A5  3187  2710  3184   	fcall	_init_IR
  2729                           
  2730                           ;main.c: 62: LATC |= 0b00000100;
  2731  04A8  0022               	movlb	2	; select bank2
  2732  04A9  150E               	bsf	14,2	;volatile
  2733                           
  2734                           ;main.c: 63: for(i =0;i<10;i++)
  2735  04AA  0021               	movlb	1	; select bank1
  2736  04AB  01B5               	clrf	main@i^(0+128)
  2737  04AC  300A               	movlw	10
  2738  04AD  0235               	subwf	main@i^(0+128),w
  2739  04AE  1803               	btfsc	3,0
  2740  04AF  2CE1               	goto	l2383
  2741  04B0                     l173:	
  2742                           
  2743                           ;main.c: 64: {
  2744                           ;main.c: 65: LATC |= 0b00000001;
  2745  04B0  0022               	movlb	2	; select bank2
  2746  04B1  140E               	bsf	14,0	;volatile
  2747                           
  2748                           ;main.c: 66: LATC &= ~0b00000010;
  2749  04B2  30FD               	movlw	253
  2750  04B3  0021               	movlb	1	; select bank1
  2751  04B4  00B4               	movwf	??_main^(0+128)
  2752  04B5  0834               	movf	??_main^(0+128),w
  2753  04B6  0022               	movlb	2	; select bank2
  2754  04B7  058E               	andwf	14,f	;volatile
  2755                           
  2756                           ;main.c: 67: delayUS(40000);
  2757  04B8  3000               	movlw	0
  2758  04B9  0020               	movlb	0	; select bank0
  2759  04BA  00D9               	movwf	delayUS@US+3
  2760  04BB  3000               	movlw	0
  2761  04BC  00D8               	movwf	delayUS@US+2
  2762  04BD  309C               	movlw	156
  2763  04BE  00D7               	movwf	delayUS@US+1
  2764  04BF  3040               	movlw	64
  2765  04C0  00D6               	movwf	delayUS@US
  2766  04C1  3185  25C6  3184   	fcall	_delayUS
  2767                           
  2768                           ;main.c: 68: LATC |= 0b00000010;
  2769  04C4  0022               	movlb	2	; select bank2
  2770  04C5  148E               	bsf	14,1	;volatile
  2771                           
  2772                           ;main.c: 69: LATC &= ~0b00000001;
  2773  04C6  30FE               	movlw	254
  2774  04C7  0021               	movlb	1	; select bank1
  2775  04C8  00B4               	movwf	??_main^(0+128)
  2776  04C9  0834               	movf	??_main^(0+128),w
  2777  04CA  0022               	movlb	2	; select bank2
  2778  04CB  058E               	andwf	14,f	;volatile
  2779                           
  2780                           ;main.c: 70: delayUS(40000);
  2781  04CC  3000               	movlw	0
  2782  04CD  0020               	movlb	0	; select bank0
  2783  04CE  00D9               	movwf	delayUS@US+3
  2784  04CF  3000               	movlw	0
  2785  04D0  00D8               	movwf	delayUS@US+2
  2786  04D1  309C               	movlw	156
  2787  04D2  00D7               	movwf	delayUS@US+1
  2788  04D3  3040               	movlw	64
  2789  04D4  00D6               	movwf	delayUS@US
  2790  04D5  3185  25C6  3184   	fcall	_delayUS
  2791  04D8  3001               	movlw	1
  2792  04D9  0021               	movlb	1	; select bank1
  2793  04DA  00B4               	movwf	??_main^(0+128)
  2794  04DB  0834               	movf	??_main^(0+128),w
  2795  04DC  07B5               	addwf	main@i^(0+128),f
  2796  04DD  300A               	movlw	10
  2797  04DE  0235               	subwf	main@i^(0+128),w
  2798  04DF  1C03               	skipc
  2799  04E0  2CB0               	goto	l173
  2800  04E1                     l2383:	
  2801                           
  2802                           ;main.c: 71: }
  2803                           ;main.c: 72: LATC &= ~(0b00000010 + 0b00000100);
  2804  04E1  30F9               	movlw	249
  2805  04E2  00B4               	movwf	??_main^(0+128)
  2806  04E3  0834               	movf	??_main^(0+128),w
  2807  04E4  0022               	movlb	2	; select bank2
  2808  04E5  058E               	andwf	14,f	;volatile
  2809  04E6                     l175:	
  2810                           ;main.c: 74: while(1)
  2811                           
  2812                           
  2813                           ;main.c: 75: {
  2814                           ;main.c: 76: if(IR_New_Code)
  2815  04E6  087D               	movf	_IR_New_Code,w
  2816  04E7  1903               	btfsc	3,2
  2817  04E8  2CFD               	goto	l2387
  2818                           
  2819                           ;main.c: 77: {
  2820                           ;main.c: 79: UseIRCode(&IR_New_Code,IR_NEC);
  2821  04E9  0020               	movlb	0	; select bank0
  2822  04EA  0844               	movf	_IR_NEC+3,w
  2823  04EB  0021               	movlb	1	; select bank1
  2824  04EC  00B1               	movwf	(UseIRCode@NEC+3)^(0+128)
  2825  04ED  0020               	movlb	0	; select bank0
  2826  04EE  0843               	movf	_IR_NEC+2,w
  2827  04EF  0021               	movlb	1	; select bank1
  2828  04F0  00B0               	movwf	(UseIRCode@NEC+2)^(0+128)
  2829  04F1  0020               	movlb	0	; select bank0
  2830  04F2  0842               	movf	_IR_NEC+1,w
  2831  04F3  0021               	movlb	1	; select bank1
  2832  04F4  00AF               	movwf	(UseIRCode@NEC+1)^(0+128)
  2833  04F5  0020               	movlb	0	; select bank0
  2834  04F6  0841               	movf	_IR_NEC,w
  2835  04F7  0021               	movlb	1	; select bank1
  2836  04F8  00AE               	movwf	UseIRCode@NEC^(0+128)
  2837  04F9  307D               	movlw	(low (_IR_New_Code| 0))& (0+255)
  2838  04FA  3185  252E  3184   	fcall	_UseIRCode
  2839  04FD                     l2387:	
  2840                           
  2841                           ;main.c: 80: }
  2842                           ;main.c: 81: if(Sent && LEDsdone && IRreceived)
  2843  04FD  0020               	movlb	0	; select bank0
  2844  04FE  085E               	movf	_Sent,w	;volatile
  2845  04FF  1903               	btfsc	3,2
  2846  0500  2D25               	goto	l2405
  2847  0501  085D               	movf	_LEDsdone,w	;volatile
  2848  0502  1903               	btfsc	3,2
  2849  0503  2D25               	goto	l2405
  2850  0504  083F               	movf	_IRreceived,w	;volatile
  2851  0505  1903               	btfsc	3,2
  2852  0506  2D25               	goto	l2405
  2853                           
  2854                           ;main.c: 82: {
  2855                           ;main.c: 83: if(SleepTimer > 1000)
  2856  0507  0837               	movf	_SleepTimer+3,w
  2857  0508  1D03               	btfss	3,2
  2858  0509  2D13               	goto	l2395
  2859  050A  0836               	movf	_SleepTimer+2,w
  2860  050B  1D03               	btfss	3,2
  2861  050C  2D13               	goto	l2395
  2862  050D  30E9               	movlw	233
  2863  050E  0234               	subwf	_SleepTimer,w
  2864  050F  3003               	movlw	3
  2865  0510  3B35               	subwfb	_SleepTimer+1,w
  2866  0511  1C03               	btfss	3,0
  2867  0512  2D1B               	goto	l2403
  2868  0513                     l2395:	
  2869                           
  2870                           ;main.c: 84: {
  2871                           ;main.c: 85: IRreceived = 0;
  2872  0513  01BF               	clrf	_IRreceived	;volatile
  2873  0514  0063               	sleep	;# 
  2874                           
  2875                           ;main.c: 87: __nop();
  2876  0515  0000               	nop
  2877                           
  2878                           ;main.c: 88: __nop();
  2879  0516  0000               	nop
  2880                           
  2881                           ;main.c: 89: ConfigureOscillator();
  2882  0517  3186  263C  3184   	fcall	_ConfigureOscillator
  2883                           
  2884                           ;main.c: 90: }
  2885  051A  2CE6               	goto	l175
  2886  051B                     l2403:	
  2887                           
  2888                           ;main.c: 91: else
  2889                           ;main.c: 92: {
  2890                           ;main.c: 93: SleepTimer++;
  2891  051B  3001               	movlw	1
  2892  051C  0020               	movlb	0	; select bank0
  2893  051D  07B4               	addwf	_SleepTimer,f
  2894  051E  3000               	movlw	0
  2895  051F  3DB5               	addwfc	_SleepTimer+1,f
  2896  0520  3000               	movlw	0
  2897  0521  3DB6               	addwfc	_SleepTimer+2,f
  2898  0522  3000               	movlw	0
  2899  0523  3DB7               	addwfc	_SleepTimer+3,f
  2900                           
  2901                           ;main.c: 94: }
  2902                           ;main.c: 95: }
  2903  0524  2CE6               	goto	l175
  2904  0525                     l2405:	
  2905                           
  2906                           ;main.c: 96: else
  2907                           ;main.c: 97: {
  2908                           ;main.c: 98: SleepTimer = 0;
  2909  0525  3000               	movlw	0
  2910  0526  00B7               	movwf	_SleepTimer+3
  2911  0527  3000               	movlw	0
  2912  0528  00B6               	movwf	_SleepTimer+2
  2913  0529  3000               	movlw	0
  2914  052A  00B5               	movwf	_SleepTimer+1
  2915  052B  3000               	movlw	0
  2916  052C  00B4               	movwf	_SleepTimer
  2917  052D  2CE6               	goto	l175
  2918  052E                     __end_of_main:	
  2919                           
  2920                           	psect	text1
  2921  066D                     __ptext1:	
  2922 ;; *************** function _init_Timers *****************
  2923 ;; Defined at:
  2924 ;;		line 48 in file "Timer.c"
  2925 ;; Parameters:    Size  Location     Type
  2926 ;;		None
  2927 ;; Auto vars:     Size  Location     Type
  2928 ;;		None
  2929 ;; Return value:  Size  Location     Type
  2930 ;;		None               void
  2931 ;; Registers used:
  2932 ;;		wreg, status,2, status,0, pclath, cstack
  2933 ;; Tracked objects:
  2934 ;;		On entry : 0/0
  2935 ;;		On exit  : 0/0
  2936 ;;		Unchanged: 0/0
  2937 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2938 ;;      Params:         0       0       0       0       0       0       0       0
  2939 ;;      Locals:         0       0       0       0       0       0       0       0
  2940 ;;      Temps:          0       0       0       0       0       0       0       0
  2941 ;;      Totals:         0       0       0       0       0       0       0       0
  2942 ;;Total ram usage:        0 bytes
  2943 ;; Hardware stack levels used:    1
  2944 ;; Hardware stack levels required when called:    4
  2945 ;; This function calls:
  2946 ;;		_Timer1Init
  2947 ;;		_Timer2Init
  2948 ;;		_Timer4Init
  2949 ;;		_Timer6Init
  2950 ;; This function is called by:
  2951 ;;		_main
  2952 ;; This function uses a non-reentrant model
  2953 ;;
  2954                           
  2955                           
  2956                           ;psect for function _init_Timers
  2957  066D                     _init_Timers:	
  2958                           
  2959                           ;Timer.c: 50: Timer1Init();
  2960                           
  2961                           ;incstack = 0
  2962                           ; Regs used in _init_Timers: [wreg+status,2+status,0+pclath+cstack]
  2963  066D  3186  2618  3186   	fcall	_Timer1Init
  2964                           
  2965                           ;Timer.c: 51: Timer2Init();
  2966  0670  3186  2604  3186   	fcall	_Timer2Init
  2967                           
  2968                           ;Timer.c: 52: Timer4Init();
  2969  0673  3186  2685  3186   	fcall	_Timer4Init
  2970                           
  2971                           ;Timer.c: 53: Timer6Init();
  2972  0676  3186  2679         	fcall	_Timer6Init
  2973  0678  0008               	return
  2974  0679                     __end_of_init_Timers:	
  2975                           
  2976                           	psect	text2
  2977  0679                     __ptext2:	
  2978 ;; *************** function _Timer6Init *****************
  2979 ;; Defined at:
  2980 ;;		line 229 in file "Timer.c"
  2981 ;; Parameters:    Size  Location     Type
  2982 ;;		None
  2983 ;; Auto vars:     Size  Location     Type
  2984 ;;		None
  2985 ;; Return value:  Size  Location     Type
  2986 ;;		None               void
  2987 ;; Registers used:
  2988 ;;		wreg, status,2, status,0, pclath, cstack
  2989 ;; Tracked objects:
  2990 ;;		On entry : 0/0
  2991 ;;		On exit  : 0/0
  2992 ;;		Unchanged: 0/0
  2993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  2994 ;;      Params:         0       0       0       0       0       0       0       0
  2995 ;;      Locals:         0       0       0       0       0       0       0       0
  2996 ;;      Temps:          0       0       0       0       0       0       0       0
  2997 ;;      Totals:         0       0       0       0       0       0       0       0
  2998 ;;Total ram usage:        0 bytes
  2999 ;; Hardware stack levels used:    1
  3000 ;; Hardware stack levels required when called:    3
  3001 ;; This function calls:
  3002 ;;		_Timer6OFF
  3003 ;; This function is called by:
  3004 ;;		_init_Timers
  3005 ;; This function uses a non-reentrant model
  3006 ;;
  3007                           
  3008                           
  3009                           ;psect for function _Timer6Init
  3010  0679                     _Timer6Init:	
  3011                           
  3012                           ;Timer.c: 233: T6CONbits.T6OUTPS = 0xF;
  3013                           
  3014                           ;incstack = 0
  3015                           ; Regs used in _Timer6Init: [wreg+status,2+status,0+pclath+cstack]
  3016  0679  3078               	movlw	120
  3017  067A  0028               	movlb	8	; select bank8
  3018  067B  049E               	iorwf	30,f	;volatile
  3019                           
  3020                           ;Timer.c: 239: T6CONbits.T6CKPS = 0x2;
  3021  067C  081E               	movf	30,w	;volatile
  3022  067D  39FC               	andlw	-4
  3023  067E  3802               	iorlw	2
  3024  067F  009E               	movwf	30	;volatile
  3025                           
  3026                           ;Timer.c: 241: PR6 = 0xFF;
  3027  0680  30FF               	movlw	255
  3028  0681  009D               	movwf	29	;volatile
  3029                           
  3030                           ;Timer.c: 242: Timer6OFF();
  3031  0682  3187  2717         	fcall	_Timer6OFF
  3032  0684  0008               	return
  3033  0685                     __end_of_Timer6Init:	
  3034                           
  3035                           	psect	text3
  3036  0685                     __ptext3:	
  3037 ;; *************** function _Timer4Init *****************
  3038 ;; Defined at:
  3039 ;;		line 165 in file "Timer.c"
  3040 ;; Parameters:    Size  Location     Type
  3041 ;;		None
  3042 ;; Auto vars:     Size  Location     Type
  3043 ;;		None
  3044 ;; Return value:  Size  Location     Type
  3045 ;;		None               void
  3046 ;; Registers used:
  3047 ;;		wreg, status,2, status,0, pclath, cstack
  3048 ;; Tracked objects:
  3049 ;;		On entry : 0/0
  3050 ;;		On exit  : 0/0
  3051 ;;		Unchanged: 0/0
  3052 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3053 ;;      Params:         0       0       0       0       0       0       0       0
  3054 ;;      Locals:         0       0       0       0       0       0       0       0
  3055 ;;      Temps:          0       0       0       0       0       0       0       0
  3056 ;;      Totals:         0       0       0       0       0       0       0       0
  3057 ;;Total ram usage:        0 bytes
  3058 ;; Hardware stack levels used:    1
  3059 ;; Hardware stack levels required when called:    3
  3060 ;; This function calls:
  3061 ;;		_Timer4OFF
  3062 ;; This function is called by:
  3063 ;;		_init_Timers
  3064 ;; This function uses a non-reentrant model
  3065 ;;
  3066                           
  3067                           
  3068                           ;psect for function _Timer4Init
  3069  0685                     _Timer4Init:	
  3070                           
  3071                           ;Timer.c: 169: T4CONbits.T4OUTPS = 0xF;
  3072                           
  3073                           ;incstack = 0
  3074                           ; Regs used in _Timer4Init: [wreg+status,2+status,0+pclath+cstack]
  3075  0685  3078               	movlw	120
  3076  0686  0028               	movlb	8	; select bank8
  3077  0687  0497               	iorwf	23,f	;volatile
  3078                           
  3079                           ;Timer.c: 175: T4CONbits.T4CKPS = 0x2;
  3080  0688  0817               	movf	23,w	;volatile
  3081  0689  39FC               	andlw	-4
  3082  068A  3802               	iorlw	2
  3083  068B  0097               	movwf	23	;volatile
  3084                           
  3085                           ;Timer.c: 177: PR4 = 0xFF;
  3086  068C  30FF               	movlw	255
  3087  068D  0096               	movwf	22	;volatile
  3088                           
  3089                           ;Timer.c: 178: Timer4OFF();
  3090  068E  3187  2709         	fcall	_Timer4OFF
  3091  0690  0008               	return
  3092  0691                     __end_of_Timer4Init:	
  3093                           
  3094                           	psect	text4
  3095  0709                     __ptext4:	
  3096 ;; *************** function _Timer4OFF *****************
  3097 ;; Defined at:
  3098 ;;		line 197 in file "Timer.c"
  3099 ;; Parameters:    Size  Location     Type
  3100 ;;		None
  3101 ;; Auto vars:     Size  Location     Type
  3102 ;;		None
  3103 ;; Return value:  Size  Location     Type
  3104 ;;		None               void
  3105 ;; Registers used:
  3106 ;;		None
  3107 ;; Tracked objects:
  3108 ;;		On entry : 0/0
  3109 ;;		On exit  : 0/0
  3110 ;;		Unchanged: 0/0
  3111 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3112 ;;      Params:         0       0       0       0       0       0       0       0
  3113 ;;      Locals:         0       0       0       0       0       0       0       0
  3114 ;;      Temps:          0       0       0       0       0       0       0       0
  3115 ;;      Totals:         0       0       0       0       0       0       0       0
  3116 ;;Total ram usage:        0 bytes
  3117 ;; Hardware stack levels used:    1
  3118 ;; Hardware stack levels required when called:    2
  3119 ;; This function calls:
  3120 ;;		Nothing
  3121 ;; This function is called by:
  3122 ;;		_Timer4Init
  3123 ;; This function uses a non-reentrant model
  3124 ;;
  3125                           
  3126                           
  3127                           ;psect for function _Timer4OFF
  3128  0709                     _Timer4OFF:	
  3129                           
  3130                           ;Timer.c: 199: T4CONbits.TMR4ON = 0;
  3131                           
  3132                           ;incstack = 0
  3133                           ; Regs used in _Timer4OFF: []
  3134  0709  0028               	movlb	8	; select bank8
  3135  070A  1117               	bcf	23,2	;volatile
  3136                           
  3137                           ;Timer.c: 200: PIR2bits.TMR4IF = 0;
  3138  070B  0020               	movlb	0	; select bank0
  3139  070C  1092               	bcf	18,1	;volatile
  3140                           
  3141                           ;Timer.c: 201: PIE2bits.TMR4IE = 0;
  3142  070D  0021               	movlb	1	; select bank1
  3143  070E  1092               	bcf	18,1	;volatile
  3144  070F  0008               	return
  3145  0710                     __end_of_Timer4OFF:	
  3146                           
  3147                           	psect	text5
  3148  0604                     __ptext5:	
  3149 ;; *************** function _Timer2Init *****************
  3150 ;; Defined at:
  3151 ;;		line 119 in file "Timer.c"
  3152 ;; Parameters:    Size  Location     Type
  3153 ;;		None
  3154 ;; Auto vars:     Size  Location     Type
  3155 ;;		None
  3156 ;; Return value:  Size  Location     Type
  3157 ;;		None               void
  3158 ;; Registers used:
  3159 ;;		wreg, status,2, status,0, pclath, cstack
  3160 ;; Tracked objects:
  3161 ;;		On entry : 0/0
  3162 ;;		On exit  : 0/0
  3163 ;;		Unchanged: 0/0
  3164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3165 ;;      Params:         0       0       0       0       0       0       0       0
  3166 ;;      Locals:         0       0       0       0       0       0       0       0
  3167 ;;      Temps:          0       0       0       0       0       0       0       0
  3168 ;;      Totals:         0       0       0       0       0       0       0       0
  3169 ;;Total ram usage:        0 bytes
  3170 ;; Hardware stack levels used:    1
  3171 ;; Hardware stack levels required when called:    3
  3172 ;; This function calls:
  3173 ;;		_Timer2OFF
  3174 ;; This function is called by:
  3175 ;;		_init_Timers
  3176 ;; This function uses a non-reentrant model
  3177 ;;
  3178                           
  3179                           
  3180                           ;psect for function _Timer2Init
  3181  0604                     _Timer2Init:	
  3182                           
  3183                           ;Timer.c: 123: T2CONbits.T2OUTPS = 0xE;
  3184                           
  3185                           ;incstack = 0
  3186                           ; Regs used in _Timer2Init: [wreg+status,2+status,0+pclath+cstack]
  3187  0604  0020               	movlb	0	; select bank0
  3188  0605  081C               	movf	28,w	;volatile
  3189  0606  3987               	andlw	-121
  3190  0607  3870               	iorlw	112
  3191  0608  009C               	movwf	28	;volatile
  3192                           
  3193                           ;Timer.c: 129: T2CONbits.T2CKPS = 0x1;
  3194  0609  081C               	movf	28,w	;volatile
  3195  060A  39FC               	andlw	-4
  3196  060B  3801               	iorlw	1
  3197  060C  009C               	movwf	28	;volatile
  3198                           
  3199                           ;Timer.c: 132: CCP2CONbits.CCP2M = 0b1010;
  3200  060D  0025               	movlb	5	; select bank5
  3201  060E  081A               	movf	26,w	;volatile
  3202  060F  39F0               	andlw	-16
  3203  0610  380A               	iorlw	10
  3204  0611  009A               	movwf	26	;volatile
  3205                           
  3206                           ;Timer.c: 133: PR2 = 0xFF;
  3207  0612  30FF               	movlw	255
  3208  0613  0020               	movlb	0	; select bank0
  3209  0614  009B               	movwf	27	;volatile
  3210                           
  3211                           ;Timer.c: 134: Timer2OFF();
  3212  0615  3187  272C         	fcall	_Timer2OFF
  3213  0617  0008               	return
  3214  0618                     __end_of_Timer2Init:	
  3215                           
  3216                           	psect	text6
  3217  072C                     __ptext6:	
  3218 ;; *************** function _Timer2OFF *****************
  3219 ;; Defined at:
  3220 ;;		line 153 in file "Timer.c"
  3221 ;; Parameters:    Size  Location     Type
  3222 ;;		None
  3223 ;; Auto vars:     Size  Location     Type
  3224 ;;		None
  3225 ;; Return value:  Size  Location     Type
  3226 ;;		None               void
  3227 ;; Registers used:
  3228 ;;		None
  3229 ;; Tracked objects:
  3230 ;;		On entry : 0/0
  3231 ;;		On exit  : 0/0
  3232 ;;		Unchanged: 0/0
  3233 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3234 ;;      Params:         0       0       0       0       0       0       0       0
  3235 ;;      Locals:         0       0       0       0       0       0       0       0
  3236 ;;      Temps:          0       0       0       0       0       0       0       0
  3237 ;;      Totals:         0       0       0       0       0       0       0       0
  3238 ;;Total ram usage:        0 bytes
  3239 ;; Hardware stack levels used:    1
  3240 ;; Hardware stack levels required when called:    2
  3241 ;; This function calls:
  3242 ;;		Nothing
  3243 ;; This function is called by:
  3244 ;;		_Timer2Init
  3245 ;; This function uses a non-reentrant model
  3246 ;;
  3247                           
  3248                           
  3249                           ;psect for function _Timer2OFF
  3250  072C                     _Timer2OFF:	
  3251                           
  3252                           ;Timer.c: 155: T2CONbits.TMR2ON = 0;
  3253                           
  3254                           ;incstack = 0
  3255                           ; Regs used in _Timer2OFF: []
  3256  072C  0020               	movlb	0	; select bank0
  3257  072D  111C               	bcf	28,2	;volatile
  3258                           
  3259                           ;Timer.c: 156: PIR1bits.TMR2IF = 0;
  3260  072E  1091               	bcf	17,1	;volatile
  3261                           
  3262                           ;Timer.c: 157: PIE1bits.TMR2IE = 0;
  3263  072F  0021               	movlb	1	; select bank1
  3264  0730  1091               	bcf	17,1	;volatile
  3265  0731  0008               	return
  3266  0732                     __end_of_Timer2OFF:	
  3267                           
  3268                           	psect	text7
  3269  0710                     __ptext7:	
  3270 ;; *************** function _init_IR *****************
  3271 ;; Defined at:
  3272 ;;		line 67 in file "IR.c"
  3273 ;; Parameters:    Size  Location     Type
  3274 ;;		None
  3275 ;; Auto vars:     Size  Location     Type
  3276 ;;		None
  3277 ;; Return value:  Size  Location     Type
  3278 ;;		None               void
  3279 ;; Registers used:
  3280 ;;		wreg, status,2, status,0, pclath, cstack
  3281 ;; Tracked objects:
  3282 ;;		On entry : 0/0
  3283 ;;		On exit  : 0/0
  3284 ;;		Unchanged: 0/0
  3285 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3286 ;;      Params:         0       0       0       0       0       0       0       0
  3287 ;;      Locals:         0       0       0       0       0       0       0       0
  3288 ;;      Temps:          0       0       0       0       0       0       0       0
  3289 ;;      Totals:         0       0       0       0       0       0       0       0
  3290 ;;Total ram usage:        0 bytes
  3291 ;; Hardware stack levels used:    1
  3292 ;; Hardware stack levels required when called:    4
  3293 ;; This function calls:
  3294 ;;		_Enable_IR
  3295 ;;		_Timer1Init
  3296 ;; This function is called by:
  3297 ;;		_main
  3298 ;; This function uses a non-reentrant model
  3299 ;;
  3300                           
  3301                           
  3302                           ;psect for function _init_IR
  3303  0710                     _init_IR:	
  3304                           
  3305                           ;IR.c: 69: Enable_IR();
  3306                           
  3307                           ;incstack = 0
  3308                           ; Regs used in _init_IR: [wreg+status,2+status,0+pclath+cstack]
  3309  0710  3187  275A  3187   	fcall	_Enable_IR
  3310                           
  3311                           ;IR.c: 71: INTCONbits.IOCIE = 1;
  3312  0713  158B               	bsf	11,3	;volatile
  3313                           
  3314                           ;IR.c: 72: Timer1Init();
  3315  0714  3186  2618         	fcall	_Timer1Init
  3316  0716  0008               	return
  3317  0717                     __end_of_init_IR:	
  3318                           
  3319                           	psect	text8
  3320  0618                     __ptext8:	
  3321 ;; *************** function _Timer1Init *****************
  3322 ;; Defined at:
  3323 ;;		line 61 in file "Timer.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;		None
  3326 ;; Auto vars:     Size  Location     Type
  3327 ;;		None
  3328 ;; Return value:  Size  Location     Type
  3329 ;;		None               void
  3330 ;; Registers used:
  3331 ;;		wreg, status,2, status,0, pclath, cstack
  3332 ;; Tracked objects:
  3333 ;;		On entry : 0/0
  3334 ;;		On exit  : 0/0
  3335 ;;		Unchanged: 0/0
  3336 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3337 ;;      Params:         0       0       0       0       0       0       0       0
  3338 ;;      Locals:         0       0       0       0       0       0       0       0
  3339 ;;      Temps:          0       0       0       0       0       0       0       0
  3340 ;;      Totals:         0       0       0       0       0       0       0       0
  3341 ;;Total ram usage:        0 bytes
  3342 ;; Hardware stack levels used:    1
  3343 ;; Hardware stack levels required when called:    3
  3344 ;; This function calls:
  3345 ;;		_Reset_Timer1
  3346 ;;		_Stop_Timer1
  3347 ;; This function is called by:
  3348 ;;		_init_Timers
  3349 ;;		_init_IR
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           
  3354                           ;psect for function _Timer1Init
  3355  0618                     _Timer1Init:	
  3356                           
  3357                           ;Timer.c: 64: T1CONbits.TMR1CS = 0x0;
  3358                           
  3359                           ;incstack = 0
  3360                           ; Regs used in _Timer1Init: [wreg+status,2+status,0+pclath+cstack]
  3361  0618  303F               	movlw	-193
  3362  0619  0020               	movlb	0	; select bank0
  3363  061A  0598               	andwf	24,f	;volatile
  3364                           
  3365                           ;Timer.c: 66: T1CONbits.T1CKPS = 0x3;
  3366  061B  3030               	movlw	48
  3367  061C  0498               	iorwf	24,f	;volatile
  3368                           
  3369                           ;Timer.c: 68: CCP1CONbits.CCP1M = 0b1010;
  3370  061D  0025               	movlb	5	; select bank5
  3371  061E  0813               	movf	19,w	;volatile
  3372  061F  39F0               	andlw	-16
  3373  0620  380A               	iorlw	10
  3374  0621  0093               	movwf	19	;volatile
  3375                           
  3376                           ;Timer.c: 70: PIE1bits.TMR1IE = 0;
  3377  0622  0021               	movlb	1	; select bank1
  3378  0623  1011               	bcf	17,0	;volatile
  3379                           
  3380                           ;Timer.c: 72: Reset_Timer1();
  3381  0624  3187  2756  3186   	fcall	_Reset_Timer1
  3382                           
  3383                           ;Timer.c: 73: Stop_Timer1();
  3384  0627  3187  2762         	fcall	_Stop_Timer1
  3385  0629  0008               	return
  3386  062A                     __end_of_Timer1Init:	
  3387                           
  3388                           	psect	text9
  3389  0762                     __ptext9:	
  3390 ;; *************** function _Stop_Timer1 *****************
  3391 ;; Defined at:
  3392 ;;		line 81 in file "Timer.c"
  3393 ;; Parameters:    Size  Location     Type
  3394 ;;		None
  3395 ;; Auto vars:     Size  Location     Type
  3396 ;;		None
  3397 ;; Return value:  Size  Location     Type
  3398 ;;		None               void
  3399 ;; Registers used:
  3400 ;;		None
  3401 ;; Tracked objects:
  3402 ;;		On entry : 0/0
  3403 ;;		On exit  : 0/0
  3404 ;;		Unchanged: 0/0
  3405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3406 ;;      Params:         0       0       0       0       0       0       0       0
  3407 ;;      Locals:         0       0       0       0       0       0       0       0
  3408 ;;      Temps:          0       0       0       0       0       0       0       0
  3409 ;;      Totals:         0       0       0       0       0       0       0       0
  3410 ;;Total ram usage:        0 bytes
  3411 ;; Hardware stack levels used:    1
  3412 ;; Hardware stack levels required when called:    2
  3413 ;; This function calls:
  3414 ;;		Nothing
  3415 ;; This function is called by:
  3416 ;;		_Timer1Init
  3417 ;; This function uses a non-reentrant model
  3418 ;;
  3419                           
  3420                           
  3421                           ;psect for function _Stop_Timer1
  3422  0762                     _Stop_Timer1:	
  3423                           
  3424                           ;Timer.c: 84: T1CONbits.TMR1ON =0;
  3425                           
  3426                           ;incstack = 0
  3427                           ; Regs used in _Stop_Timer1: []
  3428  0762  0020               	movlb	0	; select bank0
  3429  0763  1018               	bcf	24,0	;volatile
  3430  0764  0008               	return
  3431  0765                     __end_of_Stop_Timer1:	
  3432                           
  3433                           	psect	text10
  3434  0756                     __ptext10:	
  3435 ;; *************** function _Reset_Timer1 *****************
  3436 ;; Defined at:
  3437 ;;		line 103 in file "Timer.c"
  3438 ;; Parameters:    Size  Location     Type
  3439 ;;		None
  3440 ;; Auto vars:     Size  Location     Type
  3441 ;;		None
  3442 ;; Return value:  Size  Location     Type
  3443 ;;		None               void
  3444 ;; Registers used:
  3445 ;;		status,2
  3446 ;; Tracked objects:
  3447 ;;		On entry : 0/0
  3448 ;;		On exit  : 0/0
  3449 ;;		Unchanged: 0/0
  3450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3451 ;;      Params:         0       0       0       0       0       0       0       0
  3452 ;;      Locals:         0       0       0       0       0       0       0       0
  3453 ;;      Temps:          0       0       0       0       0       0       0       0
  3454 ;;      Totals:         0       0       0       0       0       0       0       0
  3455 ;;Total ram usage:        0 bytes
  3456 ;; Hardware stack levels used:    1
  3457 ;; Hardware stack levels required when called:    2
  3458 ;; This function calls:
  3459 ;;		Nothing
  3460 ;; This function is called by:
  3461 ;;		_Timer1Init
  3462 ;; This function uses a non-reentrant model
  3463 ;;
  3464                           
  3465                           
  3466                           ;psect for function _Reset_Timer1
  3467  0756                     _Reset_Timer1:	
  3468                           
  3469                           ;Timer.c: 109: TMR1H = 0;
  3470                           
  3471                           ;incstack = 0
  3472                           ; Regs used in _Reset_Timer1: [status,2]
  3473  0756  0020               	movlb	0	; select bank0
  3474  0757  0197               	clrf	23	;volatile
  3475                           
  3476                           ;Timer.c: 110: TMR1L = 0;
  3477  0758  0196               	clrf	22	;volatile
  3478  0759  0008               	return
  3479  075A                     __end_of_Reset_Timer1:	
  3480                           
  3481                           	psect	text11
  3482  075A                     __ptext11:	
  3483 ;; *************** function _Enable_IR *****************
  3484 ;; Defined at:
  3485 ;;		line 80 in file "IR.c"
  3486 ;; Parameters:    Size  Location     Type
  3487 ;;		None
  3488 ;; Auto vars:     Size  Location     Type
  3489 ;;		None
  3490 ;; Return value:  Size  Location     Type
  3491 ;;		None               void
  3492 ;; Registers used:
  3493 ;;		None
  3494 ;; Tracked objects:
  3495 ;;		On entry : 0/0
  3496 ;;		On exit  : 0/0
  3497 ;;		Unchanged: 0/0
  3498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3499 ;;      Params:         0       0       0       0       0       0       0       0
  3500 ;;      Locals:         0       0       0       0       0       0       0       0
  3501 ;;      Temps:          0       0       0       0       0       0       0       0
  3502 ;;      Totals:         0       0       0       0       0       0       0       0
  3503 ;;Total ram usage:        0 bytes
  3504 ;; Hardware stack levels used:    1
  3505 ;; Hardware stack levels required when called:    2
  3506 ;; This function calls:
  3507 ;;		Nothing
  3508 ;; This function is called by:
  3509 ;;		_init_IR
  3510 ;; This function uses a non-reentrant model
  3511 ;;
  3512                           
  3513                           
  3514                           ;psect for function _Enable_IR
  3515  075A                     _Enable_IR:	
  3516                           
  3517                           ;IR.c: 83: IOCCPbits.IOCCP4 = 1;
  3518                           
  3519                           ;incstack = 0
  3520                           ; Regs used in _Enable_IR: []
  3521  075A  0027               	movlb	7	; select bank7
  3522  075B  1617               	bsf	23,4	;volatile
  3523                           
  3524                           ;IR.c: 85: IOCCNbits.IOCCN4 = 1;
  3525  075C  1618               	bsf	24,4	;volatile
  3526  075D  0008               	return
  3527  075E                     __end_of_Enable_IR:	
  3528                           
  3529                           	psect	text12
  3530  05C6                     __ptext12:	
  3531 ;; *************** function _delayUS *****************
  3532 ;; Defined at:
  3533 ;;		line 50 in file "MISC.c"
  3534 ;; Parameters:    Size  Location     Type
  3535 ;;  US              4   17[BANK0 ] long 
  3536 ;; Auto vars:     Size  Location     Type
  3537 ;;  i               4    0[BANK1 ] long 
  3538 ;;  j               1    4[BANK1 ] unsigned char 
  3539 ;; Return value:  Size  Location     Type
  3540 ;;		None               void
  3541 ;; Registers used:
  3542 ;;		wreg, status,2, status,0
  3543 ;; Tracked objects:
  3544 ;;		On entry : 0/0
  3545 ;;		On exit  : 0/0
  3546 ;;		Unchanged: 0/0
  3547 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3548 ;;      Params:         0       4       0       0       0       0       0       0
  3549 ;;      Locals:         0       0       5       0       0       0       0       0
  3550 ;;      Temps:          0       1       0       0       0       0       0       0
  3551 ;;      Totals:         0       5       5       0       0       0       0       0
  3552 ;;Total ram usage:       10 bytes
  3553 ;; Hardware stack levels used:    1
  3554 ;; Hardware stack levels required when called:    2
  3555 ;; This function calls:
  3556 ;;		Nothing
  3557 ;; This function is called by:
  3558 ;;		_main
  3559 ;; This function uses a non-reentrant model
  3560 ;;
  3561                           
  3562                           
  3563                           ;psect for function _delayUS
  3564  05C6                     _delayUS:	
  3565                           
  3566                           ;MISC.c: 52: long i;
  3567                           ;MISC.c: 53: unsigned char j;
  3568                           ;MISC.c: 54: for(i=0;i<US;i+=31)
  3569                           
  3570                           ;incstack = 0
  3571                           ; Regs used in _delayUS: [wreg+status,2+status,0]
  3572  05C6  3000               	movlw	0
  3573  05C7  0021               	movlb	1	; select bank1
  3574  05C8  00AF               	movwf	(delayUS@i+3)^(0+128)
  3575  05C9  3000               	movlw	0
  3576  05CA  00AE               	movwf	(delayUS@i+2)^(0+128)
  3577  05CB  3000               	movlw	0
  3578  05CC  00AD               	movwf	(delayUS@i+1)^(0+128)
  3579  05CD  3000               	movlw	0
  3580  05CE  00AC               	movwf	delayUS@i^(0+128)
  3581  05CF                     l217:	
  3582  05CF  082F               	movf	(delayUS@i+3)^(0+128),w
  3583  05D0  3A80               	xorlw	128
  3584  05D1  0020               	movlb	0	; select bank0
  3585  05D2  00DA               	movwf	??_delayUS
  3586  05D3  0859               	movf	delayUS@US+3,w
  3587  05D4  3A80               	xorlw	128
  3588  05D5  025A               	subwf	??_delayUS,w
  3589  05D6  0021               	movlb	1	; select bank1
  3590  05D7  1D03               	skipz
  3591  05D8  2DE9               	goto	u1873
  3592  05D9  0020               	movlb	0	; select bank0
  3593  05DA  0858               	movf	delayUS@US+2,w
  3594  05DB  0021               	movlb	1	; select bank1
  3595  05DC  022E               	subwf	(delayUS@i+2)^(0+128),w
  3596  05DD  1D03               	skipz
  3597  05DE  2DE9               	goto	u1873
  3598  05DF  0020               	movlb	0	; select bank0
  3599  05E0  0857               	movf	delayUS@US+1,w
  3600  05E1  0021               	movlb	1	; select bank1
  3601  05E2  022D               	subwf	(delayUS@i+1)^(0+128),w
  3602  05E3  1D03               	skipz
  3603  05E4  2DE9               	goto	u1873
  3604  05E5  0020               	movlb	0	; select bank0
  3605  05E6  0856               	movf	delayUS@US,w
  3606  05E7  0021               	movlb	1	; select bank1
  3607  05E8  022C               	subwf	delayUS@i^(0+128),w
  3608  05E9                     u1873:	
  3609  05E9  1803               	btfsc	3,0
  3610  05EA  0008               	return
  3611                           
  3612                           ;MISC.c: 55: {
  3613                           ;MISC.c: 56: for(j=0;j<8;j++)
  3614  05EB  01B0               	clrf	delayUS@j^(0+128)
  3615  05EC  3008               	movlw	8
  3616  05ED  0230               	subwf	delayUS@j^(0+128),w
  3617  05EE  1803               	btfsc	3,0
  3618  05EF  2DFB               	goto	l2325
  3619  05F0                     l219:	
  3620                           
  3621                           ;MISC.c: 57: {
  3622                           ;MISC.c: 58: __nop();
  3623  05F0  0000               	nop
  3624  05F1  3001               	movlw	1
  3625  05F2  0020               	movlb	0	; select bank0
  3626  05F3  00DA               	movwf	??_delayUS
  3627  05F4  085A               	movf	??_delayUS,w
  3628  05F5  0021               	movlb	1	; select bank1
  3629  05F6  07B0               	addwf	delayUS@j^(0+128),f
  3630  05F7  3008               	movlw	8
  3631  05F8  0230               	subwf	delayUS@j^(0+128),w
  3632  05F9  1C03               	skipc
  3633  05FA  2DF0               	goto	l219
  3634  05FB                     l2325:	
  3635  05FB  301F               	movlw	31
  3636  05FC  07AC               	addwf	delayUS@i^(0+128),f
  3637  05FD  3000               	movlw	0
  3638  05FE  3DAD               	addwfc	(delayUS@i+1)^(0+128),f
  3639  05FF  3000               	movlw	0
  3640  0600  3DAE               	addwfc	(delayUS@i+2)^(0+128),f
  3641  0601  3000               	movlw	0
  3642  0602  3DAF               	addwfc	(delayUS@i+3)^(0+128),f
  3643  0603  2DCF               	goto	l217
  3644  0604                     __end_of_delayUS:	
  3645                           
  3646                           	psect	text13
  3647  052E                     __ptext13:	
  3648 ;; *************** function _UseIRCode *****************
  3649 ;; Defined at:
  3650 ;;		line 282 in file "IR.c"
  3651 ;; Parameters:    Size  Location     Type
  3652 ;;  Code            1    wreg     PTR unsigned char 
  3653 ;;		 -> IR_New_Code(1), 
  3654 ;;  NEC             4    2[BANK1 ] unsigned long 
  3655 ;; Auto vars:     Size  Location     Type
  3656 ;;  Code            1   21[BANK0 ] PTR unsigned char 
  3657 ;;		 -> IR_New_Code(1), 
  3658 ;; Return value:  Size  Location     Type
  3659 ;;		None               void
  3660 ;; Registers used:
  3661 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  3662 ;; Tracked objects:
  3663 ;;		On entry : 0/0
  3664 ;;		On exit  : 0/0
  3665 ;;		Unchanged: 0/0
  3666 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3667 ;;      Params:         0       0       4       0       0       0       0       0
  3668 ;;      Locals:         0       1       0       0       0       0       0       0
  3669 ;;      Temps:          0       0       2       0       0       0       0       0
  3670 ;;      Totals:         0       1       6       0       0       0       0       0
  3671 ;;Total ram usage:        7 bytes
  3672 ;; Hardware stack levels used:    1
  3673 ;; Hardware stack levels required when called:    4
  3674 ;; This function calls:
  3675 ;;		_SendRF
  3676 ;;		_Set_Timer6
  3677 ;;		_Timer6OFF
  3678 ;;		_Timer6ON
  3679 ;;		_Timer6Reset
  3680 ;; This function is called by:
  3681 ;;		_main
  3682 ;; This function uses a non-reentrant model
  3683 ;;
  3684                           
  3685                           
  3686                           ;psect for function _UseIRCode
  3687  052E                     _UseIRCode:	
  3688                           
  3689                           ;incstack = 0
  3690                           ; Regs used in _UseIRCode: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  3691                           ;UseIRCode@Code stored from wreg
  3692  052E  0020               	movlb	0	; select bank0
  3693  052F  00DA               	movwf	UseIRCode@Code
  3694                           
  3695                           ;IR.c: 284: Timer6OFF();
  3696  0530  3187  2717  3185   	fcall	_Timer6OFF
  3697                           
  3698                           ;IR.c: 285: Timer6Reset();
  3699  0533  3187  2765  3185   	fcall	_Timer6Reset
  3700                           
  3701                           ;IR.c: 286: if(*Code == 2)
  3702  0536  0020               	movlb	0	; select bank0
  3703  0537  085A               	movf	UseIRCode@Code,w
  3704  0538  0086               	movwf	6
  3705  0539  0187               	clrf	7
  3706  053A  3002               	movlw	2
  3707  053B  0601               	xorwf	1,w
  3708  053C  1D03               	btfss	3,2
  3709  053D  2D42               	goto	l2335
  3710                           
  3711                           ;IR.c: 287: {
  3712                           ;IR.c: 288: LATC |= 0b00000100;
  3713  053E  0022               	movlb	2	; select bank2
  3714  053F  150E               	bsf	14,2	;volatile
  3715                           
  3716                           ;IR.c: 289: LEDsdone = 0;
  3717  0540  0020               	movlb	0	; select bank0
  3718  0541  01DD               	clrf	_LEDsdone	;volatile
  3719  0542                     l2335:	
  3720                           
  3721                           ;IR.c: 290: }
  3722                           ;IR.c: 291: if(NEC == 0x1CE350AF)
  3723  0542  30AF               	movlw	175
  3724  0543  0021               	movlb	1	; select bank1
  3725  0544  062E               	xorwf	UseIRCode@NEC^(0+128),w
  3726  0545  3050               	movlw	80
  3727  0546  1903               	skipnz
  3728  0547  062F               	xorwf	(UseIRCode@NEC+1)^(0+128),w
  3729  0548  30E3               	movlw	227
  3730  0549  1903               	skipnz
  3731  054A  0630               	xorwf	(UseIRCode@NEC+2)^(0+128),w
  3732  054B  301C               	movlw	28
  3733  054C  1903               	skipnz
  3734  054D  0631               	xorwf	(UseIRCode@NEC+3)^(0+128),w
  3735  054E  1D03               	btfss	3,2
  3736  054F  2D65               	goto	l480
  3737                           
  3738                           ;IR.c: 292: {
  3739                           ;IR.c: 293: LATC |= 0b00000001;
  3740  0550  0022               	movlb	2	; select bank2
  3741  0551  140E               	bsf	14,0	;volatile
  3742                           
  3743                           ;IR.c: 294: LEDsdone = 0;
  3744  0552  0020               	movlb	0	; select bank0
  3745  0553  01DD               	clrf	_LEDsdone	;volatile
  3746                           
  3747                           ;IR.c: 295: SendRF(ChannelF, 12, 10);
  3748  0554  300C               	movlw	12
  3749  0555  0021               	movlb	1	; select bank1
  3750  0556  00B2               	movwf	??_UseIRCode^(0+128)
  3751  0557  0832               	movf	??_UseIRCode^(0+128),w
  3752  0558  0020               	movlb	0	; select bank0
  3753  0559  00D6               	movwf	SendRF@size
  3754  055A  300A               	movlw	10
  3755  055B  0021               	movlb	1	; select bank1
  3756  055C  00B3               	movwf	(??_UseIRCode+1)^(0+128)
  3757  055D  0833               	movf	(??_UseIRCode+1)^(0+128),w
  3758  055E  0020               	movlb	0	; select bank0
  3759  055F  00D7               	movwf	SendRF@RepeatAmount
  3760  0560  30A0               	movlw	(low (_ChannelF| 0))& (0+255)
  3761  0561  3185  257B  3185   	fcall	_SendRF
  3762                           
  3763                           ;IR.c: 296: }
  3764  0564  2D69               	goto	l2345
  3765  0565                     l480:	
  3766                           
  3767                           ;IR.c: 297: else
  3768                           ;IR.c: 298: {
  3769                           ;IR.c: 299: LATC |= 0b00000010;
  3770  0565  0022               	movlb	2	; select bank2
  3771  0566  148E               	bsf	14,1	;volatile
  3772                           
  3773                           ;IR.c: 300: LEDsdone = 0;
  3774  0567  0020               	movlb	0	; select bank0
  3775  0568  01DD               	clrf	_LEDsdone	;volatile
  3776  0569                     l2345:	
  3777                           ;IR.c: 301: }
  3778                           ;IR.c: 302: while(!Sent);
  3779                           
  3780  0569  0020               	movlb	0	; select bank0
  3781  056A  085E               	movf	_Sent,w	;volatile
  3782  056B  1903               	btfsc	3,2
  3783  056C  2D69               	goto	l2345
  3784                           
  3785                           ;IR.c: 303: Set_Timer6(0xFF);
  3786  056D  30FF               	movlw	255
  3787  056E  3187  2732  3185   	fcall	_Set_Timer6
  3788                           
  3789                           ;IR.c: 304: PIR2bits.TMR6IF = 0;
  3790  0571  0020               	movlb	0	; select bank0
  3791  0572  1112               	bcf	18,2	;volatile
  3792                           
  3793                           ;IR.c: 305: Timer6ON();
  3794  0573  3187  273E         	fcall	_Timer6ON
  3795                           
  3796                           ;IR.c: 306: *Code = 0;
  3797  0575  0020               	movlb	0	; select bank0
  3798  0576  085A               	movf	UseIRCode@Code,w
  3799  0577  0086               	movwf	6
  3800  0578  0187               	clrf	7
  3801  0579  0181               	clrf	1
  3802  057A  0008               	return
  3803  057B                     __end_of_UseIRCode:	
  3804                           
  3805                           	psect	text14
  3806  0765                     __ptext14:	
  3807 ;; *************** function _Timer6Reset *****************
  3808 ;; Defined at:
  3809 ;;		line 273 in file "Timer.c"
  3810 ;; Parameters:    Size  Location     Type
  3811 ;;		None
  3812 ;; Auto vars:     Size  Location     Type
  3813 ;;		None
  3814 ;; Return value:  Size  Location     Type
  3815 ;;		None               void
  3816 ;; Registers used:
  3817 ;;		status,2
  3818 ;; Tracked objects:
  3819 ;;		On entry : 0/0
  3820 ;;		On exit  : 0/0
  3821 ;;		Unchanged: 0/0
  3822 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3823 ;;      Params:         0       0       0       0       0       0       0       0
  3824 ;;      Locals:         0       0       0       0       0       0       0       0
  3825 ;;      Temps:          0       0       0       0       0       0       0       0
  3826 ;;      Totals:         0       0       0       0       0       0       0       0
  3827 ;;Total ram usage:        0 bytes
  3828 ;; Hardware stack levels used:    1
  3829 ;; Hardware stack levels required when called:    2
  3830 ;; This function calls:
  3831 ;;		Nothing
  3832 ;; This function is called by:
  3833 ;;		_UseIRCode
  3834 ;; This function uses a non-reentrant model
  3835 ;;
  3836                           
  3837                           
  3838                           ;psect for function _Timer6Reset
  3839  0765                     _Timer6Reset:	
  3840                           
  3841                           ;Timer.c: 275: TMR6 = 0;
  3842                           
  3843                           ;incstack = 0
  3844                           ; Regs used in _Timer6Reset: [status,2]
  3845  0765  0028               	movlb	8	; select bank8
  3846  0766  019C               	clrf	28	;volatile
  3847  0767  0008               	return
  3848  0768                     __end_of_Timer6Reset:	
  3849                           
  3850                           	psect	text15
  3851  073E                     __ptext15:	
  3852 ;; *************** function _Timer6ON *****************
  3853 ;; Defined at:
  3854 ;;		line 250 in file "Timer.c"
  3855 ;; Parameters:    Size  Location     Type
  3856 ;;		None
  3857 ;; Auto vars:     Size  Location     Type
  3858 ;;		None
  3859 ;; Return value:  Size  Location     Type
  3860 ;;		None               void
  3861 ;; Registers used:
  3862 ;;		None
  3863 ;; Tracked objects:
  3864 ;;		On entry : 0/0
  3865 ;;		On exit  : 0/0
  3866 ;;		Unchanged: 0/0
  3867 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3868 ;;      Params:         0       0       0       0       0       0       0       0
  3869 ;;      Locals:         0       0       0       0       0       0       0       0
  3870 ;;      Temps:          0       0       0       0       0       0       0       0
  3871 ;;      Totals:         0       0       0       0       0       0       0       0
  3872 ;;Total ram usage:        0 bytes
  3873 ;; Hardware stack levels used:    1
  3874 ;; Hardware stack levels required when called:    2
  3875 ;; This function calls:
  3876 ;;		Nothing
  3877 ;; This function is called by:
  3878 ;;		_UseIRCode
  3879 ;; This function uses a non-reentrant model
  3880 ;;
  3881                           
  3882                           
  3883                           ;psect for function _Timer6ON
  3884  073E                     _Timer6ON:	
  3885                           
  3886                           ;Timer.c: 252: T6CONbits.TMR6ON = 1;
  3887                           
  3888                           ;incstack = 0
  3889                           ; Regs used in _Timer6ON: []
  3890  073E  0028               	movlb	8	; select bank8
  3891  073F  151E               	bsf	30,2	;volatile
  3892                           
  3893                           ;Timer.c: 253: PIE2bits.TMR6IE = 1;
  3894  0740  0021               	movlb	1	; select bank1
  3895  0741  1512               	bsf	18,2	;volatile
  3896  0742  0008               	return
  3897  0743                     __end_of_Timer6ON:	
  3898                           
  3899                           	psect	text16
  3900  0717                     __ptext16:	
  3901 ;; *************** function _Timer6OFF *****************
  3902 ;; Defined at:
  3903 ;;		line 261 in file "Timer.c"
  3904 ;; Parameters:    Size  Location     Type
  3905 ;;		None
  3906 ;; Auto vars:     Size  Location     Type
  3907 ;;		None
  3908 ;; Return value:  Size  Location     Type
  3909 ;;		None               void
  3910 ;; Registers used:
  3911 ;;		None
  3912 ;; Tracked objects:
  3913 ;;		On entry : 0/0
  3914 ;;		On exit  : 0/0
  3915 ;;		Unchanged: 0/0
  3916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3917 ;;      Params:         0       0       0       0       0       0       0       0
  3918 ;;      Locals:         0       0       0       0       0       0       0       0
  3919 ;;      Temps:          0       0       0       0       0       0       0       0
  3920 ;;      Totals:         0       0       0       0       0       0       0       0
  3921 ;;Total ram usage:        0 bytes
  3922 ;; Hardware stack levels used:    1
  3923 ;; Hardware stack levels required when called:    2
  3924 ;; This function calls:
  3925 ;;		Nothing
  3926 ;; This function is called by:
  3927 ;;		_Timer6Init
  3928 ;;		_UseIRCode
  3929 ;; This function uses a non-reentrant model
  3930 ;;
  3931                           
  3932                           
  3933                           ;psect for function _Timer6OFF
  3934  0717                     _Timer6OFF:	
  3935                           
  3936                           ;Timer.c: 263: T6CONbits.TMR6ON = 0;
  3937                           
  3938                           ;incstack = 0
  3939                           ; Regs used in _Timer6OFF: []
  3940  0717  0028               	movlb	8	; select bank8
  3941  0718  111E               	bcf	30,2	;volatile
  3942                           
  3943                           ;Timer.c: 264: PIR2bits.TMR6IF = 0;
  3944  0719  0020               	movlb	0	; select bank0
  3945  071A  1112               	bcf	18,2	;volatile
  3946                           
  3947                           ;Timer.c: 265: PIE2bits.TMR6IE = 0;
  3948  071B  0021               	movlb	1	; select bank1
  3949  071C  1112               	bcf	18,2	;volatile
  3950  071D  0008               	return
  3951  071E                     __end_of_Timer6OFF:	
  3952                           
  3953                           	psect	text17
  3954  0732                     __ptext17:	
  3955 ;; *************** function _Set_Timer6 *****************
  3956 ;; Defined at:
  3957 ;;		line 283 in file "Timer.c"
  3958 ;; Parameters:    Size  Location     Type
  3959 ;;  time            1    wreg     unsigned char 
  3960 ;; Auto vars:     Size  Location     Type
  3961 ;;  time            1   17[BANK0 ] unsigned char 
  3962 ;; Return value:  Size  Location     Type
  3963 ;;		None               void
  3964 ;; Registers used:
  3965 ;;		wreg
  3966 ;; Tracked objects:
  3967 ;;		On entry : 0/0
  3968 ;;		On exit  : 0/0
  3969 ;;		Unchanged: 0/0
  3970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  3971 ;;      Params:         0       0       0       0       0       0       0       0
  3972 ;;      Locals:         0       1       0       0       0       0       0       0
  3973 ;;      Temps:          0       0       0       0       0       0       0       0
  3974 ;;      Totals:         0       1       0       0       0       0       0       0
  3975 ;;Total ram usage:        1 bytes
  3976 ;; Hardware stack levels used:    1
  3977 ;; Hardware stack levels required when called:    2
  3978 ;; This function calls:
  3979 ;;		Nothing
  3980 ;; This function is called by:
  3981 ;;		_UseIRCode
  3982 ;; This function uses a non-reentrant model
  3983 ;;
  3984                           
  3985                           
  3986                           ;psect for function _Set_Timer6
  3987  0732                     _Set_Timer6:	
  3988                           
  3989                           ;incstack = 0
  3990                           ; Regs used in _Set_Timer6: [wreg]
  3991                           ;Set_Timer6@time stored from wreg
  3992  0732  0020               	movlb	0	; select bank0
  3993  0733  00D6               	movwf	Set_Timer6@time
  3994                           
  3995                           ;Timer.c: 285: PR6 = time;
  3996  0734  0856               	movf	Set_Timer6@time,w
  3997  0735  0028               	movlb	8	; select bank8
  3998  0736  009D               	movwf	29	;volatile
  3999  0737  0008               	return
  4000  0738                     __end_of_Set_Timer6:	
  4001                           
  4002                           	psect	text18
  4003  057B                     __ptext18:	
  4004 ;; *************** function _SendRF *****************
  4005 ;; Defined at:
  4006 ;;		line 56 in file "RF.c"
  4007 ;; Parameters:    Size  Location     Type
  4008 ;;  Code            1    wreg     PTR unsigned char 
  4009 ;;		 -> ChannelF(12), 
  4010 ;;  size            1   17[BANK0 ] unsigned char 
  4011 ;;  RepeatAmount    1   18[BANK0 ] unsigned char 
  4012 ;; Auto vars:     Size  Location     Type
  4013 ;;  Code            1    0[BANK1 ] PTR unsigned char 
  4014 ;;		 -> ChannelF(12), 
  4015 ;;  i               1    1[BANK1 ] unsigned char 
  4016 ;; Return value:  Size  Location     Type
  4017 ;;                  1    wreg      unsigned char 
  4018 ;; Registers used:
  4019 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4020 ;; Tracked objects:
  4021 ;;		On entry : 0/0
  4022 ;;		On exit  : 0/0
  4023 ;;		Unchanged: 0/0
  4024 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4025 ;;      Params:         0       2       0       0       0       0       0       0
  4026 ;;      Locals:         0       0       2       0       0       0       0       0
  4027 ;;      Temps:          0       2       0       0       0       0       0       0
  4028 ;;      Totals:         0       4       2       0       0       0       0       0
  4029 ;;Total ram usage:        6 bytes
  4030 ;; Hardware stack levels used:    1
  4031 ;; Hardware stack levels required when called:    3
  4032 ;; This function calls:
  4033 ;;		_Timer2ON
  4034 ;; This function is called by:
  4035 ;;		_UseIRCode
  4036 ;;		_SendRF_wait
  4037 ;; This function uses a non-reentrant model
  4038 ;;
  4039                           
  4040                           
  4041                           ;psect for function _SendRF
  4042  057B                     _SendRF:	
  4043                           
  4044                           ;incstack = 0
  4045                           ; Regs used in _SendRF: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4046                           ;SendRF@Code stored from wreg
  4047  057B  0021               	movlb	1	; select bank1
  4048  057C  00AC               	movwf	SendRF@Code^(0+128)
  4049                           
  4050                           ;RF.c: 58: unsigned char i;
  4051                           ;RF.c: 59: if(Sent == 1)
  4052  057D  0020               	movlb	0	; select bank0
  4053  057E  035E               	decf	_Sent,w	;volatile
  4054  057F  1D03               	btfss	3,2
  4055  0580  2DC4               	goto	l2281
  4056                           
  4057                           ;RF.c: 60: {
  4058                           ;RF.c: 62: Sent = 0;
  4059  0581  01DE               	clrf	_Sent	;volatile
  4060                           
  4061                           ;RF.c: 63: Sendcount = RepeatAmount;
  4062  0582  0857               	movf	SendRF@RepeatAmount,w
  4063  0583  00D8               	movwf	??_SendRF
  4064  0584  0858               	movf	??_SendRF,w
  4065  0585  00C0               	movwf	_Sendcount	;volatile
  4066                           
  4067                           ;RF.c: 64: RFsendFlag = 1;
  4068  0586  3001               	movlw	1
  4069  0587  00D8               	movwf	??_SendRF
  4070  0588  0858               	movf	??_SendRF,w
  4071  0589  00FC               	movwf	_RFsendFlag	;volatile
  4072                           
  4073                           ;RF.c: 65: RFcodeBit = 0;
  4074  058A  01FA               	clrf	_RFcodeBit
  4075                           
  4076                           ;RF.c: 66: RFcodePlace = 1;
  4077  058B  01FB               	clrf	_RFcodePlace
  4078  058C  0AFB               	incf	_RFcodePlace,f
  4079                           
  4080                           ;RF.c: 69: if(size >= 20)
  4081  058D  3014               	movlw	20
  4082  058E  0256               	subwf	SendRF@size,w
  4083  058F  1C03               	skipc
  4084  0590  2D93               	goto	l2261
  4085                           
  4086                           ;RF.c: 70: {
  4087                           ;RF.c: 71: return 0;
  4088  0591  3000               	movlw	0
  4089  0592  0008               	return
  4090  0593                     l2261:	
  4091                           
  4092                           ;RF.c: 72: }
  4093                           ;RF.c: 73: for(i=0;i<size;i++)
  4094  0593  0021               	movlb	1	; select bank1
  4095  0594  01AD               	clrf	SendRF@i^(0+128)
  4096  0595                     l2267:	
  4097  0595  0020               	movlb	0	; select bank0
  4098  0596  0856               	movf	SendRF@size,w
  4099  0597  0021               	movlb	1	; select bank1
  4100  0598  022D               	subwf	SendRF@i^(0+128),w
  4101  0599  1803               	btfsc	3,0
  4102  059A  2DB2               	goto	l2269
  4103                           
  4104                           ;RF.c: 74: {
  4105                           ;RF.c: 75: RFsendCode[i] = Code[i];
  4106  059B  082D               	movf	SendRF@i^(0+128),w
  4107  059C  072C               	addwf	SendRF@Code^(0+128),w
  4108  059D  0020               	movlb	0	; select bank0
  4109  059E  00D8               	movwf	??_SendRF
  4110  059F  0858               	movf	??_SendRF,w
  4111  05A0  0086               	movwf	6
  4112  05A1  0187               	clrf	7
  4113  05A2  0801               	movf	1,w
  4114  05A3  00D9               	movwf	??_SendRF+1
  4115  05A4  0021               	movlb	1	; select bank1
  4116  05A5  082D               	movf	SendRF@i^(0+128),w
  4117  05A6  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4118  05A7  0086               	movwf	6
  4119  05A8  0187               	clrf	7
  4120  05A9  0020               	movlb	0	; select bank0
  4121  05AA  0859               	movf	??_SendRF+1,w
  4122  05AB  0081               	movwf	1
  4123  05AC  3001               	movlw	1
  4124  05AD  00D8               	movwf	??_SendRF
  4125  05AE  0858               	movf	??_SendRF,w
  4126  05AF  0021               	movlb	1	; select bank1
  4127  05B0  07AD               	addwf	SendRF@i^(0+128),f
  4128  05B1  2D95               	goto	l2267
  4129  05B2                     l2269:	
  4130                           
  4131                           ;RF.c: 76: }
  4132                           ;RF.c: 77: RFsendCode[i] = 99;
  4133  05B2  3063               	movlw	99
  4134  05B3  0020               	movlb	0	; select bank0
  4135  05B4  00D8               	movwf	??_SendRF
  4136  05B5  0021               	movlb	1	; select bank1
  4137  05B6  082D               	movf	SendRF@i^(0+128),w
  4138  05B7  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4139  05B8  0086               	movwf	6
  4140  05B9  0187               	clrf	7
  4141  05BA  0020               	movlb	0	; select bank0
  4142  05BB  0858               	movf	??_SendRF,w
  4143  05BC  0081               	movwf	1
  4144                           
  4145                           ;RF.c: 79: TMR2 = 0;
  4146  05BD  019A               	clrf	26	;volatile
  4147                           
  4148                           ;RF.c: 80: (PR2 = 240);
  4149  05BE  30F0               	movlw	240
  4150  05BF  009B               	movwf	27	;volatile
  4151                           
  4152                           ;RF.c: 81: Timer2ON();
  4153  05C0  3187  2743         	fcall	_Timer2ON
  4154                           
  4155                           ;RF.c: 82: return 1;
  4156  05C2  3001               	movlw	1
  4157  05C3  0008               	return
  4158  05C4                     l2281:	
  4159                           
  4160                           ;RF.c: 83: }
  4161                           ;RF.c: 84: return 2;
  4162  05C4  3002               	movlw	2
  4163  05C5  0008               	return
  4164  05C6                     __end_of_SendRF:	
  4165                           
  4166                           	psect	text19
  4167  0743                     __ptext19:	
  4168 ;; *************** function _Timer2ON *****************
  4169 ;; Defined at:
  4170 ;;		line 142 in file "Timer.c"
  4171 ;; Parameters:    Size  Location     Type
  4172 ;;		None
  4173 ;; Auto vars:     Size  Location     Type
  4174 ;;		None
  4175 ;; Return value:  Size  Location     Type
  4176 ;;		None               void
  4177 ;; Registers used:
  4178 ;;		None
  4179 ;; Tracked objects:
  4180 ;;		On entry : 0/0
  4181 ;;		On exit  : 0/0
  4182 ;;		Unchanged: 0/0
  4183 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4184 ;;      Params:         0       0       0       0       0       0       0       0
  4185 ;;      Locals:         0       0       0       0       0       0       0       0
  4186 ;;      Temps:          0       0       0       0       0       0       0       0
  4187 ;;      Totals:         0       0       0       0       0       0       0       0
  4188 ;;Total ram usage:        0 bytes
  4189 ;; Hardware stack levels used:    1
  4190 ;; Hardware stack levels required when called:    2
  4191 ;; This function calls:
  4192 ;;		Nothing
  4193 ;; This function is called by:
  4194 ;;		_SendRF
  4195 ;; This function uses a non-reentrant model
  4196 ;;
  4197                           
  4198                           
  4199                           ;psect for function _Timer2ON
  4200  0743                     _Timer2ON:	
  4201                           
  4202                           ;Timer.c: 144: T2CONbits.TMR2ON = 1;
  4203                           
  4204                           ;incstack = 0
  4205                           ; Regs used in _Timer2ON: []
  4206  0743  0020               	movlb	0	; select bank0
  4207  0744  151C               	bsf	28,2	;volatile
  4208                           
  4209                           ;Timer.c: 145: PIE1bits.TMR2IE = 1;
  4210  0745  0021               	movlb	1	; select bank1
  4211  0746  1491               	bsf	17,1	;volatile
  4212  0747  0008               	return
  4213  0748                     __end_of_Timer2ON:	
  4214                           
  4215                           	psect	text20
  4216  062A                     __ptext20:	
  4217 ;; *************** function _InitApp *****************
  4218 ;; Defined at:
  4219 ;;		line 55 in file "user.c"
  4220 ;; Parameters:    Size  Location     Type
  4221 ;;		None
  4222 ;; Auto vars:     Size  Location     Type
  4223 ;;		None
  4224 ;; Return value:  Size  Location     Type
  4225 ;;		None               void
  4226 ;; Registers used:
  4227 ;;		status,2
  4228 ;; Tracked objects:
  4229 ;;		On entry : 0/0
  4230 ;;		On exit  : 0/0
  4231 ;;		Unchanged: 0/0
  4232 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4233 ;;      Params:         0       0       0       0       0       0       0       0
  4234 ;;      Locals:         0       0       0       0       0       0       0       0
  4235 ;;      Temps:          0       0       0       0       0       0       0       0
  4236 ;;      Totals:         0       0       0       0       0       0       0       0
  4237 ;;Total ram usage:        0 bytes
  4238 ;; Hardware stack levels used:    1
  4239 ;; Hardware stack levels required when called:    2
  4240 ;; This function calls:
  4241 ;;		Nothing
  4242 ;; This function is called by:
  4243 ;;		_main
  4244 ;; This function uses a non-reentrant model
  4245 ;;
  4246                           
  4247                           
  4248                           ;psect for function _InitApp
  4249  062A                     _InitApp:	
  4250                           
  4251                           ;user.c: 57: TRISCbits.TRISC0 = 0;
  4252                           
  4253                           ;incstack = 0
  4254                           ; Regs used in _InitApp: [status,2]
  4255  062A  0021               	movlb	1	; select bank1
  4256  062B  100E               	bcf	14,0	;volatile
  4257                           
  4258                           ;user.c: 58: TRISCbits.TRISC1 = 0;
  4259  062C  108E               	bcf	14,1	;volatile
  4260                           
  4261                           ;user.c: 59: TRISCbits.TRISC2 = 0;
  4262  062D  110E               	bcf	14,2	;volatile
  4263                           
  4264                           ;user.c: 60: TRISCbits.TRISC3 = 0;
  4265  062E  118E               	bcf	14,3	;volatile
  4266                           
  4267                           ;user.c: 62: TRISCbits.TRISC5 = 1;
  4268  062F  168E               	bsf	14,5	;volatile
  4269                           
  4270                           ;user.c: 63: TRISCbits.TRISC4 = 1;
  4271  0630  160E               	bsf	14,4	;volatile
  4272                           
  4273                           ;user.c: 64: ANSELC = 0;
  4274  0631  0023               	movlb	3	; select bank3
  4275  0632  018E               	clrf	14	;volatile
  4276                           
  4277                           ;user.c: 65: SLRCONCbits.SLRC3 = 0;
  4278  0633  0026               	movlb	6	; select bank6
  4279  0634  118E               	bcf	14,3	;volatile
  4280                           
  4281                           ;user.c: 66: LATC =0;
  4282  0635  0022               	movlb	2	; select bank2
  4283  0636  018E               	clrf	14	;volatile
  4284                           
  4285                           ;user.c: 68: VREGCONbits.VREGPM = 1;
  4286  0637  0023               	movlb	3	; select bank3
  4287  0638  1497               	bsf	23,1	;volatile
  4288                           
  4289                           ;user.c: 71: INTCONbits.PEIE = 1;
  4290  0639  170B               	bsf	11,6	;volatile
  4291                           
  4292                           ;user.c: 72: INTCONbits.GIE = 1;
  4293  063A  178B               	bsf	11,7	;volatile
  4294  063B  0008               	return
  4295  063C                     __end_of_InitApp:	
  4296                           
  4297                           	psect	text21
  4298  063C                     __ptext21:	
  4299 ;; *************** function _ConfigureOscillator *****************
  4300 ;; Defined at:
  4301 ;;		line 48 in file "system.c"
  4302 ;; Parameters:    Size  Location     Type
  4303 ;;		None
  4304 ;; Auto vars:     Size  Location     Type
  4305 ;;		None
  4306 ;; Return value:  Size  Location     Type
  4307 ;;		None               void
  4308 ;; Registers used:
  4309 ;;		wreg, status,2, status,0
  4310 ;; Tracked objects:
  4311 ;;		On entry : 0/0
  4312 ;;		On exit  : 0/0
  4313 ;;		Unchanged: 0/0
  4314 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4315 ;;      Params:         0       0       0       0       0       0       0       0
  4316 ;;      Locals:         0       0       0       0       0       0       0       0
  4317 ;;      Temps:          0       0       0       0       0       0       0       0
  4318 ;;      Totals:         0       0       0       0       0       0       0       0
  4319 ;;Total ram usage:        0 bytes
  4320 ;; Hardware stack levels used:    1
  4321 ;; Hardware stack levels required when called:    2
  4322 ;; This function calls:
  4323 ;;		Nothing
  4324 ;; This function is called by:
  4325 ;;		_main
  4326 ;; This function uses a non-reentrant model
  4327 ;;
  4328                           
  4329                           
  4330                           ;psect for function _ConfigureOscillator
  4331  063C                     _ConfigureOscillator:	
  4332                           
  4333                           ;system.c: 50: OSCCONbits.IRCF = 0xE;
  4334                           
  4335                           ;incstack = 0
  4336                           ; Regs used in _ConfigureOscillator: [wreg+status,2+status,0]
  4337  063C  0021               	movlb	1	; select bank1
  4338  063D  0819               	movf	25,w	;volatile
  4339  063E  3987               	andlw	-121
  4340  063F  3870               	iorlw	112
  4341  0640  0099               	movwf	25	;volatile
  4342                           
  4343                           ;system.c: 56: OSCCONbits.SPLLEN = 0;
  4344  0641  1399               	bcf	25,7	;volatile
  4345  0642                     l2291:	
  4346                           ;system.c: 59: while(!(OSCSTAT & HFIOFS));
  4347                           
  4348  0642  3000               	movlw	0
  4349  0643  181A               	btfsc	26,0	;volatile
  4350  0644  3001               	movlw	1
  4351  0645  051A               	andwf	26,w	;volatile
  4352  0646  1D03               	btfss	3,2
  4353  0647  0008               	return
  4354  0648  2E42               	goto	l2291
  4355  0649                     __end_of_ConfigureOscillator:	
  4356                           
  4357                           	psect	intentry
  4358  0004                     __pintentry:	
  4359 ;; *************** function _isr *****************
  4360 ;; Defined at:
  4361 ;;		line 60 in file "interrupts.c"
  4362 ;; Parameters:    Size  Location     Type
  4363 ;;		None
  4364 ;; Auto vars:     Size  Location     Type
  4365 ;;		None
  4366 ;; Return value:  Size  Location     Type
  4367 ;;		None               void
  4368 ;; Registers used:
  4369 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  4370 ;; Tracked objects:
  4371 ;;		On entry : 0/0
  4372 ;;		On exit  : 0/0
  4373 ;;		Unchanged: 0/0
  4374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  4375 ;;      Params:         0       0       0       0       0       0       0       0
  4376 ;;      Locals:         0       0       0       0       0       0       0       0
  4377 ;;      Temps:          0       9       0       0       0       0       0       0
  4378 ;;      Totals:         0       9       0       0       0       0       0       0
  4379 ;;Total ram usage:        9 bytes
  4380 ;; Hardware stack levels used:    1
  4381 ;; Hardware stack levels required when called:    1
  4382 ;; This function calls:
  4383 ;;		_IRrawToNEC
  4384 ;;		_Set_Timer4
  4385 ;;		_Start_Timer1
  4386 ;;		_Timer4ON
  4387 ;;		_Timer4Reset
  4388 ;;		i1_Reset_Timer1
  4389 ;;		i1_Stop_Timer1
  4390 ;;		i1_Timer2OFF
  4391 ;;		i1_Timer4OFF
  4392 ;;		i1_Timer6OFF
  4393 ;; This function is called by:
  4394 ;;		Interrupt level 1
  4395 ;; This function uses a non-reentrant model
  4396 ;;
  4397                           
  4398  0004                     _isr:	
  4399                           
  4400                           ;incstack = 0
  4401                           ; Regs used in _isr: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  4402  0004  3180               	pagesel	$
  4403  0005  0020               	movlb	0	; select bank0
  4404  0006  087F               	movf	127,w
  4405  0007  00D5               	movwf	??_isr+8
  4406                           
  4407                           ;interrupts.c: 64: INTCONbits.GIE = 0;
  4408  0008  138B               	bcf	11,7	;volatile
  4409                           
  4410                           ;interrupts.c: 65: if(PIR1bits.TMR2IF && PIE1bits.TMR2IE)
  4411  0009  1C91               	btfss	17,1	;volatile
  4412  000A  28CA               	goto	i1l83
  4413  000B  0021               	movlb	1	; select bank1
  4414  000C  1C91               	btfss	17,1	;volatile
  4415  000D  28CA               	goto	i1l83
  4416                           
  4417                           ;interrupts.c: 66: {
  4418                           ;interrupts.c: 69: PIE1bits.TMR2IE = 0;
  4419  000E  1091               	bcf	17,1	;volatile
  4420                           
  4421                           ;interrupts.c: 71: if(RFsendCode[RFcodeBit] != 99)
  4422  000F  087A               	movf	_RFcodeBit,w
  4423  0010  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4424  0011  0086               	movwf	6
  4425  0012  0187               	clrf	7
  4426  0013  3063               	movlw	99
  4427  0014  0601               	xorwf	1,w
  4428  0015  1903               	btfsc	3,2
  4429  0016  2888               	goto	i1l2003
  4430                           
  4431                           ;interrupts.c: 72: {
  4432                           ;interrupts.c: 74: if(RFsendFlag)
  4433  0017  087C               	movf	_RFsendFlag,w	;volatile
  4434  0018  1903               	btfsc	3,2
  4435  0019  28C2               	goto	i1l2043
  4436                           
  4437                           ;interrupts.c: 75: {
  4438                           ;interrupts.c: 76: if(RFsendCode[RFcodeBit] == 0)
  4439  001A  087A               	movf	_RFcodeBit,w
  4440  001B  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4441  001C  0086               	movwf	6
  4442  001D  0187               	clrf	7
  4443  001E  0801               	movf	1,w
  4444  001F  1D03               	btfss	3,2
  4445  0020  2840               	goto	i1l1921
  4446                           
  4447                           ;interrupts.c: 77: {
  4448                           ;interrupts.c: 78: if(RFcodePlace == 1)
  4449  0021  037B               	decf	_RFcodePlace,w
  4450  0022  1903               	btfsc	3,2
  4451  0023  288B               	goto	L6
  4452                           
  4453                           ;interrupts.c: 85: else if(RFcodePlace == 2)
  4454                           
  4455                           ;interrupts.c: 84: }
  4456                           
  4457                           ;interrupts.c: 83: TMR2 = 0;
  4458                           
  4459                           ;interrupts.c: 82: RFcodePlace++;
  4460                           
  4461                           ;interrupts.c: 81: (PR2 = 8);
  4462                           
  4463                           ;interrupts.c: 79: {
  4464                           ;interrupts.c: 80: (LATC |= 0b00001000);
  4465  0024  3002               	movlw	2
  4466  0025  067B               	xorwf	_RFcodePlace,w
  4467  0026  1903               	btfsc	3,2
  4468  0027  285C               	goto	L4
  4469                           
  4470                           ;interrupts.c: 91: else if(RFcodePlace == 3)
  4471                           
  4472                           ;interrupts.c: 90: }
  4473                           
  4474                           ;interrupts.c: 89: RFcodePlace++;
  4475                           
  4476                           ;interrupts.c: 88: (PR2 = 24);
  4477                           
  4478                           ;interrupts.c: 86: {
  4479                           ;interrupts.c: 87: (LATC &= ~0b00001000);
  4480  0028  3003               	movlw	3
  4481  0029  067B               	xorwf	_RFcodePlace,w
  4482  002A  1903               	btfsc	3,2
  4483  002B  288B               	goto	L6
  4484                           
  4485                           ;interrupts.c: 98: else if(RFcodePlace == 4)
  4486                           
  4487                           ;interrupts.c: 97: }
  4488                           
  4489                           ;interrupts.c: 96: TMR2 = 0;
  4490                           
  4491                           ;interrupts.c: 95: RFcodePlace++;
  4492                           
  4493                           ;interrupts.c: 94: (PR2 = 8);
  4494                           
  4495                           ;interrupts.c: 92: {
  4496                           ;interrupts.c: 93: (LATC |= 0b00001000);
  4497  002C  3004               	movlw	4
  4498  002D  067B               	xorwf	_RFcodePlace,w
  4499  002E  1D03               	btfss	3,2
  4500  002F  2885               	goto	i1l112
  4501                           
  4502                           ;interrupts.c: 99: {
  4503                           ;interrupts.c: 100: (LATC &= ~0b00001000);
  4504  0030  30F7               	movlw	247
  4505  0031  0020               	movlb	0	; select bank0
  4506  0032  00CD               	movwf	??_isr
  4507  0033  084D               	movf	??_isr,w
  4508  0034  0022               	movlb	2	; select bank2
  4509  0035  058E               	andwf	14,f	;volatile
  4510                           
  4511                           ;interrupts.c: 101: (PR2 = 24);
  4512  0036  3018               	movlw	24
  4513  0037  0020               	movlb	0	; select bank0
  4514  0038  009B               	movwf	27	;volatile
  4515                           
  4516                           ;interrupts.c: 102: RFcodePlace = 1;
  4517  0039  01FB               	clrf	_RFcodePlace
  4518  003A  0AFB               	incf	_RFcodePlace,f
  4519                           
  4520                           ;interrupts.c: 103: RFcodeBit++;
  4521  003B  3001               	movlw	1
  4522  003C  00CD               	movwf	??_isr
  4523  003D  084D               	movf	??_isr,w
  4524  003E  07FA               	addwf	_RFcodeBit,f
  4525                           
  4526                           ;interrupts.c: 104: }
  4527  003F  28C2               	goto	i1l2043
  4528  0040                     i1l1921:	
  4529                           ;interrupts.c: 110: }
  4530                           ;interrupts.c: 111: }
  4531                           
  4532                           ;interrupts.c: 109: RFsendFlag = 0;
  4533                           
  4534                           ;interrupts.c: 105: else
  4535                           ;interrupts.c: 106: {
  4536                           ;interrupts.c: 108: RFcodePlace = 1;
  4537                           
  4538                           
  4539                           ;interrupts.c: 112: else if(RFsendCode[RFcodeBit] == 1)
  4540  0040  087A               	movf	_RFcodeBit,w
  4541  0041  3E20               	addlw	(low (_RFsendCode| 0))& (0+255)
  4542  0042  0086               	movwf	6
  4543  0043  0187               	clrf	7
  4544  0044  0301               	decf	1,w
  4545  0045  1D03               	btfss	3,2
  4546  0046  2855               	goto	i1l1963
  4547                           
  4548                           ;interrupts.c: 113: {
  4549                           ;interrupts.c: 114: if(RFcodePlace == 1)
  4550  0047  037B               	decf	_RFcodePlace,w
  4551  0048  1903               	btfsc	3,2
  4552  0049  2867               	goto	L1
  4553                           
  4554                           ;interrupts.c: 120: else if(RFcodePlace == 2)
  4555                           
  4556                           ;interrupts.c: 119: }
  4557                           
  4558                           ;interrupts.c: 118: RFcodePlace++;
  4559                           
  4560                           ;interrupts.c: 117: (PR2 = 24);
  4561                           
  4562                           ;interrupts.c: 115: {
  4563                           ;interrupts.c: 116: (LATC |= 0b00001000);
  4564  004A  3002               	movlw	2
  4565  004B  067B               	xorwf	_RFcodePlace,w
  4566  004C  1D03               	btfss	3,2
  4567  004D  2863               	goto	i1l1981
  4568                           
  4569                           ;interrupts.c: 121: {
  4570                           ;interrupts.c: 122: (LATC &= ~0b00001000);
  4571  004E  30F7               	movlw	247
  4572  004F  0020               	movlb	0	; select bank0
  4573  0050  00CD               	movwf	??_isr
  4574  0051  084D               	movf	??_isr,w
  4575  0052  0022               	movlb	2	; select bank2
  4576  0053  058E               	andwf	14,f	;volatile
  4577  0054  288D               	goto	L3
  4578  0055                     i1l1963:	
  4579                           ;interrupts.c: 146: }
  4580                           ;interrupts.c: 147: }
  4581                           
  4582                           ;interrupts.c: 145: RFsendFlag = 0;
  4583                           
  4584                           ;interrupts.c: 141: else
  4585                           ;interrupts.c: 142: {
  4586                           ;interrupts.c: 144: RFcodePlace = 1;
  4587                           
  4588                           ;interrupts.c: 140: }
  4589                           
  4590                           ;interrupts.c: 139: TMR2 = 0;
  4591                           
  4592                           ;interrupts.c: 138: RFcodeBit++;
  4593                           
  4594                           ;interrupts.c: 137: RFcodePlace = 1;
  4595                           
  4596                           ;interrupts.c: 136: (PR2 = 8);
  4597                           
  4598                           ;interrupts.c: 134: {
  4599                           ;interrupts.c: 135: (LATC &= ~0b00001000);
  4600                           
  4601                           ;interrupts.c: 133: else if(RFcodePlace == 4)
  4602                           
  4603                           ;interrupts.c: 132: }
  4604                           
  4605                           ;interrupts.c: 131: RFcodePlace++;
  4606                           
  4607                           ;interrupts.c: 130: (PR2 = 24);
  4608                           
  4609                           ;interrupts.c: 128: {
  4610                           ;interrupts.c: 129: (LATC |= 0b00001000);
  4611                           
  4612                           ;interrupts.c: 127: else if(RFcodePlace == 3)
  4613                           
  4614                           ;interrupts.c: 126: }
  4615                           
  4616                           ;interrupts.c: 125: TMR2 = 0;
  4617                           
  4618                           ;interrupts.c: 124: RFcodePlace++;
  4619                           
  4620                           ;interrupts.c: 123: (PR2 = 8);
  4621                           
  4622                           
  4623                           ;interrupts.c: 148: else
  4624                           ;interrupts.c: 149: {
  4625                           ;interrupts.c: 151: if(RFcodePlace == 1)
  4626  0055  037B               	decf	_RFcodePlace,w
  4627  0056  1903               	btfsc	3,2
  4628  0057  288B               	goto	L6
  4629                           
  4630                           ;interrupts.c: 158: else if(RFcodePlace == 2)
  4631                           
  4632                           ;interrupts.c: 157: }
  4633                           
  4634                           ;interrupts.c: 156: TMR2 = 0;
  4635                           
  4636                           ;interrupts.c: 155: RFcodePlace++;
  4637                           
  4638                           ;interrupts.c: 154: (PR2 = 8);
  4639                           
  4640                           ;interrupts.c: 152: {
  4641                           ;interrupts.c: 153: (LATC |= 0b00001000);
  4642  0058  3002               	movlw	2
  4643  0059  067B               	xorwf	_RFcodePlace,w
  4644  005A  1D03               	btfss	3,2
  4645  005B  2863               	goto	i1l1981
  4646  005C                     L4:	
  4647                           
  4648                           ;interrupts.c: 159: {
  4649                           ;interrupts.c: 160: (LATC &= ~0b00001000);
  4650  005C  30F7               	movlw	247
  4651  005D  0020               	movlb	0	; select bank0
  4652  005E  00CD               	movwf	??_isr
  4653  005F  084D               	movf	??_isr,w
  4654  0060  0022               	movlb	2	; select bank2
  4655  0061  058E               	andwf	14,f	;volatile
  4656  0062  2869               	goto	L2
  4657  0063                     i1l1981:	
  4658                           ;interrupts.c: 163: }
  4659                           
  4660                           ;interrupts.c: 162: RFcodePlace++;
  4661                           
  4662                           ;interrupts.c: 161: (PR2 = 24);
  4663                           
  4664                           
  4665                           ;interrupts.c: 164: else if(RFcodePlace == 3)
  4666  0063  3003               	movlw	3
  4667  0064  067B               	xorwf	_RFcodePlace,w
  4668  0065  1D03               	btfss	3,2
  4669  0066  2871               	goto	i1l1989
  4670  0067                     L1:	
  4671                           
  4672                           ;interrupts.c: 165: {
  4673                           ;interrupts.c: 166: (LATC |= 0b00001000);
  4674  0067  0022               	movlb	2	; select bank2
  4675  0068  158E               	bsf	14,3	;volatile
  4676  0069                     L2:	
  4677                           
  4678                           ;interrupts.c: 167: (PR2 = 24);
  4679  0069  3018               	movlw	24
  4680  006A  0020               	movlb	0	; select bank0
  4681  006B  009B               	movwf	27	;volatile
  4682                           
  4683                           ;interrupts.c: 168: RFcodePlace++;
  4684  006C  3001               	movlw	1
  4685  006D  00CD               	movwf	??_isr
  4686  006E  084D               	movf	??_isr,w
  4687  006F  07FB               	addwf	_RFcodePlace,f
  4688                           
  4689                           ;interrupts.c: 169: }
  4690  0070  28C2               	goto	i1l2043
  4691  0071                     i1l1989:	
  4692                           
  4693                           ;interrupts.c: 170: else if(RFcodePlace == 4)
  4694  0071  3004               	movlw	4
  4695  0072  067B               	xorwf	_RFcodePlace,w
  4696  0073  1D03               	btfss	3,2
  4697  0074  2885               	goto	i1l112
  4698                           
  4699                           ;interrupts.c: 171: {
  4700                           ;interrupts.c: 172: (LATC &= ~0b00001000);
  4701  0075  30F7               	movlw	247
  4702  0076  0020               	movlb	0	; select bank0
  4703  0077  00CD               	movwf	??_isr
  4704  0078  084D               	movf	??_isr,w
  4705  0079  0022               	movlb	2	; select bank2
  4706  007A  058E               	andwf	14,f	;volatile
  4707                           
  4708                           ;interrupts.c: 173: (PR2 = 8);
  4709  007B  3008               	movlw	8
  4710  007C  0020               	movlb	0	; select bank0
  4711  007D  009B               	movwf	27	;volatile
  4712                           
  4713                           ;interrupts.c: 174: RFcodePlace = 1;
  4714  007E  01FB               	clrf	_RFcodePlace
  4715  007F  0AFB               	incf	_RFcodePlace,f
  4716                           
  4717                           ;interrupts.c: 175: RFcodeBit++;
  4718  0080  3001               	movlw	1
  4719  0081  00CD               	movwf	??_isr
  4720  0082  084D               	movf	??_isr,w
  4721  0083  07FA               	addwf	_RFcodeBit,f
  4722  0084  2894               	goto	i1l2011
  4723  0085                     i1l112:	
  4724                           ;interrupts.c: 177: }
  4725                           
  4726                           ;interrupts.c: 176: TMR2 = 0;
  4727                           
  4728                           
  4729                           ;interrupts.c: 178: else
  4730                           ;interrupts.c: 179: {
  4731                           ;interrupts.c: 181: RFcodePlace = 1;
  4732  0085  01FB               	clrf	_RFcodePlace
  4733  0086  0AFB               	incf	_RFcodePlace,f
  4734  0087  28C1               	goto	i1l2041
  4735  0088                     i1l2003:	
  4736                           ;interrupts.c: 183: }
  4737                           ;interrupts.c: 184: }
  4738                           ;interrupts.c: 185: }
  4739                           ;interrupts.c: 186: }
  4740                           
  4741                           ;interrupts.c: 182: RFsendFlag = 0;
  4742                           
  4743                           
  4744                           ;interrupts.c: 187: else
  4745                           ;interrupts.c: 188: {
  4746                           ;interrupts.c: 190: if(RFcodePlace == 1)
  4747  0088  037B               	decf	_RFcodePlace,w
  4748  0089  1D03               	btfss	3,2
  4749  008A  2896               	goto	i1l2013
  4750  008B                     L6:	
  4751                           
  4752                           ;interrupts.c: 191: {
  4753                           ;interrupts.c: 192: (LATC |= 0b00001000);
  4754  008B  0022               	movlb	2	; select bank2
  4755  008C  158E               	bsf	14,3	;volatile
  4756  008D                     L3:	
  4757                           
  4758                           ;interrupts.c: 193: (PR2 = 8);
  4759  008D  3008               	movlw	8
  4760  008E  0020               	movlb	0	; select bank0
  4761  008F  009B               	movwf	27	;volatile
  4762                           
  4763                           ;interrupts.c: 194: RFcodePlace++;
  4764  0090  3001               	movlw	1
  4765  0091  00CD               	movwf	??_isr
  4766  0092  084D               	movf	??_isr,w
  4767  0093  07FB               	addwf	_RFcodePlace,f
  4768  0094                     i1l2011:	
  4769                           
  4770                           ;interrupts.c: 195: TMR2 = 0;
  4771  0094  019A               	clrf	26	;volatile
  4772                           
  4773                           ;interrupts.c: 196: }
  4774  0095  28C2               	goto	i1l2043
  4775  0096                     i1l2013:	
  4776                           
  4777                           ;interrupts.c: 197: else if( RFcodePlace == 2)
  4778  0096  3002               	movlw	2
  4779  0097  067B               	xorwf	_RFcodePlace,w
  4780  0098  1D03               	btfss	3,2
  4781  0099  28B0               	goto	i1l2029
  4782                           
  4783                           ;interrupts.c: 198: {
  4784                           ;interrupts.c: 199: (LATC &= ~0b00001000);
  4785  009A  30F7               	movlw	247
  4786  009B  0020               	movlb	0	; select bank0
  4787  009C  00CD               	movwf	??_isr
  4788  009D  084D               	movf	??_isr,w
  4789  009E  0022               	movlb	2	; select bank2
  4790  009F  058E               	andwf	14,f	;volatile
  4791                           
  4792                           ;interrupts.c: 200: (PR2 = 240);
  4793  00A0  30F0               	movlw	240
  4794  00A1  0020               	movlb	0	; select bank0
  4795  00A2  009B               	movwf	27	;volatile
  4796                           
  4797                           ;interrupts.c: 201: RFcodePlace++;
  4798  00A3  3001               	movlw	1
  4799  00A4  00CD               	movwf	??_isr
  4800  00A5  084D               	movf	??_isr,w
  4801  00A6  07FB               	addwf	_RFcodePlace,f
  4802                           
  4803                           ;interrupts.c: 202: Sendcount--;
  4804  00A7  3001               	movlw	1
  4805  00A8  02C0               	subwf	_Sendcount,f	;volatile
  4806                           
  4807                           ;interrupts.c: 203: if(Sendcount)
  4808  00A9  0840               	movf	_Sendcount,w	;volatile
  4809  00AA  1903               	btfsc	3,2
  4810  00AB  28C2               	goto	i1l2043
  4811                           
  4812                           ;interrupts.c: 204: {
  4813                           ;interrupts.c: 206: RFcodePlace = 1;
  4814  00AC  01FB               	clrf	_RFcodePlace
  4815  00AD  0AFB               	incf	_RFcodePlace,f
  4816                           
  4817                           ;interrupts.c: 207: RFcodeBit = 0;
  4818  00AE  01FA               	clrf	_RFcodeBit
  4819                           
  4820                           ;interrupts.c: 208: }
  4821                           ;interrupts.c: 209: }
  4822  00AF  28C2               	goto	i1l2043
  4823  00B0                     i1l2029:	
  4824                           
  4825                           ;interrupts.c: 210: else
  4826                           ;interrupts.c: 211: {
  4827                           ;interrupts.c: 213: Timer4Reset();
  4828  00B0  3187  276B  3180   	fcall	_Timer4Reset
  4829                           
  4830                           ;interrupts.c: 214: PIR2bits.TMR4IF = 0;
  4831  00B3  0020               	movlb	0	; select bank0
  4832  00B4  1092               	bcf	18,1	;volatile
  4833                           
  4834                           ;interrupts.c: 215: TMR4_overflow = 0;
  4835  00B5  01BC               	clrf	_TMR4_overflow	;volatile
  4836  00B6  01BD               	clrf	_TMR4_overflow+1	;volatile
  4837                           
  4838                           ;interrupts.c: 216: Set_Timer4(0xFF);
  4839  00B7  30FF               	movlw	255
  4840  00B8  3187  274D  3180   	fcall	_Set_Timer4
  4841                           
  4842                           ;interrupts.c: 217: Timer4ON();
  4843  00BB  3187  2748  3180   	fcall	_Timer4ON
  4844                           
  4845                           ;interrupts.c: 218: Timer2OFF();
  4846  00BE  3187  2738  3180   	fcall	i1_Timer2OFF
  4847  00C1                     i1l2041:	
  4848                           
  4849                           ;interrupts.c: 219: RFsendFlag = 0;
  4850  00C1  01FC               	clrf	_RFsendFlag	;volatile
  4851  00C2                     i1l2043:	
  4852                           
  4853                           ;interrupts.c: 220: }
  4854                           ;interrupts.c: 221: }
  4855                           ;interrupts.c: 222: PIR1bits.TMR2IF = 0;
  4856  00C2  0020               	movlb	0	; select bank0
  4857  00C3  1091               	bcf	17,1	;volatile
  4858                           
  4859                           ;interrupts.c: 223: if(RFsendFlag)
  4860  00C4  087C               	movf	_RFsendFlag,w	;volatile
  4861  00C5  1903               	btfsc	3,2
  4862  00C6  29EC               	goto	i1l121
  4863                           
  4864                           ;interrupts.c: 224: {
  4865                           ;interrupts.c: 226: PIE1bits.TMR2IE = 1;
  4866  00C7  0021               	movlb	1	; select bank1
  4867  00C8  1491               	bsf	17,1	;volatile
  4868                           
  4869                           ;interrupts.c: 227: }
  4870                           ;interrupts.c: 228: }
  4871  00C9  29EC               	goto	i1l121
  4872  00CA                     i1l83:	
  4873                           
  4874                           ;interrupts.c: 229: else if(PIR1bits.TMR1IF && PIE1bits.TMR1IE)
  4875  00CA  0020               	movlb	0	; select bank0
  4876  00CB  1C11               	btfss	17,0	;volatile
  4877  00CC  28E4               	goto	i1l122
  4878  00CD  0021               	movlb	1	; select bank1
  4879  00CE  1C11               	btfss	17,0	;volatile
  4880  00CF  28E4               	goto	i1l122
  4881                           
  4882                           ;interrupts.c: 230: {
  4883                           ;interrupts.c: 232: PIE1bits.TMR1IE = 0;
  4884  00D0  1011               	bcf	17,0	;volatile
  4885                           
  4886                           ;interrupts.c: 233: Reset_Timer1();
  4887  00D1  3187  275E  3180   	fcall	i1_Reset_Timer1
  4888                           
  4889                           ;interrupts.c: 250: Stop_Timer1();
  4890  00D4  3187  2768  3180   	fcall	i1_Stop_Timer1
  4891                           
  4892                           ;interrupts.c: 251: IR_New_Code = 0;
  4893  00D7  01FD               	clrf	_IR_New_Code
  4894                           
  4895                           ;interrupts.c: 252: IR_NEC = 0;
  4896  00D8  3000               	movlw	0
  4897  00D9  0020               	movlb	0	; select bank0
  4898  00DA  00C4               	movwf	_IR_NEC+3
  4899  00DB  3000               	movlw	0
  4900  00DC  00C3               	movwf	_IR_NEC+2
  4901  00DD  3000               	movlw	0
  4902  00DE  00C2               	movwf	_IR_NEC+1
  4903  00DF  3000               	movlw	0
  4904  00E0  00C1               	movwf	_IR_NEC
  4905                           
  4906                           ;interrupts.c: 253: IRrawCodeNum = 0;
  4907  00E1  01F9               	clrf	_IRrawCodeNum
  4908                           
  4909                           ;interrupts.c: 255: PIR1bits.TMR1IF = 0;
  4910  00E2  1011               	bcf	17,0	;volatile
  4911                           
  4912                           ;interrupts.c: 256: }
  4913  00E3  29EC               	goto	i1l121
  4914  00E4                     i1l122:	
  4915                           
  4916                           ;interrupts.c: 257: else if(IOCCFbits.IOCCF4 && INTCONbits.IOCIE)
  4917  00E4  0027               	movlb	7	; select bank7
  4918  00E5  1A19               	btfsc	25,4	;volatile
  4919  00E6  1D8B               	btfss	11,3	;volatile
  4920  00E7  29B4               	goto	i1l124
  4921                           
  4922                           ;interrupts.c: 258: {
  4923                           ;interrupts.c: 261: IOCCPbits.IOCCP4 = 0;
  4924  00E8  1217               	bcf	23,4	;volatile
  4925                           
  4926                           ;interrupts.c: 263: IOCCNbits.IOCCN4 = 0;
  4927  00E9  1218               	bcf	24,4	;volatile
  4928                           
  4929                           ;interrupts.c: 265: IRrawCount = TMR1L;
  4930  00EA  0020               	movlb	0	; select bank0
  4931  00EB  0816               	movf	22,w	;volatile
  4932  00EC  00CD               	movwf	??_isr
  4933  00ED  01CE               	clrf	??_isr+1
  4934  00EE  084D               	movf	??_isr,w
  4935  00EF  00B8               	movwf	_IRrawCount
  4936  00F0  084E               	movf	??_isr+1,w
  4937  00F1  00B9               	movwf	_IRrawCount+1
  4938                           
  4939                           ;interrupts.c: 266: IRrawCount += ((unsigned int)TMR1H << 8);
  4940  00F2  0817               	movf	23,w	;volatile
  4941  00F3  00CD               	movwf	??_isr
  4942  00F4  01CE               	clrf	??_isr+1
  4943  00F5  084D               	movf	??_isr,w
  4944  00F6  00CE               	movwf	??_isr+1
  4945  00F7  01CD               	clrf	??_isr
  4946  00F8  084D               	movf	??_isr,w
  4947  00F9  07B8               	addwf	_IRrawCount,f
  4948  00FA  084E               	movf	??_isr+1,w
  4949  00FB  3DB9               	addwfc	_IRrawCount+1,f
  4950                           
  4951                           ;interrupts.c: 268: Stop_Timer1();
  4952  00FC  3187  2768  3180   	fcall	i1_Stop_Timer1
  4953                           
  4954                           ;interrupts.c: 269: Reset_Timer1();
  4955  00FF  3187  275E  3180   	fcall	i1_Reset_Timer1
  4956                           
  4957                           ;interrupts.c: 270: PIR1bits.TMR1IF = 0;
  4958  0102  0020               	movlb	0	; select bank0
  4959  0103  1011               	bcf	17,0	;volatile
  4960                           
  4961                           ;interrupts.c: 271: Start_Timer1();
  4962  0104  3187  276E  3180   	fcall	_Start_Timer1
  4963                           
  4964                           ;interrupts.c: 272: PIE1bits.TMR1IE = 1;
  4965  0107  0021               	movlb	1	; select bank1
  4966  0108  1411               	bsf	17,0	;volatile
  4967                           
  4968                           ;interrupts.c: 273: if(IRrawCodeNum < 72)
  4969  0109  3048               	movlw	72
  4970  010A  0279               	subwf	_IRrawCodeNum,w
  4971  010B  1803               	skipnc
  4972  010C  2986               	goto	i1l2101
  4973                           
  4974                           ;interrupts.c: 274: {
  4975                           ;interrupts.c: 276: if(IRrawCodeNum != 0)
  4976  010D  0879               	movf	_IRrawCodeNum,w
  4977  010E  1903               	btfsc	3,2
  4978  010F  2978               	goto	i1l2093
  4979                           
  4980                           ;interrupts.c: 277: {
  4981                           ;interrupts.c: 289: IRRawCode[IRrawCodeNum - 1] = IRrawCount;
  4982  0110  0879               	movf	_IRrawCodeNum,w
  4983  0111  0020               	movlb	0	; select bank0
  4984  0112  00CD               	movwf	??_isr
  4985  0113  01CE               	clrf	??_isr+1
  4986  0114  35CD               	lslf	??_isr,f
  4987  0115  0DCE               	rlf	??_isr+1,f
  4988  0116  084D               	movf	??_isr,w
  4989  0117  3EFE               	addlw	254
  4990  0118  00CF               	movwf	??_isr+2
  4991  0119  30FF               	movlw	255
  4992  011A  3D4E               	addwfc	??_isr+1,w
  4993  011B  00D0               	movwf	??_isr+3
  4994  011C  3060               	movlw	96
  4995  011D  00D1               	movwf	??_isr+4
  4996  011E  3021               	movlw	33
  4997  011F  00D2               	movwf	??_isr+5
  4998  0120  084F               	movf	??_isr+2,w
  4999  0121  0751               	addwf	??_isr+4,w
  5000  0122  0086               	movwf	6
  5001  0123  0850               	movf	??_isr+3,w
  5002  0124  3D52               	addwfc	??_isr+5,w
  5003  0125  0087               	movwf	7
  5004  0126  0838               	movf	_IRrawCount,w
  5005  0127  3FC0               	movwi [0]fsr1
  5006  0128  0839               	movf	_IRrawCount+1,w
  5007  0129  3FC1               	movwi [1]fsr1
  5008                           
  5009                           ;interrupts.c: 291: if( IRRawCode[IRrawCodeNum - 1] >= 22500 && IRRawCode[IRrawCodeNum -
      +                           1] <= 25000 )
  5010  012A  0879               	movf	_IRrawCodeNum,w
  5011  012B  00CD               	movwf	??_isr
  5012  012C  01CE               	clrf	??_isr+1
  5013  012D  35CD               	lslf	??_isr,f
  5014  012E  0DCE               	rlf	??_isr+1,f
  5015  012F  084D               	movf	??_isr,w
  5016  0130  3EFE               	addlw	254
  5017  0131  00CF               	movwf	??_isr+2
  5018  0132  30FF               	movlw	255
  5019  0133  3D4E               	addwfc	??_isr+1,w
  5020  0134  00D0               	movwf	??_isr+3
  5021  0135  3060               	movlw	96
  5022  0136  00D1               	movwf	??_isr+4
  5023  0137  3021               	movlw	33
  5024  0138  00D2               	movwf	??_isr+5
  5025  0139  084F               	movf	??_isr+2,w
  5026  013A  0751               	addwf	??_isr+4,w
  5027  013B  0086               	movwf	6
  5028  013C  0850               	movf	??_isr+3,w
  5029  013D  3D52               	addwfc	??_isr+5,w
  5030  013E  0087               	movwf	7
  5031  013F  3F40               	moviw [0]fsr1
  5032  0140  00D3               	movwf	??_isr+6
  5033  0141  3F41               	moviw [1]fsr1
  5034  0142  00D4               	movwf	??_isr+7
  5035  0143  3057               	movlw	87
  5036  0144  0254               	subwf	??_isr+7,w
  5037  0145  30E4               	movlw	228
  5038  0146  1903               	skipnz
  5039  0147  0253               	subwf	??_isr+6,w
  5040  0148  1C03               	skipc
  5041  0149  2981               	goto	i1l2099
  5042  014A  0879               	movf	_IRrawCodeNum,w
  5043  014B  00CD               	movwf	??_isr
  5044  014C  01CE               	clrf	??_isr+1
  5045  014D  35CD               	lslf	??_isr,f
  5046  014E  0DCE               	rlf	??_isr+1,f
  5047  014F  084D               	movf	??_isr,w
  5048  0150  3EFE               	addlw	254
  5049  0151  00CF               	movwf	??_isr+2
  5050  0152  30FF               	movlw	255
  5051  0153  3D4E               	addwfc	??_isr+1,w
  5052  0154  00D0               	movwf	??_isr+3
  5053  0155  3060               	movlw	96
  5054  0156  00D1               	movwf	??_isr+4
  5055  0157  3021               	movlw	33
  5056  0158  00D2               	movwf	??_isr+5
  5057  0159  084F               	movf	??_isr+2,w
  5058  015A  0751               	addwf	??_isr+4,w
  5059  015B  0086               	movwf	6
  5060  015C  0850               	movf	??_isr+3,w
  5061  015D  3D52               	addwfc	??_isr+5,w
  5062  015E  0087               	movwf	7
  5063  015F  3F40               	moviw [0]fsr1
  5064  0160  00D3               	movwf	??_isr+6
  5065  0161  3F41               	moviw [1]fsr1
  5066  0162  00D4               	movwf	??_isr+7
  5067  0163  3061               	movlw	97
  5068  0164  0254               	subwf	??_isr+7,w
  5069  0165  30A9               	movlw	169
  5070  0166  1903               	skipnz
  5071  0167  0253               	subwf	??_isr+6,w
  5072  0168  1803               	skipnc
  5073  0169  2981               	goto	i1l2099
  5074                           
  5075                           ;interrupts.c: 292: {
  5076                           ;interrupts.c: 294: IR_New_Code = 2;
  5077  016A  3002               	movlw	2
  5078  016B  00CD               	movwf	??_isr
  5079  016C  084D               	movf	??_isr,w
  5080  016D  00FD               	movwf	_IR_New_Code
  5081                           
  5082                           ;interrupts.c: 295: IRrawCodeNum =0;
  5083  016E  01F9               	clrf	_IRrawCodeNum
  5084                           
  5085                           ;interrupts.c: 296: IRRawCode[0] = 22500;
  5086  016F  3060               	movlw	96
  5087  0170  0086               	movwf	6
  5088  0171  3021               	movlw	33
  5089  0172  0087               	movwf	7
  5090  0173  30E4               	movlw	228
  5091  0174  3FC0               	movwi [0]fsr1
  5092  0175  3057               	movlw	87
  5093  0176  3FC1               	movwi [1]fsr1
  5094                           
  5095                           ;interrupts.c: 298: }
  5096                           ;interrupts.c: 299: }
  5097  0177  2981               	goto	i1l2099
  5098  0178                     i1l2093:	
  5099                           
  5100                           ;interrupts.c: 300: else
  5101                           ;interrupts.c: 301: {
  5102                           ;interrupts.c: 302: TMR1_overflow = 0;
  5103  0178  0020               	movlb	0	; select bank0
  5104  0179  01BA               	clrf	_TMR1_overflow	;volatile
  5105  017A  01BB               	clrf	_TMR1_overflow+1	;volatile
  5106                           
  5107                           ;interrupts.c: 303: Stop_Timer1();
  5108  017B  3187  2768  3180   	fcall	i1_Stop_Timer1
  5109                           
  5110                           ;interrupts.c: 304: Start_Timer1();
  5111  017E  3187  276E  3180   	fcall	_Start_Timer1
  5112  0181                     i1l2099:	
  5113                           
  5114                           ;interrupts.c: 305: }
  5115                           ;interrupts.c: 306: IRrawCodeNum++;
  5116  0181  3001               	movlw	1
  5117  0182  0020               	movlb	0	; select bank0
  5118  0183  00CD               	movwf	??_isr
  5119  0184  084D               	movf	??_isr,w
  5120  0185  07F9               	addwf	_IRrawCodeNum,f
  5121  0186                     i1l2101:	
  5122                           
  5123                           ;interrupts.c: 307: }
  5124                           ;interrupts.c: 308: if(IRrawCodeNum == 72)
  5125  0186  3048               	movlw	72
  5126  0187  0679               	xorwf	_IRrawCodeNum,w
  5127  0188  1D03               	btfss	3,2
  5128  0189  29AE               	goto	i1l2117
  5129                           
  5130                           ;interrupts.c: 309: {
  5131                           ;interrupts.c: 312: PIR1bits.TMR1IF = 0;
  5132  018A  0020               	movlb	0	; select bank0
  5133  018B  1011               	bcf	17,0	;volatile
  5134                           
  5135                           ;interrupts.c: 313: PIE1bits.TMR1IE = 0;
  5136  018C  0021               	movlb	1	; select bank1
  5137  018D  1011               	bcf	17,0	;volatile
  5138                           
  5139                           ;interrupts.c: 314: Stop_Timer1();
  5140  018E  3187  2768  3180   	fcall	i1_Stop_Timer1
  5141                           
  5142                           ;interrupts.c: 315: if(!IR_New_Code)
  5143  0191  087D               	movf	_IR_New_Code,w
  5144  0192  1D03               	btfss	3,2
  5145  0193  29A6               	goto	i1l2111
  5146                           
  5147                           ;interrupts.c: 316: {
  5148                           ;interrupts.c: 318: IR_New_Code = IRrawToNEC(IRRawCode, &IR_NEC, 1);
  5149  0194  3060               	movlw	96
  5150  0195  00F0               	movwf	IRrawToNEC@Raw
  5151  0196  3021               	movlw	33
  5152  0197  00F1               	movwf	IRrawToNEC@Raw+1
  5153  0198  3041               	movlw	(low (_IR_NEC| 0))& (0+255)
  5154  0199  0020               	movlb	0	; select bank0
  5155  019A  00CD               	movwf	??_isr
  5156  019B  084D               	movf	??_isr,w
  5157  019C  00F2               	movwf	IRrawToNEC@NEC
  5158  019D  01F3               	clrf	IRrawToNEC@Invert
  5159  019E  0AF3               	incf	IRrawToNEC@Invert,f
  5160  019F  3182  222C  3180   	fcall	_IRrawToNEC
  5161  01A2  0020               	movlb	0	; select bank0
  5162  01A3  00CE               	movwf	??_isr+1
  5163  01A4  084E               	movf	??_isr+1,w
  5164  01A5  00FD               	movwf	_IR_New_Code
  5165  01A6                     i1l2111:	
  5166                           
  5167                           ;interrupts.c: 319: }
  5168                           ;interrupts.c: 320: IRrawCodeNum = 0;
  5169  01A6  01F9               	clrf	_IRrawCodeNum
  5170                           
  5171                           ;interrupts.c: 321: TMR1_overflow = 0;
  5172  01A7  0020               	movlb	0	; select bank0
  5173  01A8  01BA               	clrf	_TMR1_overflow	;volatile
  5174  01A9  01BB               	clrf	_TMR1_overflow+1	;volatile
  5175                           
  5176                           ;interrupts.c: 322: IRreceived = 1;
  5177  01AA  3001               	movlw	1
  5178  01AB  00CD               	movwf	??_isr
  5179  01AC  084D               	movf	??_isr,w
  5180  01AD  00BF               	movwf	_IRreceived	;volatile
  5181  01AE                     i1l2117:	
  5182                           
  5183                           ;interrupts.c: 323: }
  5184                           ;interrupts.c: 326: IOCCPbits.IOCCP4 = 1;
  5185  01AE  0027               	movlb	7	; select bank7
  5186  01AF  1617               	bsf	23,4	;volatile
  5187                           
  5188                           ;interrupts.c: 328: IOCCNbits.IOCCN4 = 1;
  5189  01B0  1618               	bsf	24,4	;volatile
  5190                           
  5191                           ;interrupts.c: 330: IOCCFbits.IOCCF4 = 0;
  5192  01B1  1219               	bcf	25,4	;volatile
  5193                           
  5194                           ;interrupts.c: 331: INTCONbits.IOCIF = 0;
  5195  01B2  100B               	bcf	11,0	;volatile
  5196                           
  5197                           ;interrupts.c: 332: }
  5198  01B3  29EC               	goto	i1l121
  5199  01B4                     i1l124:	
  5200                           
  5201                           ;interrupts.c: 333: else if(PIR2bits.TMR4IF && PIE2bits.TMR4IE)
  5202  01B4  0020               	movlb	0	; select bank0
  5203  01B5  1C92               	btfss	18,1	;volatile
  5204  01B6  29D6               	goto	i1l132
  5205  01B7  0021               	movlb	1	; select bank1
  5206  01B8  1C92               	btfss	18,1	;volatile
  5207  01B9  29D6               	goto	i1l132
  5208                           
  5209                           ;interrupts.c: 334: {
  5210                           ;interrupts.c: 336: Timer4OFF();
  5211  01BA  3187  2725  3180   	fcall	i1_Timer4OFF
  5212                           
  5213                           ;interrupts.c: 337: if(TMR4_overflow < 6)
  5214  01BD  3000               	movlw	0
  5215  01BE  0020               	movlb	0	; select bank0
  5216  01BF  023D               	subwf	_TMR4_overflow+1,w	;volatile
  5217  01C0  3006               	movlw	6
  5218  01C1  1903               	skipnz
  5219  01C2  023C               	subwf	_TMR4_overflow,w	;volatile
  5220  01C3  1803               	skipnc
  5221  01C4  29D1               	goto	i1l2135
  5222                           
  5223                           ;interrupts.c: 338: {
  5224                           ;interrupts.c: 339: Timer4Reset();
  5225  01C5  3187  276B  3180   	fcall	_Timer4Reset
  5226                           
  5227                           ;interrupts.c: 340: Timer4ON();
  5228  01C8  3187  2748  3180   	fcall	_Timer4ON
  5229                           
  5230                           ;interrupts.c: 341: TMR4_overflow++;
  5231  01CB  3001               	movlw	1
  5232  01CC  0020               	movlb	0	; select bank0
  5233  01CD  07BC               	addwf	_TMR4_overflow,f	;volatile
  5234  01CE  3000               	movlw	0
  5235  01CF  3DBD               	addwfc	_TMR4_overflow+1,f	;volatile
  5236                           
  5237                           ;interrupts.c: 342: }
  5238  01D0  29EC               	goto	i1l121
  5239  01D1                     i1l2135:	
  5240                           
  5241                           ;interrupts.c: 343: else
  5242                           ;interrupts.c: 344: {
  5243                           ;interrupts.c: 349: Sent = 1;
  5244  01D1  3001               	movlw	1
  5245  01D2  00CD               	movwf	??_isr
  5246  01D3  084D               	movf	??_isr,w
  5247  01D4  00DE               	movwf	_Sent	;volatile
  5248                           
  5249                           ;interrupts.c: 350: }
  5250                           ;interrupts.c: 351: }
  5251  01D5  29EC               	goto	i1l121
  5252  01D6                     i1l132:	
  5253                           
  5254                           ;interrupts.c: 352: else if(PIR2bits.TMR6IF && PIE2bits.TMR6IE)
  5255  01D6  0020               	movlb	0	; select bank0
  5256  01D7  1D12               	btfss	18,2	;volatile
  5257  01D8  29EB               	goto	i1l136
  5258  01D9  0021               	movlb	1	; select bank1
  5259  01DA  1D12               	btfss	18,2	;volatile
  5260  01DB  29EB               	goto	i1l136
  5261                           
  5262                           ;interrupts.c: 353: {
  5263                           ;interrupts.c: 355: Timer6OFF();
  5264  01DC  3187  271E  3180   	fcall	i1_Timer6OFF
  5265                           
  5266                           ;interrupts.c: 356: LATC &= ~(0b00000001 + 0b00000010 + 0b00000100);
  5267  01DF  30F8               	movlw	248
  5268  01E0  0020               	movlb	0	; select bank0
  5269  01E1  00CD               	movwf	??_isr
  5270  01E2  084D               	movf	??_isr,w
  5271  01E3  0022               	movlb	2	; select bank2
  5272  01E4  058E               	andwf	14,f	;volatile
  5273                           
  5274                           ;interrupts.c: 357: LEDsdone = 1;
  5275  01E5  3001               	movlw	1
  5276  01E6  0020               	movlb	0	; select bank0
  5277  01E7  00CD               	movwf	??_isr
  5278  01E8  084D               	movf	??_isr,w
  5279  01E9  00DD               	movwf	_LEDsdone	;volatile
  5280                           
  5281                           ;interrupts.c: 358: }
  5282  01EA  29EC               	goto	i1l121
  5283  01EB                     i1l136:	
  5284                           
  5285                           ;interrupts.c: 359: else
  5286                           ;interrupts.c: 360: {
  5287                           ;interrupts.c: 362: __nop();
  5288  01EB  0000               	nop
  5289  01EC                     i1l121:	
  5290                           
  5291                           ;interrupts.c: 363: }
  5292                           ;interrupts.c: 364: INTCONbits.GIE = 1;
  5293  01EC  178B               	bsf	11,7	;volatile
  5294  01ED  0020               	movlb	0	; select bank0
  5295  01EE  0855               	movf	??_isr+8,w
  5296  01EF  00FF               	movwf	127
  5297  01F0  0009               	retfie
  5298  01F1                     __end_of_isr:	
  5299                           
  5300                           	psect	text23
  5301  071E                     __ptext23:	
  5302 ;; *************** function i1_Timer6OFF *****************
  5303 ;; Defined at:
  5304 ;;		line 261 in file "Timer.c"
  5305 ;; Parameters:    Size  Location     Type
  5306 ;;		None
  5307 ;; Auto vars:     Size  Location     Type
  5308 ;;		None
  5309 ;; Return value:  Size  Location     Type
  5310 ;;		None               void
  5311 ;; Registers used:
  5312 ;;		None
  5313 ;; Tracked objects:
  5314 ;;		On entry : 0/0
  5315 ;;		On exit  : 0/0
  5316 ;;		Unchanged: 0/0
  5317 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5318 ;;      Params:         0       0       0       0       0       0       0       0
  5319 ;;      Locals:         0       0       0       0       0       0       0       0
  5320 ;;      Temps:          0       0       0       0       0       0       0       0
  5321 ;;      Totals:         0       0       0       0       0       0       0       0
  5322 ;;Total ram usage:        0 bytes
  5323 ;; Hardware stack levels used:    1
  5324 ;; This function calls:
  5325 ;;		Nothing
  5326 ;; This function is called by:
  5327 ;;		_isr
  5328 ;; This function uses a non-reentrant model
  5329 ;;
  5330                           
  5331                           
  5332                           ;psect for function i1_Timer6OFF
  5333  071E                     i1_Timer6OFF:	
  5334                           
  5335                           ;Timer.c: 263: T6CONbits.TMR6ON = 0;
  5336                           
  5337                           ;incstack = 0
  5338                           ; Regs used in i1_Timer6OFF: []
  5339  071E  0028               	movlb	8	; select bank8
  5340  071F  111E               	bcf	30,2	;volatile
  5341                           
  5342                           ;Timer.c: 264: PIR2bits.TMR6IF = 0;
  5343  0720  0020               	movlb	0	; select bank0
  5344  0721  1112               	bcf	18,2	;volatile
  5345                           
  5346                           ;Timer.c: 265: PIE2bits.TMR6IE = 0;
  5347  0722  0021               	movlb	1	; select bank1
  5348  0723  1112               	bcf	18,2	;volatile
  5349  0724  0008               	return
  5350  0725                     __end_ofi1_Timer6OFF:	
  5351                           
  5352                           	psect	text24
  5353  0725                     __ptext24:	
  5354 ;; *************** function i1_Timer4OFF *****************
  5355 ;; Defined at:
  5356 ;;		line 197 in file "Timer.c"
  5357 ;; Parameters:    Size  Location     Type
  5358 ;;		None
  5359 ;; Auto vars:     Size  Location     Type
  5360 ;;		None
  5361 ;; Return value:  Size  Location     Type
  5362 ;;		None               void
  5363 ;; Registers used:
  5364 ;;		None
  5365 ;; Tracked objects:
  5366 ;;		On entry : 0/0
  5367 ;;		On exit  : 0/0
  5368 ;;		Unchanged: 0/0
  5369 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5370 ;;      Params:         0       0       0       0       0       0       0       0
  5371 ;;      Locals:         0       0       0       0       0       0       0       0
  5372 ;;      Temps:          0       0       0       0       0       0       0       0
  5373 ;;      Totals:         0       0       0       0       0       0       0       0
  5374 ;;Total ram usage:        0 bytes
  5375 ;; Hardware stack levels used:    1
  5376 ;; This function calls:
  5377 ;;		Nothing
  5378 ;; This function is called by:
  5379 ;;		_isr
  5380 ;; This function uses a non-reentrant model
  5381 ;;
  5382                           
  5383                           
  5384                           ;psect for function i1_Timer4OFF
  5385  0725                     i1_Timer4OFF:	
  5386                           
  5387                           ;Timer.c: 199: T4CONbits.TMR4ON = 0;
  5388                           
  5389                           ;incstack = 0
  5390                           ; Regs used in i1_Timer4OFF: []
  5391  0725  0028               	movlb	8	; select bank8
  5392  0726  1117               	bcf	23,2	;volatile
  5393                           
  5394                           ;Timer.c: 200: PIR2bits.TMR4IF = 0;
  5395  0727  0020               	movlb	0	; select bank0
  5396  0728  1092               	bcf	18,1	;volatile
  5397                           
  5398                           ;Timer.c: 201: PIE2bits.TMR4IE = 0;
  5399  0729  0021               	movlb	1	; select bank1
  5400  072A  1092               	bcf	18,1	;volatile
  5401  072B  0008               	return
  5402  072C                     __end_ofi1_Timer4OFF:	
  5403                           
  5404                           	psect	text25
  5405  0738                     __ptext25:	
  5406 ;; *************** function i1_Timer2OFF *****************
  5407 ;; Defined at:
  5408 ;;		line 153 in file "Timer.c"
  5409 ;; Parameters:    Size  Location     Type
  5410 ;;		None
  5411 ;; Auto vars:     Size  Location     Type
  5412 ;;		None
  5413 ;; Return value:  Size  Location     Type
  5414 ;;		None               void
  5415 ;; Registers used:
  5416 ;;		None
  5417 ;; Tracked objects:
  5418 ;;		On entry : 0/0
  5419 ;;		On exit  : 0/0
  5420 ;;		Unchanged: 0/0
  5421 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5422 ;;      Params:         0       0       0       0       0       0       0       0
  5423 ;;      Locals:         0       0       0       0       0       0       0       0
  5424 ;;      Temps:          0       0       0       0       0       0       0       0
  5425 ;;      Totals:         0       0       0       0       0       0       0       0
  5426 ;;Total ram usage:        0 bytes
  5427 ;; Hardware stack levels used:    1
  5428 ;; This function calls:
  5429 ;;		Nothing
  5430 ;; This function is called by:
  5431 ;;		_isr
  5432 ;; This function uses a non-reentrant model
  5433 ;;
  5434                           
  5435                           
  5436                           ;psect for function i1_Timer2OFF
  5437  0738                     i1_Timer2OFF:	
  5438                           
  5439                           ;Timer.c: 155: T2CONbits.TMR2ON = 0;
  5440                           
  5441                           ;incstack = 0
  5442                           ; Regs used in i1_Timer2OFF: []
  5443  0738  0020               	movlb	0	; select bank0
  5444  0739  111C               	bcf	28,2	;volatile
  5445                           
  5446                           ;Timer.c: 156: PIR1bits.TMR2IF = 0;
  5447  073A  1091               	bcf	17,1	;volatile
  5448                           
  5449                           ;Timer.c: 157: PIE1bits.TMR2IE = 0;
  5450  073B  0021               	movlb	1	; select bank1
  5451  073C  1091               	bcf	17,1	;volatile
  5452  073D  0008               	return
  5453  073E                     __end_ofi1_Timer2OFF:	
  5454                           
  5455                           	psect	text26
  5456  0768                     __ptext26:	
  5457 ;; *************** function i1_Stop_Timer1 *****************
  5458 ;; Defined at:
  5459 ;;		line 81 in file "Timer.c"
  5460 ;; Parameters:    Size  Location     Type
  5461 ;;		None
  5462 ;; Auto vars:     Size  Location     Type
  5463 ;;		None
  5464 ;; Return value:  Size  Location     Type
  5465 ;;		None               void
  5466 ;; Registers used:
  5467 ;;		None
  5468 ;; Tracked objects:
  5469 ;;		On entry : 0/0
  5470 ;;		On exit  : 0/0
  5471 ;;		Unchanged: 0/0
  5472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5473 ;;      Params:         0       0       0       0       0       0       0       0
  5474 ;;      Locals:         0       0       0       0       0       0       0       0
  5475 ;;      Temps:          0       0       0       0       0       0       0       0
  5476 ;;      Totals:         0       0       0       0       0       0       0       0
  5477 ;;Total ram usage:        0 bytes
  5478 ;; Hardware stack levels used:    1
  5479 ;; This function calls:
  5480 ;;		Nothing
  5481 ;; This function is called by:
  5482 ;;		_isr
  5483 ;; This function uses a non-reentrant model
  5484 ;;
  5485                           
  5486                           
  5487                           ;psect for function i1_Stop_Timer1
  5488  0768                     i1_Stop_Timer1:	
  5489                           
  5490                           ;Timer.c: 84: T1CONbits.TMR1ON =0;
  5491                           
  5492                           ;incstack = 0
  5493                           ; Regs used in i1_Stop_Timer1: []
  5494  0768  0020               	movlb	0	; select bank0
  5495  0769  1018               	bcf	24,0	;volatile
  5496  076A  0008               	return
  5497  076B                     __end_ofi1_Stop_Timer1:	
  5498                           
  5499                           	psect	text27
  5500  075E                     __ptext27:	
  5501 ;; *************** function i1_Reset_Timer1 *****************
  5502 ;; Defined at:
  5503 ;;		line 103 in file "Timer.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;		None               void
  5510 ;; Registers used:
  5511 ;;		status,2
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5517 ;;      Params:         0       0       0       0       0       0       0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0
  5520 ;;      Totals:         0       0       0       0       0       0       0       0
  5521 ;;Total ram usage:        0 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; This function calls:
  5524 ;;		Nothing
  5525 ;; This function is called by:
  5526 ;;		_isr
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           
  5531                           ;psect for function i1_Reset_Timer1
  5532  075E                     i1_Reset_Timer1:	
  5533                           
  5534                           ;Timer.c: 109: TMR1H = 0;
  5535                           
  5536                           ;incstack = 0
  5537                           ; Regs used in i1_Reset_Timer1: [status,2]
  5538  075E  0020               	movlb	0	; select bank0
  5539  075F  0197               	clrf	23	;volatile
  5540                           
  5541                           ;Timer.c: 110: TMR1L = 0;
  5542  0760  0196               	clrf	22	;volatile
  5543  0761  0008               	return
  5544  0762                     __end_ofi1_Reset_Timer1:	
  5545                           
  5546                           	psect	text28
  5547  076B                     __ptext28:	
  5548 ;; *************** function _Timer4Reset *****************
  5549 ;; Defined at:
  5550 ;;		line 209 in file "Timer.c"
  5551 ;; Parameters:    Size  Location     Type
  5552 ;;		None
  5553 ;; Auto vars:     Size  Location     Type
  5554 ;;		None
  5555 ;; Return value:  Size  Location     Type
  5556 ;;		None               void
  5557 ;; Registers used:
  5558 ;;		status,2
  5559 ;; Tracked objects:
  5560 ;;		On entry : 0/0
  5561 ;;		On exit  : 0/0
  5562 ;;		Unchanged: 0/0
  5563 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5564 ;;      Params:         0       0       0       0       0       0       0       0
  5565 ;;      Locals:         0       0       0       0       0       0       0       0
  5566 ;;      Temps:          0       0       0       0       0       0       0       0
  5567 ;;      Totals:         0       0       0       0       0       0       0       0
  5568 ;;Total ram usage:        0 bytes
  5569 ;; Hardware stack levels used:    1
  5570 ;; This function calls:
  5571 ;;		Nothing
  5572 ;; This function is called by:
  5573 ;;		_isr
  5574 ;; This function uses a non-reentrant model
  5575 ;;
  5576                           
  5577                           
  5578                           ;psect for function _Timer4Reset
  5579  076B                     _Timer4Reset:	
  5580                           
  5581                           ;Timer.c: 211: TMR4 = 0;
  5582                           
  5583                           ;incstack = 0
  5584                           ; Regs used in _Timer4Reset: [status,2]
  5585  076B  0028               	movlb	8	; select bank8
  5586  076C  0195               	clrf	21	;volatile
  5587  076D  0008               	return
  5588  076E                     __end_of_Timer4Reset:	
  5589                           
  5590                           	psect	text29
  5591  0748                     __ptext29:	
  5592 ;; *************** function _Timer4ON *****************
  5593 ;; Defined at:
  5594 ;;		line 186 in file "Timer.c"
  5595 ;; Parameters:    Size  Location     Type
  5596 ;;		None
  5597 ;; Auto vars:     Size  Location     Type
  5598 ;;		None
  5599 ;; Return value:  Size  Location     Type
  5600 ;;		None               void
  5601 ;; Registers used:
  5602 ;;		None
  5603 ;; Tracked objects:
  5604 ;;		On entry : 0/0
  5605 ;;		On exit  : 0/0
  5606 ;;		Unchanged: 0/0
  5607 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5608 ;;      Params:         0       0       0       0       0       0       0       0
  5609 ;;      Locals:         0       0       0       0       0       0       0       0
  5610 ;;      Temps:          0       0       0       0       0       0       0       0
  5611 ;;      Totals:         0       0       0       0       0       0       0       0
  5612 ;;Total ram usage:        0 bytes
  5613 ;; Hardware stack levels used:    1
  5614 ;; This function calls:
  5615 ;;		Nothing
  5616 ;; This function is called by:
  5617 ;;		_isr
  5618 ;; This function uses a non-reentrant model
  5619 ;;
  5620                           
  5621                           
  5622                           ;psect for function _Timer4ON
  5623  0748                     _Timer4ON:	
  5624                           
  5625                           ;Timer.c: 188: T4CONbits.TMR4ON = 1;
  5626                           
  5627                           ;incstack = 0
  5628                           ; Regs used in _Timer4ON: []
  5629  0748  0028               	movlb	8	; select bank8
  5630  0749  1517               	bsf	23,2	;volatile
  5631                           
  5632                           ;Timer.c: 189: PIE2bits.TMR4IE = 1;
  5633  074A  0021               	movlb	1	; select bank1
  5634  074B  1492               	bsf	18,1	;volatile
  5635  074C  0008               	return
  5636  074D                     __end_of_Timer4ON:	
  5637                           
  5638                           	psect	text30
  5639  076E                     __ptext30:	
  5640 ;; *************** function _Start_Timer1 *****************
  5641 ;; Defined at:
  5642 ;;		line 92 in file "Timer.c"
  5643 ;; Parameters:    Size  Location     Type
  5644 ;;		None
  5645 ;; Auto vars:     Size  Location     Type
  5646 ;;		None
  5647 ;; Return value:  Size  Location     Type
  5648 ;;		None               void
  5649 ;; Registers used:
  5650 ;;		None
  5651 ;; Tracked objects:
  5652 ;;		On entry : 0/0
  5653 ;;		On exit  : 0/0
  5654 ;;		Unchanged: 0/0
  5655 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5656 ;;      Params:         0       0       0       0       0       0       0       0
  5657 ;;      Locals:         0       0       0       0       0       0       0       0
  5658 ;;      Temps:          0       0       0       0       0       0       0       0
  5659 ;;      Totals:         0       0       0       0       0       0       0       0
  5660 ;;Total ram usage:        0 bytes
  5661 ;; Hardware stack levels used:    1
  5662 ;; This function calls:
  5663 ;;		Nothing
  5664 ;; This function is called by:
  5665 ;;		_isr
  5666 ;; This function uses a non-reentrant model
  5667 ;;
  5668                           
  5669                           
  5670                           ;psect for function _Start_Timer1
  5671  076E                     _Start_Timer1:	
  5672                           
  5673                           ;Timer.c: 95: T1CONbits.TMR1ON =1;
  5674                           
  5675                           ;incstack = 0
  5676                           ; Regs used in _Start_Timer1: []
  5677  076E  0020               	movlb	0	; select bank0
  5678  076F  1418               	bsf	24,0	;volatile
  5679  0770  0008               	return
  5680  0771                     __end_of_Start_Timer1:	
  5681                           
  5682                           	psect	text31
  5683  074D                     __ptext31:	
  5684 ;; *************** function _Set_Timer4 *****************
  5685 ;; Defined at:
  5686 ;;		line 219 in file "Timer.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  time            1    wreg     unsigned char 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;  time            1    0[COMMON] unsigned char 
  5691 ;; Return value:  Size  Location     Type
  5692 ;;		None               void
  5693 ;; Registers used:
  5694 ;;		wreg
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5700 ;;      Params:         0       0       0       0       0       0       0       0
  5701 ;;      Locals:         1       0       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0       0
  5703 ;;      Totals:         1       0       0       0       0       0       0       0
  5704 ;;Total ram usage:        1 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; This function calls:
  5707 ;;		Nothing
  5708 ;; This function is called by:
  5709 ;;		_isr
  5710 ;; This function uses a non-reentrant model
  5711 ;;
  5712                           
  5713                           
  5714                           ;psect for function _Set_Timer4
  5715  074D                     _Set_Timer4:	
  5716                           
  5717                           ;incstack = 0
  5718                           ; Regs used in _Set_Timer4: [wreg]
  5719                           ;Set_Timer4@time stored from wreg
  5720  074D  00F0               	movwf	Set_Timer4@time
  5721                           
  5722                           ;Timer.c: 221: PR4 = time;
  5723  074E  0870               	movf	Set_Timer4@time,w
  5724  074F  0028               	movlb	8	; select bank8
  5725  0750  0096               	movwf	22	;volatile
  5726  0751  0008               	return
  5727  0752                     __end_of_Set_Timer4:	
  5728                           
  5729                           	psect	text32
  5730  022C                     __ptext32:	
  5731 ;; *************** function _IRrawToNEC *****************
  5732 ;; Defined at:
  5733 ;;		line 124 in file "IR.c"
  5734 ;; Parameters:    Size  Location     Type
  5735 ;;  Raw             2    0[COMMON] PTR unsigned int 
  5736 ;;		 -> IRRawCode(144), 
  5737 ;;  NEC             1    2[COMMON] PTR unsigned long 
  5738 ;;		 -> IR_NEC(4), 
  5739 ;;  Invert          1    3[COMMON] unsigned char 
  5740 ;; Auto vars:     Size  Location     Type
  5741 ;;  NECtemp         4    0[BANK0 ] unsigned long 
  5742 ;;  StartBit        1    7[BANK0 ] unsigned char 
  5743 ;;  i               1    6[BANK0 ] unsigned char 
  5744 ;;  first           1    5[BANK0 ] unsigned char 
  5745 ;;  Pause           1    4[BANK0 ] unsigned char 
  5746 ;; Return value:  Size  Location     Type
  5747 ;;                  1    wreg      unsigned char 
  5748 ;; Registers used:
  5749 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  5750 ;; Tracked objects:
  5751 ;;		On entry : 0/0
  5752 ;;		On exit  : 0/0
  5753 ;;		Unchanged: 0/0
  5754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5755 ;;      Params:         4       0       0       0       0       0       0       0
  5756 ;;      Locals:         0       8       0       0       0       0       0       0
  5757 ;;      Temps:          5       0       0       0       0       0       0       0
  5758 ;;      Totals:         9       8       0       0       0       0       0       0
  5759 ;;Total ram usage:       17 bytes
  5760 ;; Hardware stack levels used:    1
  5761 ;; This function calls:
  5762 ;;		Nothing
  5763 ;; This function is called by:
  5764 ;;		_isr
  5765 ;; This function uses a non-reentrant model
  5766 ;;
  5767                           
  5768                           
  5769                           ;psect for function _IRrawToNEC
  5770  022C                     _IRrawToNEC:	
  5771                           
  5772                           ;IR.c: 152: unsigned char i;
  5773                           ;IR.c: 153: unsigned char Pause =0;
  5774                           
  5775                           ;incstack = 0
  5776                           ; Regs used in _IRrawToNEC: [wreg+fsr1l+fsr1h+status,2+status,0]
  5777  022C  0020               	movlb	0	; select bank0
  5778  022D  01C9               	clrf	IRrawToNEC@Pause
  5779                           
  5780                           ;IR.c: 154: unsigned char first =0;
  5781  022E  01CA               	clrf	IRrawToNEC@first
  5782                           
  5783                           ;IR.c: 155: unsigned char StartBit=72;
  5784  022F  3048               	movlw	72
  5785  0230  00F4               	movwf	??_IRrawToNEC
  5786  0231  0874               	movf	??_IRrawToNEC,w
  5787  0232  00CC               	movwf	IRrawToNEC@StartBit
  5788                           
  5789                           ;IR.c: 156: unsigned long NECtemp = 0;
  5790  0233  3000               	movlw	0
  5791  0234  00C8               	movwf	IRrawToNEC@NECtemp+3
  5792  0235  3000               	movlw	0
  5793  0236  00C7               	movwf	IRrawToNEC@NECtemp+2
  5794  0237  3000               	movlw	0
  5795  0238  00C6               	movwf	IRrawToNEC@NECtemp+1
  5796  0239  3000               	movlw	0
  5797  023A  00C5               	movwf	IRrawToNEC@NECtemp
  5798                           
  5799                           ;IR.c: 159: for (i =0; i < 72; i++)
  5800  023B  01CB               	clrf	IRrawToNEC@i
  5801  023C  3048               	movlw	72
  5802  023D  024B               	subwf	IRrawToNEC@i,w
  5803  023E  1803               	btfsc	3,0
  5804  023F  2AA7               	goto	i1l1669
  5805  0240                     i1l1649:	
  5806                           
  5807                           ;IR.c: 160: {
  5808                           ;IR.c: 161: if(Raw[i] >= 22500 && Raw[i] <= 25000 )
  5809  0240  084B               	movf	IRrawToNEC@i,w
  5810  0241  00F4               	movwf	??_IRrawToNEC
  5811  0242  01F5               	clrf	??_IRrawToNEC+1
  5812  0243  35F4               	lslf	??_IRrawToNEC,f
  5813  0244  0DF5               	rlf	??_IRrawToNEC+1,f
  5814  0245  0874               	movf	??_IRrawToNEC,w
  5815  0246  0770               	addwf	IRrawToNEC@Raw,w
  5816  0247  0086               	movwf	6
  5817  0248  0875               	movf	??_IRrawToNEC+1,w
  5818  0249  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5819  024A  0087               	movwf	7
  5820  024B  3F40               	moviw [0]fsr1
  5821  024C  00F6               	movwf	??_IRrawToNEC+2
  5822  024D  3F41               	moviw [1]fsr1
  5823  024E  00F7               	movwf	??_IRrawToNEC+3
  5824  024F  3057               	movlw	87
  5825  0250  0277               	subwf	??_IRrawToNEC+3,w
  5826  0251  30E4               	movlw	228
  5827  0252  1903               	skipnz
  5828  0253  0276               	subwf	??_IRrawToNEC+2,w
  5829  0254  1C03               	skipc
  5830  0255  2A6E               	goto	i1l1659
  5831  0256  084B               	movf	IRrawToNEC@i,w
  5832  0257  00F4               	movwf	??_IRrawToNEC
  5833  0258  01F5               	clrf	??_IRrawToNEC+1
  5834  0259  35F4               	lslf	??_IRrawToNEC,f
  5835  025A  0DF5               	rlf	??_IRrawToNEC+1,f
  5836  025B  0874               	movf	??_IRrawToNEC,w
  5837  025C  0770               	addwf	IRrawToNEC@Raw,w
  5838  025D  0086               	movwf	6
  5839  025E  0875               	movf	??_IRrawToNEC+1,w
  5840  025F  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5841  0260  0087               	movwf	7
  5842  0261  3F40               	moviw [0]fsr1
  5843  0262  00F6               	movwf	??_IRrawToNEC+2
  5844  0263  3F41               	moviw [1]fsr1
  5845  0264  00F7               	movwf	??_IRrawToNEC+3
  5846  0265  3061               	movlw	97
  5847  0266  0277               	subwf	??_IRrawToNEC+3,w
  5848  0267  30A9               	movlw	169
  5849  0268  1903               	skipnz
  5850  0269  0276               	subwf	??_IRrawToNEC+2,w
  5851  026A  1803               	skipnc
  5852  026B  2A6E               	goto	i1l1659
  5853                           
  5854                           ;IR.c: 162: {
  5855                           ;IR.c: 164: return 2;
  5856  026C  3002               	movlw	2
  5857  026D  0008               	return
  5858  026E                     i1l1659:	
  5859                           ;IR.c: 165: }
  5860                           
  5861                           
  5862                           ;IR.c: 166: else if(Raw[i] >= 2000 && Raw[i] <= 2500 )
  5863  026E  084B               	movf	IRrawToNEC@i,w
  5864  026F  00F4               	movwf	??_IRrawToNEC
  5865  0270  01F5               	clrf	??_IRrawToNEC+1
  5866  0271  35F4               	lslf	??_IRrawToNEC,f
  5867  0272  0DF5               	rlf	??_IRrawToNEC+1,f
  5868  0273  0874               	movf	??_IRrawToNEC,w
  5869  0274  0770               	addwf	IRrawToNEC@Raw,w
  5870  0275  0086               	movwf	6
  5871  0276  0875               	movf	??_IRrawToNEC+1,w
  5872  0277  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5873  0278  0087               	movwf	7
  5874  0279  3F40               	moviw [0]fsr1
  5875  027A  00F6               	movwf	??_IRrawToNEC+2
  5876  027B  3F41               	moviw [1]fsr1
  5877  027C  00F7               	movwf	??_IRrawToNEC+3
  5878  027D  3007               	movlw	7
  5879  027E  0277               	subwf	??_IRrawToNEC+3,w
  5880  027F  30D0               	movlw	208
  5881  0280  1903               	skipnz
  5882  0281  0276               	subwf	??_IRrawToNEC+2,w
  5883  0282  1C03               	skipc
  5884  0283  2A9F               	goto	i1l1665
  5885  0284  084B               	movf	IRrawToNEC@i,w
  5886  0285  00F4               	movwf	??_IRrawToNEC
  5887  0286  01F5               	clrf	??_IRrawToNEC+1
  5888  0287  35F4               	lslf	??_IRrawToNEC,f
  5889  0288  0DF5               	rlf	??_IRrawToNEC+1,f
  5890  0289  0874               	movf	??_IRrawToNEC,w
  5891  028A  0770               	addwf	IRrawToNEC@Raw,w
  5892  028B  0086               	movwf	6
  5893  028C  0875               	movf	??_IRrawToNEC+1,w
  5894  028D  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5895  028E  0087               	movwf	7
  5896  028F  3F40               	moviw [0]fsr1
  5897  0290  00F6               	movwf	??_IRrawToNEC+2
  5898  0291  3F41               	moviw [1]fsr1
  5899  0292  00F7               	movwf	??_IRrawToNEC+3
  5900  0293  3009               	movlw	9
  5901  0294  0277               	subwf	??_IRrawToNEC+3,w
  5902  0295  30C5               	movlw	197
  5903  0296  1903               	skipnz
  5904  0297  0276               	subwf	??_IRrawToNEC+2,w
  5905  0298  1803               	skipnc
  5906  0299  2A9F               	goto	i1l1665
  5907                           
  5908                           ;IR.c: 167: {
  5909                           ;IR.c: 169: StartBit = i;
  5910  029A  084B               	movf	IRrawToNEC@i,w
  5911  029B  00F4               	movwf	??_IRrawToNEC
  5912  029C  0874               	movf	??_IRrawToNEC,w
  5913  029D  00CC               	movwf	IRrawToNEC@StartBit
  5914                           
  5915                           ;IR.c: 170: break;
  5916  029E  2AA7               	goto	i1l1669
  5917  029F                     i1l1665:	
  5918  029F  3001               	movlw	1
  5919  02A0  00F4               	movwf	??_IRrawToNEC
  5920  02A1  0874               	movf	??_IRrawToNEC,w
  5921  02A2  07CB               	addwf	IRrawToNEC@i,f
  5922  02A3  3048               	movlw	72
  5923  02A4  024B               	subwf	IRrawToNEC@i,w
  5924  02A5  1C03               	skipc
  5925  02A6  2A40               	goto	i1l1649
  5926  02A7                     i1l1669:	
  5927                           
  5928                           ;IR.c: 171: }
  5929                           ;IR.c: 172: }
  5930                           ;IR.c: 173: if(72 - StartBit < 72)
  5931  02A7  084C               	movf	IRrawToNEC@StartBit,w
  5932  02A8  00F4               	movwf	??_IRrawToNEC
  5933  02A9  01F5               	clrf	??_IRrawToNEC+1
  5934  02AA  09F4               	comf	??_IRrawToNEC,f
  5935  02AB  09F5               	comf	??_IRrawToNEC+1,f
  5936  02AC  0AF4               	incf	??_IRrawToNEC,f
  5937  02AD  1903               	skipnz
  5938  02AE  0AF5               	incf	??_IRrawToNEC+1,f
  5939  02AF  0874               	movf	??_IRrawToNEC,w
  5940  02B0  3E48               	addlw	72
  5941  02B1  00F6               	movwf	??_IRrawToNEC+2
  5942  02B2  3000               	movlw	0
  5943  02B3  3D75               	addwfc	??_IRrawToNEC+1,w
  5944  02B4  00F7               	movwf	??_IRrawToNEC+3
  5945  02B5  0877               	movf	??_IRrawToNEC+3,w
  5946  02B6  3A80               	xorlw	128
  5947  02B7  00F8               	movwf	??_IRrawToNEC+4
  5948  02B8  3080               	movlw	128
  5949  02B9  0278               	subwf	??_IRrawToNEC+4,w
  5950  02BA  1D03               	skipz
  5951  02BB  2ABE               	goto	u101_25
  5952  02BC  3048               	movlw	72
  5953  02BD  0276               	subwf	??_IRrawToNEC+2,w
  5954  02BE                     u101_25:	
  5955  02BE  1803               	skipnc
  5956  02BF  2AC2               	goto	i1l1675
  5957                           
  5958                           ;IR.c: 174: {
  5959                           ;IR.c: 176: return 0;
  5960  02C0  3000               	movlw	0
  5961  02C1  0008               	return
  5962  02C2                     i1l1675:	
  5963                           
  5964                           ;IR.c: 177: }
  5965                           ;IR.c: 179: StartBit++;
  5966  02C2  3001               	movlw	1
  5967  02C3  00F4               	movwf	??_IRrawToNEC
  5968  02C4  0874               	movf	??_IRrawToNEC,w
  5969  02C5  0020               	movlb	0	; select bank0
  5970  02C6  07CC               	addwf	IRrawToNEC@StartBit,f
  5971                           
  5972                           ;IR.c: 180: if(Raw[StartBit] < 875 || Raw[StartBit] > 1375 )
  5973  02C7  084C               	movf	IRrawToNEC@StartBit,w
  5974  02C8  00F4               	movwf	??_IRrawToNEC
  5975  02C9  01F5               	clrf	??_IRrawToNEC+1
  5976  02CA  35F4               	lslf	??_IRrawToNEC,f
  5977  02CB  0DF5               	rlf	??_IRrawToNEC+1,f
  5978  02CC  0874               	movf	??_IRrawToNEC,w
  5979  02CD  0770               	addwf	IRrawToNEC@Raw,w
  5980  02CE  0086               	movwf	6
  5981  02CF  0875               	movf	??_IRrawToNEC+1,w
  5982  02D0  3D71               	addwfc	IRrawToNEC@Raw+1,w
  5983  02D1  0087               	movwf	7
  5984  02D2  3F40               	moviw [0]fsr1
  5985  02D3  00F6               	movwf	??_IRrawToNEC+2
  5986  02D4  3F41               	moviw [1]fsr1
  5987  02D5  00F7               	movwf	??_IRrawToNEC+3
  5988  02D6  3003               	movlw	3
  5989  02D7  0277               	subwf	??_IRrawToNEC+3,w
  5990  02D8  306B               	movlw	107
  5991  02D9  1903               	skipnz
  5992  02DA  0276               	subwf	??_IRrawToNEC+2,w
  5993  02DB  1C03               	skipc
  5994  02DC  2AF3               	goto	i1l1681
  5995  02DD  084C               	movf	IRrawToNEC@StartBit,w
  5996  02DE  00F4               	movwf	??_IRrawToNEC
  5997  02DF  01F5               	clrf	??_IRrawToNEC+1
  5998  02E0  35F4               	lslf	??_IRrawToNEC,f
  5999  02E1  0DF5               	rlf	??_IRrawToNEC+1,f
  6000  02E2  0874               	movf	??_IRrawToNEC,w
  6001  02E3  0770               	addwf	IRrawToNEC@Raw,w
  6002  02E4  0086               	movwf	6
  6003  02E5  0875               	movf	??_IRrawToNEC+1,w
  6004  02E6  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6005  02E7  0087               	movwf	7
  6006  02E8  3F40               	moviw [0]fsr1
  6007  02E9  00F6               	movwf	??_IRrawToNEC+2
  6008  02EA  3F41               	moviw [1]fsr1
  6009  02EB  00F7               	movwf	??_IRrawToNEC+3
  6010  02EC  3005               	movlw	5
  6011  02ED  0277               	subwf	??_IRrawToNEC+3,w
  6012  02EE  3060               	movlw	96
  6013  02EF  1903               	skipnz
  6014  02F0  0276               	subwf	??_IRrawToNEC+2,w
  6015  02F1  1C03               	skipc
  6016  02F2  2AF5               	goto	i1l1685
  6017  02F3                     i1l1681:	
  6018                           
  6019                           ;IR.c: 181: {
  6020                           ;IR.c: 183: return 0;
  6021  02F3  3000               	movlw	0
  6022  02F4  0008               	return
  6023  02F5                     i1l1685:	
  6024                           
  6025                           ;IR.c: 184: }
  6026                           ;IR.c: 187: StartBit++;
  6027  02F5  3001               	movlw	1
  6028  02F6  00F4               	movwf	??_IRrawToNEC
  6029  02F7  0874               	movf	??_IRrawToNEC,w
  6030  02F8  07CC               	addwf	IRrawToNEC@StartBit,f
  6031                           
  6032                           ;IR.c: 188: for(i = StartBit; i < 72;i++)
  6033  02F9  084C               	movf	IRrawToNEC@StartBit,w
  6034  02FA  00F4               	movwf	??_IRrawToNEC
  6035  02FB  0874               	movf	??_IRrawToNEC,w
  6036  02FC  00CB               	movwf	IRrawToNEC@i
  6037  02FD  3048               	movlw	72
  6038  02FE  024B               	subwf	IRrawToNEC@i,w
  6039  02FF  1803               	btfsc	3,0
  6040  0300  2C98               	goto	i1l1787
  6041  0301                     i1l1693:	
  6042                           
  6043                           ;IR.c: 189: {
  6044                           ;IR.c: 190: if(Raw[StartBit] >= 62 && Raw[StartBit] <= 300 )
  6045  0301  084C               	movf	IRrawToNEC@StartBit,w
  6046  0302  00F4               	movwf	??_IRrawToNEC
  6047  0303  01F5               	clrf	??_IRrawToNEC+1
  6048  0304  35F4               	lslf	??_IRrawToNEC,f
  6049  0305  0DF5               	rlf	??_IRrawToNEC+1,f
  6050  0306  0874               	movf	??_IRrawToNEC,w
  6051  0307  0770               	addwf	IRrawToNEC@Raw,w
  6052  0308  0086               	movwf	6
  6053  0309  0875               	movf	??_IRrawToNEC+1,w
  6054  030A  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6055  030B  0087               	movwf	7
  6056  030C  3F40               	moviw [0]fsr1
  6057  030D  00F6               	movwf	??_IRrawToNEC+2
  6058  030E  3F41               	moviw [1]fsr1
  6059  030F  00F7               	movwf	??_IRrawToNEC+3
  6060  0310  3000               	movlw	0
  6061  0311  0277               	subwf	??_IRrawToNEC+3,w
  6062  0312  303E               	movlw	62
  6063  0313  1903               	skipnz
  6064  0314  0276               	subwf	??_IRrawToNEC+2,w
  6065  0315  1C03               	skipc
  6066  0316  2B58               	goto	i1l1717
  6067  0317  084C               	movf	IRrawToNEC@StartBit,w
  6068  0318  00F4               	movwf	??_IRrawToNEC
  6069  0319  01F5               	clrf	??_IRrawToNEC+1
  6070  031A  35F4               	lslf	??_IRrawToNEC,f
  6071  031B  0DF5               	rlf	??_IRrawToNEC+1,f
  6072  031C  0874               	movf	??_IRrawToNEC,w
  6073  031D  0770               	addwf	IRrawToNEC@Raw,w
  6074  031E  0086               	movwf	6
  6075  031F  0875               	movf	??_IRrawToNEC+1,w
  6076  0320  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6077  0321  0087               	movwf	7
  6078  0322  3F40               	moviw [0]fsr1
  6079  0323  00F6               	movwf	??_IRrawToNEC+2
  6080  0324  3F41               	moviw [1]fsr1
  6081  0325  00F7               	movwf	??_IRrawToNEC+3
  6082  0326  3001               	movlw	1
  6083  0327  0277               	subwf	??_IRrawToNEC+3,w
  6084  0328  302D               	movlw	45
  6085  0329  1903               	skipnz
  6086  032A  0276               	subwf	??_IRrawToNEC+2,w
  6087  032B  1803               	skipnc
  6088  032C  2B58               	goto	i1l1717
  6089                           
  6090                           ;IR.c: 191: {
  6091                           ;IR.c: 192: if(Pause != 3)
  6092  032D  3003               	movlw	3
  6093  032E  0649               	xorwf	IRrawToNEC@Pause,w
  6094  032F  1903               	btfsc	3,2
  6095  0330  2B4B               	goto	i1l1711
  6096                           
  6097                           ;IR.c: 193: {
  6098                           ;IR.c: 194: if(!first)
  6099  0331  084A               	movf	IRrawToNEC@first,w
  6100  0332  1D03               	btfss	3,2
  6101  0333  2B37               	goto	i1l1703
  6102                           
  6103                           ;IR.c: 195: {
  6104                           ;IR.c: 197: first = 1;
  6105  0334  01CA               	clrf	IRrawToNEC@first
  6106  0335  0ACA               	incf	IRrawToNEC@first,f
  6107                           
  6108                           ;IR.c: 198: }
  6109  0336  2C8C               	goto	i1l1783
  6110  0337                     i1l1703:	
  6111                           
  6112                           ;IR.c: 199: else
  6113                           ;IR.c: 200: {
  6114                           ;IR.c: 201: first = 0;
  6115  0337  01CA               	clrf	IRrawToNEC@first
  6116                           
  6117                           ;IR.c: 202: NECtemp <<= 1;
  6118  0338  3001               	movlw	1
  6119  0339                     u109_25:	
  6120  0339  35C5               	lslf	IRrawToNEC@NECtemp,f
  6121  033A  0DC6               	rlf	IRrawToNEC@NECtemp+1,f
  6122  033B  0DC7               	rlf	IRrawToNEC@NECtemp+2,f
  6123  033C  0DC8               	rlf	IRrawToNEC@NECtemp+3,f
  6124  033D  0B89               	decfsz	9,f
  6125  033E  2B39               	goto	u109_25
  6126                           
  6127                           ;IR.c: 203: if(!Invert)
  6128  033F  0873               	movf	IRrawToNEC@Invert,w
  6129  0340  1D03               	btfss	3,2
  6130  0341  2C8C               	goto	i1l1783
  6131                           
  6132                           ;IR.c: 204: {
  6133                           ;IR.c: 205: NECtemp++;
  6134  0342  3001               	movlw	1
  6135  0343  07C5               	addwf	IRrawToNEC@NECtemp,f
  6136  0344  3000               	movlw	0
  6137  0345  3DC6               	addwfc	IRrawToNEC@NECtemp+1,f
  6138  0346  3000               	movlw	0
  6139  0347  3DC7               	addwfc	IRrawToNEC@NECtemp+2,f
  6140  0348  3000               	movlw	0
  6141  0349  3DC8               	addwfc	IRrawToNEC@NECtemp+3,f
  6142                           
  6143                           ;IR.c: 206: }
  6144                           ;IR.c: 208: }
  6145                           ;IR.c: 209: }
  6146  034A  2C8C               	goto	i1l1783
  6147  034B                     i1l1711:	
  6148                           
  6149                           ;IR.c: 210: else
  6150                           ;IR.c: 211: {
  6151                           ;IR.c: 213: *NEC = NECtemp;
  6152  034B  0872               	movf	IRrawToNEC@NEC,w
  6153  034C  0086               	movwf	6
  6154  034D  0187               	clrf	7
  6155  034E  0845               	movf	IRrawToNEC@NECtemp,w
  6156  034F  3FC0               	movwi [0]fsr1
  6157  0350  0846               	movf	IRrawToNEC@NECtemp+1,w
  6158  0351  3FC1               	movwi [1]fsr1
  6159  0352  0847               	movf	IRrawToNEC@NECtemp+2,w
  6160  0353  3FC2               	movwi [2]fsr1
  6161  0354  0848               	movf	IRrawToNEC@NECtemp+3,w
  6162  0355  3FC3               	movwi [3]fsr1
  6163                           
  6164                           ;IR.c: 214: return 1;
  6165  0356  3001               	movlw	1
  6166  0357  0008               	return
  6167  0358                     i1l1717:	
  6168                           ;IR.c: 215: }
  6169                           ;IR.c: 216: }
  6170                           
  6171                           
  6172                           ;IR.c: 217: else if(Raw[StartBit] >= 350 && Raw[StartBit] <= 425)
  6173  0358  084C               	movf	IRrawToNEC@StartBit,w
  6174  0359  00F4               	movwf	??_IRrawToNEC
  6175  035A  01F5               	clrf	??_IRrawToNEC+1
  6176  035B  35F4               	lslf	??_IRrawToNEC,f
  6177  035C  0DF5               	rlf	??_IRrawToNEC+1,f
  6178  035D  0874               	movf	??_IRrawToNEC,w
  6179  035E  0770               	addwf	IRrawToNEC@Raw,w
  6180  035F  0086               	movwf	6
  6181  0360  0875               	movf	??_IRrawToNEC+1,w
  6182  0361  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6183  0362  0087               	movwf	7
  6184  0363  3F40               	moviw [0]fsr1
  6185  0364  00F6               	movwf	??_IRrawToNEC+2
  6186  0365  3F41               	moviw [1]fsr1
  6187  0366  00F7               	movwf	??_IRrawToNEC+3
  6188  0367  3001               	movlw	1
  6189  0368  0277               	subwf	??_IRrawToNEC+3,w
  6190  0369  305E               	movlw	94
  6191  036A  1903               	skipnz
  6192  036B  0276               	subwf	??_IRrawToNEC+2,w
  6193  036C  1C03               	skipc
  6194  036D  2B9D               	goto	i1l1733
  6195  036E  084C               	movf	IRrawToNEC@StartBit,w
  6196  036F  00F4               	movwf	??_IRrawToNEC
  6197  0370  01F5               	clrf	??_IRrawToNEC+1
  6198  0371  35F4               	lslf	??_IRrawToNEC,f
  6199  0372  0DF5               	rlf	??_IRrawToNEC+1,f
  6200  0373  0874               	movf	??_IRrawToNEC,w
  6201  0374  0770               	addwf	IRrawToNEC@Raw,w
  6202  0375  0086               	movwf	6
  6203  0376  0875               	movf	??_IRrawToNEC+1,w
  6204  0377  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6205  0378  0087               	movwf	7
  6206  0379  3F40               	moviw [0]fsr1
  6207  037A  00F6               	movwf	??_IRrawToNEC+2
  6208  037B  3F41               	moviw [1]fsr1
  6209  037C  00F7               	movwf	??_IRrawToNEC+3
  6210  037D  3001               	movlw	1
  6211  037E  0277               	subwf	??_IRrawToNEC+3,w
  6212  037F  30AA               	movlw	170
  6213  0380  1903               	skipnz
  6214  0381  0276               	subwf	??_IRrawToNEC+2,w
  6215  0382  1803               	skipnc
  6216  0383  2B9D               	goto	i1l1733
  6217                           
  6218                           ;IR.c: 218: {
  6219                           ;IR.c: 219: if(first)
  6220  0384  084A               	movf	IRrawToNEC@first,w
  6221  0385  1903               	btfsc	3,2
  6222  0386  2B9B               	goto	i1l1729
  6223                           
  6224                           ;IR.c: 220: {
  6225                           ;IR.c: 222: NECtemp <<= 1;
  6226  0387  3001               	movlw	1
  6227  0388                     u114_25:	
  6228  0388  35C5               	lslf	IRrawToNEC@NECtemp,f
  6229  0389  0DC6               	rlf	IRrawToNEC@NECtemp+1,f
  6230  038A  0DC7               	rlf	IRrawToNEC@NECtemp+2,f
  6231  038B  0DC8               	rlf	IRrawToNEC@NECtemp+3,f
  6232  038C  0B89               	decfsz	9,f
  6233  038D  2B88               	goto	u114_25
  6234                           
  6235                           ;IR.c: 223: if(Invert)
  6236  038E  0873               	movf	IRrawToNEC@Invert,w
  6237  038F  1903               	btfsc	3,2
  6238  0390  2B99               	goto	i1l1727
  6239                           
  6240                           ;IR.c: 224: {
  6241                           ;IR.c: 225: NECtemp++;
  6242  0391  3001               	movlw	1
  6243  0392  07C5               	addwf	IRrawToNEC@NECtemp,f
  6244  0393  3000               	movlw	0
  6245  0394  3DC6               	addwfc	IRrawToNEC@NECtemp+1,f
  6246  0395  3000               	movlw	0
  6247  0396  3DC7               	addwfc	IRrawToNEC@NECtemp+2,f
  6248  0397  3000               	movlw	0
  6249  0398  3DC8               	addwfc	IRrawToNEC@NECtemp+3,f
  6250  0399                     i1l1727:	
  6251                           
  6252                           ;IR.c: 226: }
  6253                           ;IR.c: 227: first = 0;
  6254  0399  01CA               	clrf	IRrawToNEC@first
  6255                           
  6256                           ;IR.c: 228: }
  6257  039A  2C8C               	goto	i1l1783
  6258  039B                     i1l1729:	
  6259                           
  6260                           ;IR.c: 229: else
  6261                           ;IR.c: 230: {
  6262                           ;IR.c: 232: return 0;
  6263  039B  3000               	movlw	0
  6264  039C  0008               	return
  6265  039D                     i1l1733:	
  6266                           ;IR.c: 233: }
  6267                           ;IR.c: 234: }
  6268                           
  6269                           
  6270                           ;IR.c: 235: else if(Raw[StartBit] == 0 && first == 1)
  6271  039D  084C               	movf	IRrawToNEC@StartBit,w
  6272  039E  00F4               	movwf	??_IRrawToNEC
  6273  039F  01F5               	clrf	??_IRrawToNEC+1
  6274  03A0  35F4               	lslf	??_IRrawToNEC,f
  6275  03A1  0DF5               	rlf	??_IRrawToNEC+1,f
  6276  03A2  0874               	movf	??_IRrawToNEC,w
  6277  03A3  0770               	addwf	IRrawToNEC@Raw,w
  6278  03A4  0086               	movwf	6
  6279  03A5  0875               	movf	??_IRrawToNEC+1,w
  6280  03A6  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6281  03A7  0087               	movwf	7
  6282  03A8  0016               	moviw fsr1++
  6283  03A9  0401               	iorwf	1,w
  6284  03AA  1D03               	btfss	3,2
  6285  03AB  2BBC               	goto	i1l1745
  6286  03AC  034A               	decf	IRrawToNEC@first,w
  6287  03AD  1D03               	btfss	3,2
  6288  03AE  2BBC               	goto	i1l1745
  6289                           
  6290                           ;IR.c: 236: {
  6291                           ;IR.c: 241: *NEC = NECtemp;
  6292  03AF  0872               	movf	IRrawToNEC@NEC,w
  6293  03B0  0086               	movwf	6
  6294  03B1  0187               	clrf	7
  6295  03B2  0845               	movf	IRrawToNEC@NECtemp,w
  6296  03B3  3FC0               	movwi [0]fsr1
  6297  03B4  0846               	movf	IRrawToNEC@NECtemp+1,w
  6298  03B5  3FC1               	movwi [1]fsr1
  6299  03B6  0847               	movf	IRrawToNEC@NECtemp+2,w
  6300  03B7  3FC2               	movwi [2]fsr1
  6301  03B8  0848               	movf	IRrawToNEC@NECtemp+3,w
  6302  03B9  3FC3               	movwi [3]fsr1
  6303                           
  6304                           ;IR.c: 242: return 1;
  6305  03BA  3001               	movlw	1
  6306  03BB  0008               	return
  6307  03BC                     i1l1745:	
  6308                           ;IR.c: 243: }
  6309                           
  6310                           
  6311                           ;IR.c: 244: else if(Raw[StartBit] >= 9500 && Raw[StartBit] <= 10500)
  6312  03BC  084C               	movf	IRrawToNEC@StartBit,w
  6313  03BD  00F4               	movwf	??_IRrawToNEC
  6314  03BE  01F5               	clrf	??_IRrawToNEC+1
  6315  03BF  35F4               	lslf	??_IRrawToNEC,f
  6316  03C0  0DF5               	rlf	??_IRrawToNEC+1,f
  6317  03C1  0874               	movf	??_IRrawToNEC,w
  6318  03C2  0770               	addwf	IRrawToNEC@Raw,w
  6319  03C3  0086               	movwf	6
  6320  03C4  0875               	movf	??_IRrawToNEC+1,w
  6321  03C5  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6322  03C6  0087               	movwf	7
  6323  03C7  3F40               	moviw [0]fsr1
  6324  03C8  00F6               	movwf	??_IRrawToNEC+2
  6325  03C9  3F41               	moviw [1]fsr1
  6326  03CA  00F7               	movwf	??_IRrawToNEC+3
  6327  03CB  3025               	movlw	37
  6328  03CC  0277               	subwf	??_IRrawToNEC+3,w
  6329  03CD  301C               	movlw	28
  6330  03CE  1903               	skipnz
  6331  03CF  0276               	subwf	??_IRrawToNEC+2,w
  6332  03D0  1C03               	skipc
  6333  03D1  2BEB               	goto	i1l1751
  6334  03D2  084C               	movf	IRrawToNEC@StartBit,w
  6335  03D3  00F4               	movwf	??_IRrawToNEC
  6336  03D4  01F5               	clrf	??_IRrawToNEC+1
  6337  03D5  35F4               	lslf	??_IRrawToNEC,f
  6338  03D6  0DF5               	rlf	??_IRrawToNEC+1,f
  6339  03D7  0874               	movf	??_IRrawToNEC,w
  6340  03D8  0770               	addwf	IRrawToNEC@Raw,w
  6341  03D9  0086               	movwf	6
  6342  03DA  0875               	movf	??_IRrawToNEC+1,w
  6343  03DB  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6344  03DC  0087               	movwf	7
  6345  03DD  3F40               	moviw [0]fsr1
  6346  03DE  00F6               	movwf	??_IRrawToNEC+2
  6347  03DF  3F41               	moviw [1]fsr1
  6348  03E0  00F7               	movwf	??_IRrawToNEC+3
  6349  03E1  3029               	movlw	41
  6350  03E2  0277               	subwf	??_IRrawToNEC+3,w
  6351  03E3  3005               	movlw	5
  6352  03E4  1903               	skipnz
  6353  03E5  0276               	subwf	??_IRrawToNEC+2,w
  6354  03E6  1803               	skipnc
  6355  03E7  2BEB               	goto	i1l1751
  6356                           
  6357                           ;IR.c: 245: {
  6358                           ;IR.c: 247: Pause = 1;
  6359  03E8  01C9               	clrf	IRrawToNEC@Pause
  6360  03E9  0AC9               	incf	IRrawToNEC@Pause,f
  6361                           
  6362                           ;IR.c: 248: }
  6363  03EA  2C8C               	goto	i1l1783
  6364  03EB                     i1l1751:	
  6365                           
  6366                           ;IR.c: 249: else if(Pause == 1 && Raw[StartBit] >= 2000 && Raw[StartBit] <= 2500)
  6367  03EB  0349               	decf	IRrawToNEC@Pause,w
  6368  03EC  1D03               	btfss	3,2
  6369  03ED  2C1C               	goto	i1l1759
  6370  03EE  084C               	movf	IRrawToNEC@StartBit,w
  6371  03EF  00F4               	movwf	??_IRrawToNEC
  6372  03F0  01F5               	clrf	??_IRrawToNEC+1
  6373  03F1  35F4               	lslf	??_IRrawToNEC,f
  6374  03F2  0DF5               	rlf	??_IRrawToNEC+1,f
  6375  03F3  0874               	movf	??_IRrawToNEC,w
  6376  03F4  0770               	addwf	IRrawToNEC@Raw,w
  6377  03F5  0086               	movwf	6
  6378  03F6  0875               	movf	??_IRrawToNEC+1,w
  6379  03F7  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6380  03F8  0087               	movwf	7
  6381  03F9  3F40               	moviw [0]fsr1
  6382  03FA  00F6               	movwf	??_IRrawToNEC+2
  6383  03FB  3F41               	moviw [1]fsr1
  6384  03FC  00F7               	movwf	??_IRrawToNEC+3
  6385  03FD  3007               	movlw	7
  6386  03FE  0277               	subwf	??_IRrawToNEC+3,w
  6387  03FF  30D0               	movlw	208
  6388  0400  1903               	skipnz
  6389  0401  0276               	subwf	??_IRrawToNEC+2,w
  6390  0402  1C03               	skipc
  6391  0403  2C1C               	goto	i1l1759
  6392  0404  084C               	movf	IRrawToNEC@StartBit,w
  6393  0405  00F4               	movwf	??_IRrawToNEC
  6394  0406  01F5               	clrf	??_IRrawToNEC+1
  6395  0407  35F4               	lslf	??_IRrawToNEC,f
  6396  0408  0DF5               	rlf	??_IRrawToNEC+1,f
  6397  0409  0874               	movf	??_IRrawToNEC,w
  6398  040A  0770               	addwf	IRrawToNEC@Raw,w
  6399  040B  0086               	movwf	6
  6400  040C  0875               	movf	??_IRrawToNEC+1,w
  6401  040D  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6402  040E  0087               	movwf	7
  6403  040F  3F40               	moviw [0]fsr1
  6404  0410  00F6               	movwf	??_IRrawToNEC+2
  6405  0411  3F41               	moviw [1]fsr1
  6406  0412  00F7               	movwf	??_IRrawToNEC+3
  6407  0413  3009               	movlw	9
  6408  0414  0277               	subwf	??_IRrawToNEC+3,w
  6409  0415  30C5               	movlw	197
  6410  0416  1903               	skipnz
  6411  0417  0276               	subwf	??_IRrawToNEC+2,w
  6412  0418  1803               	skipnc
  6413  0419  2C1C               	goto	i1l1759
  6414                           
  6415                           ;IR.c: 250: {
  6416                           ;IR.c: 252: Pause = 2;
  6417  041A  3002               	movlw	2
  6418  041B  2C4D               	goto	L7
  6419  041C                     i1l1759:	
  6420                           ;IR.c: 253: }
  6421                           
  6422                           
  6423                           ;IR.c: 254: else if(Pause == 2 && Raw[StartBit] >= 462 && Raw[StartBit] <= 625)
  6424  041C  3002               	movlw	2
  6425  041D  0649               	xorwf	IRrawToNEC@Pause,w
  6426  041E  1D03               	btfss	3,2
  6427  041F  2C51               	goto	i1l1767
  6428  0420  084C               	movf	IRrawToNEC@StartBit,w
  6429  0421  00F4               	movwf	??_IRrawToNEC
  6430  0422  01F5               	clrf	??_IRrawToNEC+1
  6431  0423  35F4               	lslf	??_IRrawToNEC,f
  6432  0424  0DF5               	rlf	??_IRrawToNEC+1,f
  6433  0425  0874               	movf	??_IRrawToNEC,w
  6434  0426  0770               	addwf	IRrawToNEC@Raw,w
  6435  0427  0086               	movwf	6
  6436  0428  0875               	movf	??_IRrawToNEC+1,w
  6437  0429  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6438  042A  0087               	movwf	7
  6439  042B  3F40               	moviw [0]fsr1
  6440  042C  00F6               	movwf	??_IRrawToNEC+2
  6441  042D  3F41               	moviw [1]fsr1
  6442  042E  00F7               	movwf	??_IRrawToNEC+3
  6443  042F  3001               	movlw	1
  6444  0430  0277               	subwf	??_IRrawToNEC+3,w
  6445  0431  30CE               	movlw	206
  6446  0432  1903               	skipnz
  6447  0433  0276               	subwf	??_IRrawToNEC+2,w
  6448  0434  1C03               	skipc
  6449  0435  2C51               	goto	i1l1767
  6450  0436  084C               	movf	IRrawToNEC@StartBit,w
  6451  0437  00F4               	movwf	??_IRrawToNEC
  6452  0438  01F5               	clrf	??_IRrawToNEC+1
  6453  0439  35F4               	lslf	??_IRrawToNEC,f
  6454  043A  0DF5               	rlf	??_IRrawToNEC+1,f
  6455  043B  0874               	movf	??_IRrawToNEC,w
  6456  043C  0770               	addwf	IRrawToNEC@Raw,w
  6457  043D  0086               	movwf	6
  6458  043E  0875               	movf	??_IRrawToNEC+1,w
  6459  043F  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6460  0440  0087               	movwf	7
  6461  0441  3F40               	moviw [0]fsr1
  6462  0442  00F6               	movwf	??_IRrawToNEC+2
  6463  0443  3F41               	moviw [1]fsr1
  6464  0444  00F7               	movwf	??_IRrawToNEC+3
  6465  0445  3002               	movlw	2
  6466  0446  0277               	subwf	??_IRrawToNEC+3,w
  6467  0447  3072               	movlw	114
  6468  0448  1903               	skipnz
  6469  0449  0276               	subwf	??_IRrawToNEC+2,w
  6470  044A  1803               	skipnc
  6471  044B  2C51               	goto	i1l1767
  6472                           
  6473                           ;IR.c: 255: {
  6474                           ;IR.c: 258: Pause = 3;
  6475  044C  3003               	movlw	3
  6476  044D                     L7:	
  6477  044D  00F4               	movwf	??_IRrawToNEC
  6478  044E  0874               	movf	??_IRrawToNEC,w
  6479  044F  00C9               	movwf	IRrawToNEC@Pause
  6480                           
  6481                           ;IR.c: 259: }
  6482  0450  2C8C               	goto	i1l1783
  6483  0451                     i1l1767:	
  6484                           
  6485                           ;IR.c: 260: else if(Raw[StartBit] >= 22500 && Raw[StartBit] <= 25000)
  6486  0451  084C               	movf	IRrawToNEC@StartBit,w
  6487  0452  00F4               	movwf	??_IRrawToNEC
  6488  0453  01F5               	clrf	??_IRrawToNEC+1
  6489  0454  35F4               	lslf	??_IRrawToNEC,f
  6490  0455  0DF5               	rlf	??_IRrawToNEC+1,f
  6491  0456  0874               	movf	??_IRrawToNEC,w
  6492  0457  0770               	addwf	IRrawToNEC@Raw,w
  6493  0458  0086               	movwf	6
  6494  0459  0875               	movf	??_IRrawToNEC+1,w
  6495  045A  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6496  045B  0087               	movwf	7
  6497  045C  3F40               	moviw [0]fsr1
  6498  045D  00F6               	movwf	??_IRrawToNEC+2
  6499  045E  3F41               	moviw [1]fsr1
  6500  045F  00F7               	movwf	??_IRrawToNEC+3
  6501  0460  3057               	movlw	87
  6502  0461  0277               	subwf	??_IRrawToNEC+3,w
  6503  0462  30E4               	movlw	228
  6504  0463  1903               	skipnz
  6505  0464  0276               	subwf	??_IRrawToNEC+2,w
  6506  0465  1C03               	skipc
  6507  0466  2C8A               	goto	i1l1779
  6508  0467  084C               	movf	IRrawToNEC@StartBit,w
  6509  0468  00F4               	movwf	??_IRrawToNEC
  6510  0469  01F5               	clrf	??_IRrawToNEC+1
  6511  046A  35F4               	lslf	??_IRrawToNEC,f
  6512  046B  0DF5               	rlf	??_IRrawToNEC+1,f
  6513  046C  0874               	movf	??_IRrawToNEC,w
  6514  046D  0770               	addwf	IRrawToNEC@Raw,w
  6515  046E  0086               	movwf	6
  6516  046F  0875               	movf	??_IRrawToNEC+1,w
  6517  0470  3D71               	addwfc	IRrawToNEC@Raw+1,w
  6518  0471  0087               	movwf	7
  6519  0472  3F40               	moviw [0]fsr1
  6520  0473  00F6               	movwf	??_IRrawToNEC+2
  6521  0474  3F41               	moviw [1]fsr1
  6522  0475  00F7               	movwf	??_IRrawToNEC+3
  6523  0476  3061               	movlw	97
  6524  0477  0277               	subwf	??_IRrawToNEC+3,w
  6525  0478  30A9               	movlw	169
  6526  0479  1903               	skipnz
  6527  047A  0276               	subwf	??_IRrawToNEC+2,w
  6528  047B  1803               	skipnc
  6529  047C  2C8A               	goto	i1l1779
  6530                           
  6531                           ;IR.c: 261: {
  6532                           ;IR.c: 263: *NEC = NECtemp;
  6533  047D  0872               	movf	IRrawToNEC@NEC,w
  6534  047E  0086               	movwf	6
  6535  047F  0187               	clrf	7
  6536  0480  0845               	movf	IRrawToNEC@NECtemp,w
  6537  0481  3FC0               	movwi [0]fsr1
  6538  0482  0846               	movf	IRrawToNEC@NECtemp+1,w
  6539  0483  3FC1               	movwi [1]fsr1
  6540  0484  0847               	movf	IRrawToNEC@NECtemp+2,w
  6541  0485  3FC2               	movwi [2]fsr1
  6542  0486  0848               	movf	IRrawToNEC@NECtemp+3,w
  6543  0487  3FC3               	movwi [3]fsr1
  6544                           
  6545                           ;IR.c: 264: return 2;
  6546  0488  3002               	movlw	2
  6547  0489  0008               	return
  6548  048A                     i1l1779:	
  6549                           ;IR.c: 265: }
  6550                           
  6551                           
  6552                           ;IR.c: 266: else
  6553                           ;IR.c: 267: {
  6554                           ;IR.c: 268: return 0;
  6555  048A  3000               	movlw	0
  6556  048B  0008               	return
  6557  048C                     i1l1783:	
  6558                           
  6559                           ;IR.c: 269: }
  6560                           ;IR.c: 270: StartBit++;
  6561  048C  3001               	movlw	1
  6562  048D  00F4               	movwf	??_IRrawToNEC
  6563  048E  0874               	movf	??_IRrawToNEC,w
  6564  048F  07CC               	addwf	IRrawToNEC@StartBit,f
  6565  0490  3001               	movlw	1
  6566  0491  00F4               	movwf	??_IRrawToNEC
  6567  0492  0874               	movf	??_IRrawToNEC,w
  6568  0493  07CB               	addwf	IRrawToNEC@i,f
  6569  0494  3048               	movlw	72
  6570  0495  024B               	subwf	IRrawToNEC@i,w
  6571  0496  1C03               	skipc
  6572  0497  2B01               	goto	i1l1693
  6573  0498                     i1l1787:	
  6574                           
  6575                           ;IR.c: 271: }
  6576                           ;IR.c: 273: return 0;
  6577  0498  3000               	movlw	0
  6578  0499  0008               	return
  6579  049A                     __end_of_IRrawToNEC:	
  6580  007E                     btemp	set	126	;btemp
  6581  007E                     wtemp	set	126
  6582  007E                     wtemp0	set	126
  6583  0080                     wtemp1	set	128
  6584  0082                     wtemp2	set	130
  6585  0084                     wtemp3	set	132
  6586  0086                     wtemp4	set	134
  6587  0088                     wtemp5	set	136
  6588  007F                     wtemp6	set	127
  6589  007E                     ttemp	set	126
  6590  007E                     ttemp0	set	126
  6591  0081                     ttemp1	set	129
  6592  0084                     ttemp2	set	132
  6593  0087                     ttemp3	set	135
  6594  007F                     ttemp4	set	127
  6595  007E                     ltemp	set	126
  6596  007E                     ltemp0	set	126
  6597  0082                     ltemp1	set	130
  6598  0086                     ltemp2	set	134
  6599  0080                     ltemp3	set	128


Data Sizes:
    Strings     0
    Constant    9
    Data        16
    BSS         42
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      9      14
    BANK0            80     22      63
    BANK1            80     10      22
    BANK2            80      0       0
    BANK3            80      0       0
    BANK4            32      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    UseIRCode@Code	PTR unsigned char  size(1) Largest target is 1
		 -> IR_New_Code(COMMON[1]), 

    IRrawToNEC@NEC	PTR unsigned long  size(1) Largest target is 4
		 -> IR_NEC(BANK0[4]), 

    IRrawToNEC@Raw	PTR unsigned int  size(2) Largest target is 144
		 -> IRRawCode(BIGRAM[144]), 

    SendRF@Code	PTR unsigned char  size(1) Largest target is 12
		 -> ChannelF(BANK1[12]), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _isr in COMMON

    _isr->_IRrawToNEC

Critical Paths under _main in BANK0

    _main->_UseIRCode
    _main->_delayUS
    _UseIRCode->_SendRF

Critical Paths under _isr in BANK0

    _isr->_IRrawToNEC

Critical Paths under _main in BANK1

    _main->_UseIRCode
    _UseIRCode->_SendRF

Critical Paths under _isr in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _isr in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _isr in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _isr in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _isr in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _isr in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0    1130
                                              8 BANK1      2     2      0
                _ConfigureOscillator
                            _InitApp
                          _UseIRCode
                            _delayUS
                            _init_IR
                        _init_Timers
 ---------------------------------------------------------------------------------
 (1) _init_Timers                                          0     0      0       0
                         _Timer1Init
                         _Timer2Init
                         _Timer4Init
                         _Timer6Init
 ---------------------------------------------------------------------------------
 (2) _Timer6Init                                           0     0      0       0
                          _Timer6OFF
 ---------------------------------------------------------------------------------
 (2) _Timer4Init                                           0     0      0       0
                          _Timer4OFF
 ---------------------------------------------------------------------------------
 (3) _Timer4OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer2Init                                           0     0      0       0
                          _Timer2OFF
 ---------------------------------------------------------------------------------
 (3) _Timer2OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _init_IR                                              0     0      0       0
                          _Enable_IR
                         _Timer1Init
 ---------------------------------------------------------------------------------
 (2) _Timer1Init                                           0     0      0       0
                       _Reset_Timer1
                        _Stop_Timer1
 ---------------------------------------------------------------------------------
 (3) _Stop_Timer1                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Reset_Timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Enable_IR                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _delayUS                                             10     6      4     266
                                             17 BANK0      5     1      4
                                              0 BANK1      5     5      0
 ---------------------------------------------------------------------------------
 (1) _UseIRCode                                            7     3      4     793
                                             21 BANK0      1     1      0
                                              2 BANK1      6     2      4
                             _SendRF
                         _Set_Timer6
                          _Timer6OFF
                           _Timer6ON
                        _Timer6Reset
 ---------------------------------------------------------------------------------
 (2) _Timer6Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Timer6ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Timer6OFF                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _Set_Timer6                                           1     1      0      31
                                             17 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (2) _SendRF                                               6     4      2     574
                                             17 BANK0      4     2      2
                                              0 BANK1      2     2      0
                           _Timer2ON
 ---------------------------------------------------------------------------------
 (3) _Timer2ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _InitApp                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ConfigureOscillator                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (4) _isr                                                  9     9      0    1501
                                              8 BANK0      9     9      0
                         _IRrawToNEC
                         _Set_Timer4
                       _Start_Timer1
                           _Timer4ON
                        _Timer4Reset
                     i1_Reset_Timer1
                      i1_Stop_Timer1
                        i1_Timer2OFF
                        i1_Timer4OFF
                        i1_Timer6OFF
 ---------------------------------------------------------------------------------
 (5) i1_Timer6OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Timer4OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Timer2OFF                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Stop_Timer1                                        0     0      0       0
 ---------------------------------------------------------------------------------
 (5) i1_Reset_Timer1                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer4Reset                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Timer4ON                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Start_Timer1                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (5) _Set_Timer4                                           1     1      0      22
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (5) _IRrawToNEC                                          17    13      4    1479
                                              0 COMMON     9     5      4
                                              0 BANK0      8     8      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _ConfigureOscillator
   _InitApp
   _UseIRCode
     _SendRF
       _Timer2ON
     _Set_Timer6
     _Timer6OFF
     _Timer6ON
     _Timer6Reset
   _delayUS
   _init_IR
     _Enable_IR
     _Timer1Init
       _Reset_Timer1
       _Stop_Timer1
   _init_Timers
     _Timer1Init
       _Reset_Timer1
       _Stop_Timer1
     _Timer2Init
       _Timer2OFF
     _Timer4Init
       _Timer4OFF
     _Timer6Init
       _Timer6OFF

 _isr (ROOT)
   _IRrawToNEC
   _Set_Timer4
   _Start_Timer1
   _Timer4ON
   _Timer4Reset
   i1_Reset_Timer1
   i1_Stop_Timer1
   i1_Timer2OFF
   i1_Timer4OFF
   i1_Timer6OFF

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      9       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0      63       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     16      3F       6       78.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      A      16       8       27.5%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               20      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0      63      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Wed Oct 21 15:28:14 2015

                 __CFG_CP$OFF 0000                   __CFG_LVP$ON 0000                           l217 05CF  
                         l219 05F0                           l173 04B0                           l175 04E6  
                         l480 0565                           _PR2 001B                           _PR4 0416  
                         _PR6 041D                           _isr 0004                    _IRrawToNEC 022C  
                  _IRrawCount 0038                    _IRreceived 003F                  __CFG_BORV$LO 0000  
                         wreg 0009                          l2403 051B                          l2261 0593  
                        l2325 05FB                          l2405 0525                          l2335 0542  
                        l2281 05C4                          l2345 0569                          l2291 0642  
                        l2267 0595                          l2269 05B2                          l2383 04E1  
                        l2395 0513                          l2387 04FD                          ?_isr 0070  
                        _LATC 010E                          u1873 05E9                          i1l83 00CA  
                        _TMR2 001A                          _TMR4 0415                          _TMR6 041C  
               i1_Stop_Timer1 0768                  __CFG_WRT$OFF 0000                          _Sent 005E  
                        _main 049A                          fsr0h 0005                          fsr1h 0007  
                        fsr0l 0004                          indf0 0000                          indf1 0001  
                        fsr1l 0006                          btemp 007E                    _RFsendCode 0020  
                  _RFsendFlag 007C                 __CFG_BOREN$ON 0000                          ltemp 007E  
                 _RFcodePlace 007B                          start 01F1                          ttemp 007E  
                        wtemp 007E                 __CFG_IESO$OFF 0000                 __CFG_MCLRE$ON 0000  
             __end_of_InitApp 063C                         ??_isr 004D             IRrawToNEC@NECtemp 0045  
                ?_init_Timers 0070               __end_of_Version 0709                         ?_main 0070  
               __CFG_WDTE$OFF 0000                         i1l112 0085                         i1l121 01EC  
                       i1l122 00E4                         i1l132 01D6                         i1l124 01B4  
                       i1l136 01EB                         _TMR1H 0017                         _TMR1L 0016  
                       _PORTC 000E           _ConfigureOscillator 063C               __end_of_delayUS 0604  
              __CFG_FCMEN$OFF 0000                    SendRF@Code 00AC                  _IRrawCodeNum 0079  
             __end_of_init_IR 0717                    SendRF@size 0056                ?i1_Stop_Timer1 0070  
                       main@i 00B5                         ltemp0 007E                         ltemp1 0082  
                       ltemp2 0086                         ltemp3 0080                         ttemp0 007E  
                       ttemp1 0081                         ttemp2 0084                         ttemp3 0087  
                       ttemp4 007F                         status 0003                         wtemp0 007E  
                       wtemp1 0080                         wtemp2 0082                         wtemp3 0084  
                       wtemp4 0086                         wtemp5 0088                         wtemp6 007F  
        ?_ConfigureOscillator 0070               __initialization 01F3                  __end_of_main 052E  
              __CFG_LPBOR$OFF 0000                        ??_main 00B4            __size_of_Enable_IR 0004  
          SendRF@RepeatAmount 0057                __CFG_PLLEN$OFF 0000              __end_of_Timer2ON 0748  
            __end_of_Timer4ON 074D              __end_of_Timer6ON 0743                   ?_IRrawToNEC 0070  
              __CFG_ZCDDIS$ON 0000                        _ANSELC 018E                        _HFIOFS 04D0  
                      u101_25 02BE                        i1l2011 0094                        i1l2003 0088  
                      i1l2101 0186                        i1l2013 0096                        i1l2111 01A6  
                      i1l2041 00C1                        i1l2043 00C2                        i1l2117 01AE  
                      i1l2029 00B0                        i1l2135 01D1                        i1l2093 0178  
                      i1l1703 0337                        i1l1711 034B                        i1l2099 0181  
                      i1l1733 039D                        i1l1717 0358                        i1l1751 03EB  
                      i1l1727 0399                        i1l1745 03BC                        i1l1729 039B  
                      i1l1681 02F3                        i1l1665 029F                        i1l1649 0240  
                      i1l1921 0040                        i1l1675 02C2                        i1l1659 026E  
                      u114_25 0388                        i1l1693 0301                        i1l1685 02F5  
                      i1l1669 02A7                        i1l1767 0451                        i1l1759 041C  
                      i1l1783 048C                        i1l1779 048A                        i1l1787 0498  
                      i1l1963 0055                        i1l1981 0063                        i1l1989 0071  
                      u109_25 0339                        _IR_NEC 0041                    _Set_Timer4 074D  
                  _Set_Timer6 0732                     ??_InitApp 0056         ??_ConfigureOscillator 0056  
              __CFG_PWRTE$OFF 0000                 ??_Timer4Reset 0070                    _SleepTimer 0034  
                      _SendRF 057B                 ??_Timer6Reset 0056                    _Timer1Init 0618  
                  _Timer2Init 0604                    _Timer4Init 0685                    _Timer6Init 0679  
              __CFG_STVREN$ON 0000                     ??_delayUS 005A            __size_of_UseIRCode 004D  
          __size_of_Timer2OFF 0006              ??i1_Reset_Timer1 0070            __size_of_Timer4OFF 0007  
          __size_of_Timer6OFF 0007                     ??_init_IR 0056            IRrawToNEC@StartBit 004C  
             ??i1_Stop_Timer1 0070                  _BlueLEDcount 005B                  ?i1_Timer2OFF 0070  
                ?i1_Timer4OFF 0070                  ?i1_Timer6OFF 0070       __end_of__initialization 0229  
           __end_of_Enable_IR 075E           __size_of_IRrawToNEC 026E                __pcstackCOMMON 0070  
                __pidataBANK0 0752                  __pidataBANK1 0649           __end_of_Timer4Reset 076E  
         __end_of_Timer6Reset 0768          __size_of_init_Timers 000C                 ?_Reset_Timer1 0070  
               ??_Stop_Timer1 0056                    __pbssBANK0 0020                   ?_Set_Timer4 0070  
                 ?_Set_Timer6 0070             __end_of_UseIRCode 057B             __end_of_Timer2OFF 0732  
           __end_of_Timer4OFF 0710             __end_of_Timer6OFF 071E                   ?_Timer1Init 0070  
                     ?_SendRF 0056                   ?_Timer2Init 0070                   ?_Timer4Init 0070  
                 ?_Timer6Init 0070                     ?_Timer2ON 0070                     ?_Timer4ON 0070  
                   ?_Timer6ON 0070                    __pmaintext 049A                    __pintentry 0004  
              ??_Reset_Timer1 0056                 UseIRCode@Code 005A                       _OSCSTAT 009A  
                     _IRfault 003E                       SendRF@i 00AD                       _InitApp 062A  
         __end_of_Stop_Timer1 0765                    ??_Timer2ON 0056                    ??_Timer4ON 0070  
                  ??_Timer6ON 0056                   _Timer4Reset 076B               __size_of_SendRF 004B  
                 _Timer6Reset 0765                       _Version 0700                Set_Timer4@time 0070  
              Set_Timer6@time 0056                       _delayUS 05C6                       __ptext1 066D  
                     __ptext2 0679                       __ptext3 0685                       __ptext4 0709  
                     __ptext5 0604                       __ptext6 072C                       __ptext7 0710  
                     __ptext8 0618                       __ptext9 0762           __size_of_Set_Timer4 0005  
         __size_of_Set_Timer6 0006                     _T1CONbits 0018                       _init_IR 0710  
                ??_IRrawToNEC 0074                     _T2CONbits 001C                  __size_of_isr 01ED  
                   _T4CONbits 0417                     _IOCCFbits 0399                     _T6CONbits 041E  
                   _IOCCNbits 0398                     _IOCCPbits 0397           __size_of_Timer1Init 0012  
         __size_of_Timer2Init 0014           __size_of_Timer4Init 000C           __size_of_Timer6Init 000C  
                     clrloop0 0656          end_of_initialization 0229                       init_ram 0661  
                     initloop 0662          __size_ofi1_Timer2OFF 0006          __size_ofi1_Timer4OFF 0007  
        __size_ofi1_Timer6OFF 0007            __end_of_IRrawToNEC 049A                  __pstringtext 0700  
                   _IRRawCode 2160                 ?_Start_Timer1 0070              __CFG_FOSC$INTOSC 0000  
                   _TRISCbits 008E   __end_of_ConfigureOscillator 0649                   _Stop_Timer1 0762  
                   _RFcodeBit 007A                   _CCP1CONbits 0293                   _CCP2CONbits 029A  
        __end_of_Reset_Timer1 075A                     _Enable_IR 075A                __end_of_SendRF 05C6  
              ??_Start_Timer1 0070              IRrawToNEC@Invert 0073           start_initialization 01F3  
                 __end_of_isr 01F1         __end_ofi1_Stop_Timer1 076B                  ??_Set_Timer4 0070  
                ??_Set_Timer6 0056                     _Sendcount 0040                  ??_Timer1Init 0056  
                ??_Timer2Init 0056                     _UseIRCode 052E                  ??_Timer4Init 0056  
                   _Timer2OFF 072C                      ??_SendRF 0058                     _Timer4OFF 0709  
                ??_Timer6Init 0056                     _Timer6OFF 0717                    ?_Enable_IR 0070  
           __size_of_Timer2ON 0005             __size_of_Timer4ON 0005             __size_of_Timer6ON 0005  
                 __pdataBANK0 005B                   __pdataBANK1 00A0                 ??_init_Timers 0056  
          __end_of_Set_Timer4 0752            __end_of_Set_Timer6 0738                   __pbssBIGRAM 2160  
                 __pbssCOMMON 0079                     ___latbits 0001                 __pcstackBANK0 0045  
               __pcstackBANK1 00AC            __end_of_Timer1Init 062A            __end_of_Timer2Init 0618  
          __end_of_Timer4Init 0691            __end_of_Timer6Init 0685       __size_ofi1_Reset_Timer1 0004  
                    ?_InitApp 0070                    ?_UseIRCode 00AE                    ?_Timer2OFF 0070  
                  ?_Timer4OFF 0070                    ?_Timer6OFF 0070                  ?_Timer4Reset 0070  
                ?_Timer6Reset 0070                   IRrawToNEC@i 004B              __CFG_PPS1WAY$OFF 0000  
                UseIRCode@NEC 00AE                      ?_delayUS 0056                      ?_init_IR 0070  
               IRrawToNEC@NEC 0072                 IRrawToNEC@Raw 0070           __end_of_init_Timers 0679  
                   delayUS@US 0056         __size_of_Reset_Timer1 0004          __end_of_Start_Timer1 0771  
                   clear_ram0 0655                      _PIE1bits 0091                      _PIE2bits 0092  
                    _LEDsdone 005D                      _PIR1bits 0011                      _PIR2bits 0012  
                 ??_Enable_IR 0056                      _ChannelF 00A0                  _Reset_Timer1 0756  
                ?_Stop_Timer1 0070               IRrawToNEC@Pause 0049                 ??i1_Timer2OFF 0070  
               ??i1_Timer4OFF 0070                 ??i1_Timer6OFF 0070               IRrawToNEC@first 004A  
            __size_of_InitApp 0012                   ??_UseIRCode 00B2                   ??_Timer2OFF 0056  
                 ??_Timer4OFF 0056                   ??_Timer6OFF 0056                      _Timer2ON 0743  
                    _Timer4ON 0748                      _Timer6ON 073E                   _init_Timers 066D  
            __size_of_delayUS 003E              __size_of_init_IR 0007                 _TMR1_overflow 003A  
                    __ptext10 0756                      __ptext11 075A                      __ptext20 062A  
                    __ptext12 05C6                      __ptext21 063C                      __ptext13 052E  
                    __ptext30 076E                      __ptext14 0765                      __ptext31 074D  
                    __ptext23 071E                      __ptext15 073E                      __ptext32 022C  
                    __ptext24 0725                      __ptext16 0717                      __ptext25 0738  
                    __ptext17 0732                      __ptext26 0768                      __ptext18 057B  
                    __ptext27 075E                      __ptext19 0743                      __ptext28 076B  
                    __ptext29 0748                i1_Reset_Timer1 075E                 __size_of_main 0094  
                    delayUS@i 00AC                      delayUS@j 00B0                 _TMR4_overflow 003C  
__size_of_ConfigureOscillator 000D           __end_ofi1_Timer2OFF 073E           __end_ofi1_Timer4OFF 072C  
         __end_ofi1_Timer6OFF 0725          __size_of_Timer4Reset 0003          __size_of_Timer6Reset 0003  
                  _INTCONbits 000B        __end_ofi1_Reset_Timer1 0762         __size_of_Start_Timer1 0003  
                    intlevel1 0000             __CFG_CLKOUTEN$OFF 0000                   _SLRCONCbits 030E  
                  _OSCCONbits 0099                   _IR_New_Code 007D        __size_ofi1_Stop_Timer1 0003  
                _Start_Timer1 076E               ?i1_Reset_Timer1 0070                   _VREGCONbits 0197  
                 i1_Timer2OFF 0738                   i1_Timer4OFF 0725                   i1_Timer6OFF 071E  
        __size_of_Stop_Timer1 0003  
